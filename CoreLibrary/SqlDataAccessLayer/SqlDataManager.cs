/************************************************
 CODEE42 - AUTO GENERATED FILE - DO NOT OVERWRITE
 ************************************************
 Created By: EJ Alexandra - 2016
             An Abstract Level, llc
 License:    Mozilla Public License 2.0
 ************************************************
 CODEE42 - AUTO GENERATED FILE - DO NOT OVERWRITE
 ************************************************/
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Configuration;

using MorseCodeSDK.Lib.DataClasses;

using CoreLibrary.Extensions;

namespace MorseCodeSDK.Lib.SqlDataManagement
{
    public partial class SqlDataManager : IDisposable
    {
        public SqlDataManager() : this(SqlDataManager.LastConnectionString) 
        {
            this.Schema = "dbo";
        }
    
        public SqlDataManager(String connectionString)
        {
            this.Schema = "dbo";
            this.ConnectionString = connectionString;
            if (String.IsNullOrEmpty(this.ConnectionString))
            {
                this.ConnectionString = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            }
        }

        public SqlDataManager(String dataSourceName, String dbName) 
        {
            this.Schema = "dbo";
            this.DataSourceName = dataSourceName;
            this.DBName = dbName;
        }
        
        public void Dispose() 
        {
            this.IsDisposed = true;
        }
        
        public static string LastConnectionString { get; set; }
        public string ConnectionString { get; set; }
        public String DataSourceName { get; set; }
        public String DBName { get; set; }
        public Boolean IsDisposed { get; set; }
        public String Schema { get; set; }
        

  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Wikipedia wikipedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Wikipedia] (WikipediaId, Name, Description)
                                    VALUES (@WikipediaId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(wikipedia.WikipediaId, null)) cmd.Parameters.AddWithValue("@WikipediaId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@WikipediaId", wikipedia.WikipediaId);
                
                  
                if (ReferenceEquals(wikipedia.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", wikipedia.Name);
                
                  
                if (ReferenceEquals(wikipedia.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", wikipedia.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Wikipedia wikipedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = wikipedia.WikipediaId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Wikipedia WHERE WikipediaId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(wikipedia);
                else return this.Insert(wikipedia);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllWikipedias<T>()
            where T : Wikipedia, new()
        {
            return this.GetAllWikipedias<T>(String.Empty);
        }

        
        public List<T> GetAllWikipedias<T>(String whereClause)
            where T : Wikipedia, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Wikipedia]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T wikipedia = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("WikipediaId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          wikipedia.WikipediaId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          wikipedia.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          wikipedia.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(wikipedia);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Wikipedia
        /// </summary>
        /// <returns></returns>
        public int Update(Wikipedia wikipedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Wikipedia] SET 
                                    Name = @Name,Description = @Description
                                    WHERE WikipediaId = @WikipediaId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(wikipedia.WikipediaId, null)) cmd.Parameters.AddWithValue("@WikipediaId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@WikipediaId", wikipedia.WikipediaId);
                 //TEXT
                
                if (ReferenceEquals(wikipedia.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", wikipedia.Name);
                 //TEXT
                
                if (ReferenceEquals(wikipedia.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", wikipedia.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Wikipedia
        /// </summary>
        /// <returns></returns>
        public int Delete(Wikipedia wikipedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Wikipedia] 
                                    WHERE WikipediaId = @WikipediaId", this.Schema);
                                    
                
                if (ReferenceEquals(wikipedia.WikipediaId, null)) cmd.Parameters.AddWithValue("@WikipediaId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@WikipediaId", wikipedia.WikipediaId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Morse morse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Morse] (MorseId, Name, Description)
                                    VALUES (@MorseId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(morse.MorseId, null)) cmd.Parameters.AddWithValue("@MorseId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MorseId", morse.MorseId);
                
                  
                if (ReferenceEquals(morse.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", morse.Name);
                
                  
                if (ReferenceEquals(morse.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", morse.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Morse morse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = morse.MorseId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Morse WHERE MorseId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(morse);
                else return this.Insert(morse);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllMorses<T>()
            where T : Morse, new()
        {
            return this.GetAllMorses<T>(String.Empty);
        }

        
        public List<T> GetAllMorses<T>(String whereClause)
            where T : Morse, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Morse]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T morse = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("MorseId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          morse.MorseId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          morse.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          morse.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(morse);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Morse
        /// </summary>
        /// <returns></returns>
        public int Update(Morse morse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Morse] SET 
                                    Name = @Name,Description = @Description
                                    WHERE MorseId = @MorseId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(morse.MorseId, null)) cmd.Parameters.AddWithValue("@MorseId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MorseId", morse.MorseId);
                 //TEXT
                
                if (ReferenceEquals(morse.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", morse.Name);
                 //TEXT
                
                if (ReferenceEquals(morse.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", morse.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Morse
        /// </summary>
        /// <returns></returns>
        public int Delete(Morse morse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Morse] 
                                    WHERE MorseId = @MorseId", this.Schema);
                                    
                
                if (ReferenceEquals(morse.MorseId, null)) cmd.Parameters.AddWithValue("@MorseId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@MorseId", morse.MorseId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Samuel samuel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Samuel] (SamuelId, Name, Description)
                                    VALUES (@SamuelId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(samuel.SamuelId, null)) cmd.Parameters.AddWithValue("@SamuelId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SamuelId", samuel.SamuelId);
                
                  
                if (ReferenceEquals(samuel.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", samuel.Name);
                
                  
                if (ReferenceEquals(samuel.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", samuel.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Samuel samuel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = samuel.SamuelId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Samuel WHERE SamuelId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(samuel);
                else return this.Insert(samuel);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSamuels<T>()
            where T : Samuel, new()
        {
            return this.GetAllSamuels<T>(String.Empty);
        }

        
        public List<T> GetAllSamuels<T>(String whereClause)
            where T : Samuel, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Samuel]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T samuel = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SamuelId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          samuel.SamuelId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          samuel.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          samuel.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(samuel);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Samuel
        /// </summary>
        /// <returns></returns>
        public int Update(Samuel samuel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Samuel] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SamuelId = @SamuelId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(samuel.SamuelId, null)) cmd.Parameters.AddWithValue("@SamuelId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SamuelId", samuel.SamuelId);
                 //TEXT
                
                if (ReferenceEquals(samuel.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", samuel.Name);
                 //TEXT
                
                if (ReferenceEquals(samuel.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", samuel.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Samuel
        /// </summary>
        /// <returns></returns>
        public int Delete(Samuel samuel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Samuel] 
                                    WHERE SamuelId = @SamuelId", this.Schema);
                                    
                
                if (ReferenceEquals(samuel.SamuelId, null)) cmd.Parameters.AddWithValue("@SamuelId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SamuelId", samuel.SamuelId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Samuelfbmorse samuelfbmorse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Samuelfbmorse] (SamuelfbmorseId, Name, Description)
                                    VALUES (@SamuelfbmorseId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(samuelfbmorse.SamuelfbmorseId, null)) cmd.Parameters.AddWithValue("@SamuelfbmorseId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SamuelfbmorseId", samuelfbmorse.SamuelfbmorseId);
                
                  
                if (ReferenceEquals(samuelfbmorse.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", samuelfbmorse.Name);
                
                  
                if (ReferenceEquals(samuelfbmorse.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", samuelfbmorse.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Samuelfbmorse samuelfbmorse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = samuelfbmorse.SamuelfbmorseId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Samuelfbmorse WHERE SamuelfbmorseId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(samuelfbmorse);
                else return this.Insert(samuelfbmorse);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSamuelfbmorses<T>()
            where T : Samuelfbmorse, new()
        {
            return this.GetAllSamuelfbmorses<T>(String.Empty);
        }

        
        public List<T> GetAllSamuelfbmorses<T>(String whereClause)
            where T : Samuelfbmorse, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Samuelfbmorse]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T samuelfbmorse = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SamuelfbmorseId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          samuelfbmorse.SamuelfbmorseId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          samuelfbmorse.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          samuelfbmorse.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(samuelfbmorse);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Samuelfbmorse
        /// </summary>
        /// <returns></returns>
        public int Update(Samuelfbmorse samuelfbmorse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Samuelfbmorse] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SamuelfbmorseId = @SamuelfbmorseId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(samuelfbmorse.SamuelfbmorseId, null)) cmd.Parameters.AddWithValue("@SamuelfbmorseId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SamuelfbmorseId", samuelfbmorse.SamuelfbmorseId);
                 //TEXT
                
                if (ReferenceEquals(samuelfbmorse.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", samuelfbmorse.Name);
                 //TEXT
                
                if (ReferenceEquals(samuelfbmorse.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", samuelfbmorse.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Samuelfbmorse
        /// </summary>
        /// <returns></returns>
        public int Delete(Samuelfbmorse samuelfbmorse)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Samuelfbmorse] 
                                    WHERE SamuelfbmorseId = @SamuelfbmorseId", this.Schema);
                                    
                
                if (ReferenceEquals(samuelfbmorse.SamuelfbmorseId, null)) cmd.Parameters.AddWithValue("@SamuelfbmorseId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SamuelfbmorseId", samuelfbmorse.SamuelfbmorseId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(International international)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[International] (InternationalId, Name, Description)
                                    VALUES (@InternationalId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(international.InternationalId, null)) cmd.Parameters.AddWithValue("@InternationalId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InternationalId", international.InternationalId);
                
                  
                if (ReferenceEquals(international.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", international.Name);
                
                  
                if (ReferenceEquals(international.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", international.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(International international)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = international.InternationalId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM International WHERE InternationalId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(international);
                else return this.Insert(international);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllInternationals<T>()
            where T : International, new()
        {
            return this.GetAllInternationals<T>(String.Empty);
        }

        
        public List<T> GetAllInternationals<T>(String whereClause)
            where T : International, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[International]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T international = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("InternationalId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          international.InternationalId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          international.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          international.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(international);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified International
        /// </summary>
        /// <returns></returns>
        public int Update(International international)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[International] SET 
                                    Name = @Name,Description = @Description
                                    WHERE InternationalId = @InternationalId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(international.InternationalId, null)) cmd.Parameters.AddWithValue("@InternationalId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InternationalId", international.InternationalId);
                 //TEXT
                
                if (ReferenceEquals(international.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", international.Name);
                 //TEXT
                
                if (ReferenceEquals(international.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", international.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified International
        /// </summary>
        /// <returns></returns>
        public int Delete(International international)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[International] 
                                    WHERE InternationalId = @InternationalId", this.Schema);
                                    
                
                if (ReferenceEquals(international.InternationalId, null)) cmd.Parameters.AddWithValue("@InternationalId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@InternationalId", international.InternationalId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Roman roman)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Roman] (RomanId, Name, Description)
                                    VALUES (@RomanId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(roman.RomanId, null)) cmd.Parameters.AddWithValue("@RomanId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RomanId", roman.RomanId);
                
                  
                if (ReferenceEquals(roman.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", roman.Name);
                
                  
                if (ReferenceEquals(roman.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", roman.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Roman roman)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = roman.RomanId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Roman WHERE RomanId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(roman);
                else return this.Insert(roman);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllRomans<T>()
            where T : Roman, new()
        {
            return this.GetAllRomans<T>(String.Empty);
        }

        
        public List<T> GetAllRomans<T>(String whereClause)
            where T : Roman, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Roman]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T roman = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("RomanId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          roman.RomanId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          roman.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          roman.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(roman);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Roman
        /// </summary>
        /// <returns></returns>
        public int Update(Roman roman)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Roman] SET 
                                    Name = @Name,Description = @Description
                                    WHERE RomanId = @RomanId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(roman.RomanId, null)) cmd.Parameters.AddWithValue("@RomanId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RomanId", roman.RomanId);
                 //TEXT
                
                if (ReferenceEquals(roman.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", roman.Name);
                 //TEXT
                
                if (ReferenceEquals(roman.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", roman.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Roman
        /// </summary>
        /// <returns></returns>
        public int Delete(Roman roman)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Roman] 
                                    WHERE RomanId = @RomanId", this.Schema);
                                    
                
                if (ReferenceEquals(roman.RomanId, null)) cmd.Parameters.AddWithValue("@RomanId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@RomanId", roman.RomanId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(English english)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[English] (EnglishId, Name, Description)
                                    VALUES (@EnglishId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(english.EnglishId, null)) cmd.Parameters.AddWithValue("@EnglishId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EnglishId", english.EnglishId);
                
                  
                if (ReferenceEquals(english.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", english.Name);
                
                  
                if (ReferenceEquals(english.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", english.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(English english)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = english.EnglishId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM English WHERE EnglishId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(english);
                else return this.Insert(english);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllEnglishs<T>()
            where T : English, new()
        {
            return this.GetAllEnglishs<T>(String.Empty);
        }

        
        public List<T> GetAllEnglishs<T>(String whereClause)
            where T : English, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[English]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T english = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("EnglishId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          english.EnglishId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          english.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          english.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(english);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified English
        /// </summary>
        /// <returns></returns>
        public int Update(English english)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[English] SET 
                                    Name = @Name,Description = @Description
                                    WHERE EnglishId = @EnglishId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(english.EnglishId, null)) cmd.Parameters.AddWithValue("@EnglishId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EnglishId", english.EnglishId);
                 //TEXT
                
                if (ReferenceEquals(english.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", english.Name);
                 //TEXT
                
                if (ReferenceEquals(english.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", english.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified English
        /// </summary>
        /// <returns></returns>
        public int Delete(English english)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[English] 
                                    WHERE EnglishId = @EnglishId", this.Schema);
                                    
                
                if (ReferenceEquals(english.EnglishId, null)) cmd.Parameters.AddWithValue("@EnglishId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@EnglishId", english.EnglishId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Aeronautical aeronautical)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Aeronautical] (AeronauticalId, Name, Description)
                                    VALUES (@AeronauticalId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(aeronautical.AeronauticalId, null)) cmd.Parameters.AddWithValue("@AeronauticalId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AeronauticalId", aeronautical.AeronauticalId);
                
                  
                if (ReferenceEquals(aeronautical.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aeronautical.Name);
                
                  
                if (ReferenceEquals(aeronautical.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aeronautical.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Aeronautical aeronautical)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = aeronautical.AeronauticalId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Aeronautical WHERE AeronauticalId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(aeronautical);
                else return this.Insert(aeronautical);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAeronauticals<T>()
            where T : Aeronautical, new()
        {
            return this.GetAllAeronauticals<T>(String.Empty);
        }

        
        public List<T> GetAllAeronauticals<T>(String whereClause)
            where T : Aeronautical, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Aeronautical]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T aeronautical = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AeronauticalId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          aeronautical.AeronauticalId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aeronautical.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aeronautical.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(aeronautical);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Aeronautical
        /// </summary>
        /// <returns></returns>
        public int Update(Aeronautical aeronautical)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Aeronautical] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AeronauticalId = @AeronauticalId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(aeronautical.AeronauticalId, null)) cmd.Parameters.AddWithValue("@AeronauticalId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AeronauticalId", aeronautical.AeronauticalId);
                 //TEXT
                
                if (ReferenceEquals(aeronautical.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aeronautical.Name);
                 //TEXT
                
                if (ReferenceEquals(aeronautical.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aeronautical.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Aeronautical
        /// </summary>
        /// <returns></returns>
        public int Delete(Aeronautical aeronautical)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Aeronautical] 
                                    WHERE AeronauticalId = @AeronauticalId", this.Schema);
                                    
                
                if (ReferenceEquals(aeronautical.AeronauticalId, null)) cmd.Parameters.AddWithValue("@AeronauticalId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AeronauticalId", aeronautical.AeronauticalId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Aviation aviation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Aviation] (AviationId, Name, Description)
                                    VALUES (@AviationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(aviation.AviationId, null)) cmd.Parameters.AddWithValue("@AviationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AviationId", aviation.AviationId);
                
                  
                if (ReferenceEquals(aviation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aviation.Name);
                
                  
                if (ReferenceEquals(aviation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aviation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Aviation aviation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = aviation.AviationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Aviation WHERE AviationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(aviation);
                else return this.Insert(aviation);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAviations<T>()
            where T : Aviation, new()
        {
            return this.GetAllAviations<T>(String.Empty);
        }

        
        public List<T> GetAllAviations<T>(String whereClause)
            where T : Aviation, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Aviation]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T aviation = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AviationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          aviation.AviationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aviation.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aviation.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(aviation);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Aviation
        /// </summary>
        /// <returns></returns>
        public int Update(Aviation aviation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Aviation] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AviationId = @AviationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(aviation.AviationId, null)) cmd.Parameters.AddWithValue("@AviationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AviationId", aviation.AviationId);
                 //TEXT
                
                if (ReferenceEquals(aviation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aviation.Name);
                 //TEXT
                
                if (ReferenceEquals(aviation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aviation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Aviation
        /// </summary>
        /// <returns></returns>
        public int Delete(Aviation aviation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Aviation] 
                                    WHERE AviationId = @AviationId", this.Schema);
                                    
                
                if (ReferenceEquals(aviation.AviationId, null)) cmd.Parameters.AddWithValue("@AviationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AviationId", aviation.AviationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Cable cable)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Cable] (CableId, Name, Description)
                                    VALUES (@CableId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(cable.CableId, null)) cmd.Parameters.AddWithValue("@CableId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CableId", cable.CableId);
                
                  
                if (ReferenceEquals(cable.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", cable.Name);
                
                  
                if (ReferenceEquals(cable.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", cable.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Cable cable)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = cable.CableId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Cable WHERE CableId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(cable);
                else return this.Insert(cable);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCables<T>()
            where T : Cable, new()
        {
            return this.GetAllCables<T>(String.Empty);
        }

        
        public List<T> GetAllCables<T>(String whereClause)
            where T : Cable, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Cable]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T cable = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("CableId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          cable.CableId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          cable.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          cable.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(cable);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Cable
        /// </summary>
        /// <returns></returns>
        public int Update(Cable cable)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Cable] SET 
                                    Name = @Name,Description = @Description
                                    WHERE CableId = @CableId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(cable.CableId, null)) cmd.Parameters.AddWithValue("@CableId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CableId", cable.CableId);
                 //TEXT
                
                if (ReferenceEquals(cable.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", cable.Name);
                 //TEXT
                
                if (ReferenceEquals(cable.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", cable.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Cable
        /// </summary>
        /// <returns></returns>
        public int Delete(Cable cable)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Cable] 
                                    WHERE CableId = @CableId", this.Schema);
                                    
                
                if (ReferenceEquals(cable.CableId, null)) cmd.Parameters.AddWithValue("@CableId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@CableId", cable.CableId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Farnsworth farnsworth)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Farnsworth] (FarnsworthId, Name, Description)
                                    VALUES (@FarnsworthId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(farnsworth.FarnsworthId, null)) cmd.Parameters.AddWithValue("@FarnsworthId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FarnsworthId", farnsworth.FarnsworthId);
                
                  
                if (ReferenceEquals(farnsworth.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", farnsworth.Name);
                
                  
                if (ReferenceEquals(farnsworth.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", farnsworth.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Farnsworth farnsworth)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = farnsworth.FarnsworthId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Farnsworth WHERE FarnsworthId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(farnsworth);
                else return this.Insert(farnsworth);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllFarnsworths<T>()
            where T : Farnsworth, new()
        {
            return this.GetAllFarnsworths<T>(String.Empty);
        }

        
        public List<T> GetAllFarnsworths<T>(String whereClause)
            where T : Farnsworth, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Farnsworth]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T farnsworth = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("FarnsworthId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          farnsworth.FarnsworthId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          farnsworth.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          farnsworth.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(farnsworth);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Farnsworth
        /// </summary>
        /// <returns></returns>
        public int Update(Farnsworth farnsworth)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Farnsworth] SET 
                                    Name = @Name,Description = @Description
                                    WHERE FarnsworthId = @FarnsworthId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(farnsworth.FarnsworthId, null)) cmd.Parameters.AddWithValue("@FarnsworthId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FarnsworthId", farnsworth.FarnsworthId);
                 //TEXT
                
                if (ReferenceEquals(farnsworth.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", farnsworth.Name);
                 //TEXT
                
                if (ReferenceEquals(farnsworth.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", farnsworth.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Farnsworth
        /// </summary>
        /// <returns></returns>
        public int Delete(Farnsworth farnsworth)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Farnsworth] 
                                    WHERE FarnsworthId = @FarnsworthId", this.Schema);
                                    
                
                if (ReferenceEquals(farnsworth.FarnsworthId, null)) cmd.Parameters.AddWithValue("@FarnsworthId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@FarnsworthId", farnsworth.FarnsworthId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Learning learning)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Learning] (LearningId, Name, Description)
                                    VALUES (@LearningId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(learning.LearningId, null)) cmd.Parameters.AddWithValue("@LearningId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LearningId", learning.LearningId);
                
                  
                if (ReferenceEquals(learning.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", learning.Name);
                
                  
                if (ReferenceEquals(learning.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", learning.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Learning learning)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = learning.LearningId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Learning WHERE LearningId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(learning);
                else return this.Insert(learning);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLearnings<T>()
            where T : Learning, new()
        {
            return this.GetAllLearnings<T>(String.Empty);
        }

        
        public List<T> GetAllLearnings<T>(String whereClause)
            where T : Learning, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Learning]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T learning = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LearningId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          learning.LearningId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          learning.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          learning.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(learning);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Learning
        /// </summary>
        /// <returns></returns>
        public int Update(Learning learning)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Learning] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LearningId = @LearningId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(learning.LearningId, null)) cmd.Parameters.AddWithValue("@LearningId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LearningId", learning.LearningId);
                 //TEXT
                
                if (ReferenceEquals(learning.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", learning.Name);
                 //TEXT
                
                if (ReferenceEquals(learning.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", learning.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Learning
        /// </summary>
        /// <returns></returns>
        public int Delete(Learning learning)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Learning] 
                                    WHERE LearningId = @LearningId", this.Schema);
                                    
                
                if (ReferenceEquals(learning.LearningId, null)) cmd.Parameters.AddWithValue("@LearningId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LearningId", learning.LearningId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Mnemonic mnemonic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Mnemonic] (MnemonicId, Name, Description)
                                    VALUES (@MnemonicId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(mnemonic.MnemonicId, null)) cmd.Parameters.AddWithValue("@MnemonicId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MnemonicId", mnemonic.MnemonicId);
                
                  
                if (ReferenceEquals(mnemonic.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", mnemonic.Name);
                
                  
                if (ReferenceEquals(mnemonic.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", mnemonic.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Mnemonic mnemonic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = mnemonic.MnemonicId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Mnemonic WHERE MnemonicId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(mnemonic);
                else return this.Insert(mnemonic);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllMnemonics<T>()
            where T : Mnemonic, new()
        {
            return this.GetAllMnemonics<T>(String.Empty);
        }

        
        public List<T> GetAllMnemonics<T>(String whereClause)
            where T : Mnemonic, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Mnemonic]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T mnemonic = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("MnemonicId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          mnemonic.MnemonicId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          mnemonic.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          mnemonic.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(mnemonic);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Mnemonic
        /// </summary>
        /// <returns></returns>
        public int Update(Mnemonic mnemonic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Mnemonic] SET 
                                    Name = @Name,Description = @Description
                                    WHERE MnemonicId = @MnemonicId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(mnemonic.MnemonicId, null)) cmd.Parameters.AddWithValue("@MnemonicId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MnemonicId", mnemonic.MnemonicId);
                 //TEXT
                
                if (ReferenceEquals(mnemonic.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", mnemonic.Name);
                 //TEXT
                
                if (ReferenceEquals(mnemonic.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", mnemonic.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Mnemonic
        /// </summary>
        /// <returns></returns>
        public int Delete(Mnemonic mnemonic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Mnemonic] 
                                    WHERE MnemonicId = @MnemonicId", this.Schema);
                                    
                
                if (ReferenceEquals(mnemonic.MnemonicId, null)) cmd.Parameters.AddWithValue("@MnemonicId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@MnemonicId", mnemonic.MnemonicId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Encyclopedia encyclopedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Encyclopedia] (EncyclopediaId, Name, Description)
                                    VALUES (@EncyclopediaId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(encyclopedia.EncyclopediaId, null)) cmd.Parameters.AddWithValue("@EncyclopediaId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EncyclopediaId", encyclopedia.EncyclopediaId);
                
                  
                if (ReferenceEquals(encyclopedia.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", encyclopedia.Name);
                
                  
                if (ReferenceEquals(encyclopedia.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", encyclopedia.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Encyclopedia encyclopedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = encyclopedia.EncyclopediaId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Encyclopedia WHERE EncyclopediaId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(encyclopedia);
                else return this.Insert(encyclopedia);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllEncyclopedias<T>()
            where T : Encyclopedia, new()
        {
            return this.GetAllEncyclopedias<T>(String.Empty);
        }

        
        public List<T> GetAllEncyclopedias<T>(String whereClause)
            where T : Encyclopedia, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Encyclopedia]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T encyclopedia = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("EncyclopediaId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          encyclopedia.EncyclopediaId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          encyclopedia.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          encyclopedia.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(encyclopedia);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Encyclopedia
        /// </summary>
        /// <returns></returns>
        public int Update(Encyclopedia encyclopedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Encyclopedia] SET 
                                    Name = @Name,Description = @Description
                                    WHERE EncyclopediaId = @EncyclopediaId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(encyclopedia.EncyclopediaId, null)) cmd.Parameters.AddWithValue("@EncyclopediaId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EncyclopediaId", encyclopedia.EncyclopediaId);
                 //TEXT
                
                if (ReferenceEquals(encyclopedia.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", encyclopedia.Name);
                 //TEXT
                
                if (ReferenceEquals(encyclopedia.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", encyclopedia.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Encyclopedia
        /// </summary>
        /// <returns></returns>
        public int Delete(Encyclopedia encyclopedia)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Encyclopedia] 
                                    WHERE EncyclopediaId = @EncyclopediaId", this.Schema);
                                    
                
                if (ReferenceEquals(encyclopedia.EncyclopediaId, null)) cmd.Parameters.AddWithValue("@EncyclopediaId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@EncyclopediaId", encyclopedia.EncyclopediaId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Jump jump)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Jump] (JumpId, Name, Description)
                                    VALUES (@JumpId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(jump.JumpId, null)) cmd.Parameters.AddWithValue("@JumpId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@JumpId", jump.JumpId);
                
                  
                if (ReferenceEquals(jump.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", jump.Name);
                
                  
                if (ReferenceEquals(jump.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", jump.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Jump jump)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = jump.JumpId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Jump WHERE JumpId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(jump);
                else return this.Insert(jump);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllJumps<T>()
            where T : Jump, new()
        {
            return this.GetAllJumps<T>(String.Empty);
        }

        
        public List<T> GetAllJumps<T>(String whereClause)
            where T : Jump, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Jump]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T jump = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("JumpId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          jump.JumpId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          jump.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          jump.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(jump);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Jump
        /// </summary>
        /// <returns></returns>
        public int Update(Jump jump)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Jump] SET 
                                    Name = @Name,Description = @Description
                                    WHERE JumpId = @JumpId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(jump.JumpId, null)) cmd.Parameters.AddWithValue("@JumpId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@JumpId", jump.JumpId);
                 //TEXT
                
                if (ReferenceEquals(jump.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", jump.Name);
                 //TEXT
                
                if (ReferenceEquals(jump.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", jump.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Jump
        /// </summary>
        /// <returns></returns>
        public int Delete(Jump jump)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Jump] 
                                    WHERE JumpId = @JumpId", this.Schema);
                                    
                
                if (ReferenceEquals(jump.JumpId, null)) cmd.Parameters.AddWithValue("@JumpId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@JumpId", jump.JumpId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Navigation navigation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Navigation] (NavigationId, Name, Description)
                                    VALUES (@NavigationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(navigation.NavigationId, null)) cmd.Parameters.AddWithValue("@NavigationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NavigationId", navigation.NavigationId);
                
                  
                if (ReferenceEquals(navigation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", navigation.Name);
                
                  
                if (ReferenceEquals(navigation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", navigation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Navigation navigation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = navigation.NavigationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Navigation WHERE NavigationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(navigation);
                else return this.Insert(navigation);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNavigations<T>()
            where T : Navigation, new()
        {
            return this.GetAllNavigations<T>(String.Empty);
        }

        
        public List<T> GetAllNavigations<T>(String whereClause)
            where T : Navigation, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Navigation]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T navigation = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NavigationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          navigation.NavigationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          navigation.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          navigation.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(navigation);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Navigation
        /// </summary>
        /// <returns></returns>
        public int Update(Navigation navigation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Navigation] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NavigationId = @NavigationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(navigation.NavigationId, null)) cmd.Parameters.AddWithValue("@NavigationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NavigationId", navigation.NavigationId);
                 //TEXT
                
                if (ReferenceEquals(navigation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", navigation.Name);
                 //TEXT
                
                if (ReferenceEquals(navigation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", navigation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Navigation
        /// </summary>
        /// <returns></returns>
        public int Delete(Navigation navigation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Navigation] 
                                    WHERE NavigationId = @NavigationId", this.Schema);
                                    
                
                if (ReferenceEquals(navigation.NavigationId, null)) cmd.Parameters.AddWithValue("@NavigationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NavigationId", navigation.NavigationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Head head)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Head] (HeadId, Name, Description)
                                    VALUES (@HeadId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(head.HeadId, null)) cmd.Parameters.AddWithValue("@HeadId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HeadId", head.HeadId);
                
                  
                if (ReferenceEquals(head.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", head.Name);
                
                  
                if (ReferenceEquals(head.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", head.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Head head)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = head.HeadId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Head WHERE HeadId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(head);
                else return this.Insert(head);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllHeads<T>()
            where T : Head, new()
        {
            return this.GetAllHeads<T>(String.Empty);
        }

        
        public List<T> GetAllHeads<T>(String whereClause)
            where T : Head, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Head]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T head = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("HeadId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          head.HeadId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          head.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          head.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(head);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Head
        /// </summary>
        /// <returns></returns>
        public int Update(Head head)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Head] SET 
                                    Name = @Name,Description = @Description
                                    WHERE HeadId = @HeadId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(head.HeadId, null)) cmd.Parameters.AddWithValue("@HeadId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HeadId", head.HeadId);
                 //TEXT
                
                if (ReferenceEquals(head.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", head.Name);
                 //TEXT
                
                if (ReferenceEquals(head.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", head.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Head
        /// </summary>
        /// <returns></returns>
        public int Delete(Head head)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Head] 
                                    WHERE HeadId = @HeadId", this.Schema);
                                    
                
                if (ReferenceEquals(head.HeadId, null)) cmd.Parameters.AddWithValue("@HeadId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@HeadId", head.HeadId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Search search)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Search] (SearchId, Name, Description)
                                    VALUES (@SearchId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(search.SearchId, null)) cmd.Parameters.AddWithValue("@SearchId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SearchId", search.SearchId);
                
                  
                if (ReferenceEquals(search.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", search.Name);
                
                  
                if (ReferenceEquals(search.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", search.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Search search)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = search.SearchId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Search WHERE SearchId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(search);
                else return this.Insert(search);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSearchs<T>()
            where T : Search, new()
        {
            return this.GetAllSearchs<T>(String.Empty);
        }

        
        public List<T> GetAllSearchs<T>(String whereClause)
            where T : Search, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Search]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T search = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SearchId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          search.SearchId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          search.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          search.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(search);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Search
        /// </summary>
        /// <returns></returns>
        public int Update(Search search)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Search] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SearchId = @SearchId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(search.SearchId, null)) cmd.Parameters.AddWithValue("@SearchId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SearchId", search.SearchId);
                 //TEXT
                
                if (ReferenceEquals(search.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", search.Name);
                 //TEXT
                
                if (ReferenceEquals(search.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", search.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Search
        /// </summary>
        /// <returns></returns>
        public int Delete(Search search)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Search] 
                                    WHERE SearchId = @SearchId", this.Schema);
                                    
                
                if (ReferenceEquals(search.SearchId, null)) cmd.Parameters.AddWithValue("@SearchId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SearchId", search.SearchId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng] (UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId, Name, Description)
                                    VALUES (@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId, null)) cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId);
                
                  
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Name);
                
                  
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng WHERE UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng);
                else return this.Insert(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngs<T>()
            where T : Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng, new()
        {
            return this.GetAllUploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngs<T>(String.Empty);
        }

        
        public List<T> GetAllUploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngs<T>(String whereClause)
            where T : Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng
        /// </summary>
        /// <returns></returns>
        public int Update(Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId = @UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId, null)) cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId);
                 //TEXT
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Name);
                 //TEXT
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng
        /// </summary>
        /// <returns></returns>
        public int Delete(Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng] 
                                    WHERE UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId = @UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", this.Schema);
                                    
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId, null)) cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId", uploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpng.UploadwikimediaorgwikipediacommonsthumbbbinternationalmorsecodesvgpxinternationalmorsecodesvgpngId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Fileinternationalmorsecodesvg fileinternationalmorsecodesvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Fileinternationalmorsecodesvg] (FileinternationalmorsecodesvgId, Name, Description)
                                    VALUES (@FileinternationalmorsecodesvgId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId, null)) cmd.Parameters.AddWithValue("@FileinternationalmorsecodesvgId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FileinternationalmorsecodesvgId", fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId);
                
                  
                if (ReferenceEquals(fileinternationalmorsecodesvg.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", fileinternationalmorsecodesvg.Name);
                
                  
                if (ReferenceEquals(fileinternationalmorsecodesvg.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", fileinternationalmorsecodesvg.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Fileinternationalmorsecodesvg fileinternationalmorsecodesvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Fileinternationalmorsecodesvg WHERE FileinternationalmorsecodesvgId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(fileinternationalmorsecodesvg);
                else return this.Insert(fileinternationalmorsecodesvg);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllFileinternationalmorsecodesvgs<T>()
            where T : Fileinternationalmorsecodesvg, new()
        {
            return this.GetAllFileinternationalmorsecodesvgs<T>(String.Empty);
        }

        
        public List<T> GetAllFileinternationalmorsecodesvgs<T>(String whereClause)
            where T : Fileinternationalmorsecodesvg, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Fileinternationalmorsecodesvg]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T fileinternationalmorsecodesvg = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("FileinternationalmorsecodesvgId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          fileinternationalmorsecodesvg.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          fileinternationalmorsecodesvg.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(fileinternationalmorsecodesvg);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Fileinternationalmorsecodesvg
        /// </summary>
        /// <returns></returns>
        public int Update(Fileinternationalmorsecodesvg fileinternationalmorsecodesvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Fileinternationalmorsecodesvg] SET 
                                    Name = @Name,Description = @Description
                                    WHERE FileinternationalmorsecodesvgId = @FileinternationalmorsecodesvgId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId, null)) cmd.Parameters.AddWithValue("@FileinternationalmorsecodesvgId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FileinternationalmorsecodesvgId", fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId);
                 //TEXT
                
                if (ReferenceEquals(fileinternationalmorsecodesvg.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", fileinternationalmorsecodesvg.Name);
                 //TEXT
                
                if (ReferenceEquals(fileinternationalmorsecodesvg.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", fileinternationalmorsecodesvg.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Fileinternationalmorsecodesvg
        /// </summary>
        /// <returns></returns>
        public int Delete(Fileinternationalmorsecodesvg fileinternationalmorsecodesvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Fileinternationalmorsecodesvg] 
                                    WHERE FileinternationalmorsecodesvgId = @FileinternationalmorsecodesvgId", this.Schema);
                                    
                
                if (ReferenceEquals(fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId, null)) cmd.Parameters.AddWithValue("@FileinternationalmorsecodesvgId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@FileinternationalmorsecodesvgId", fileinternationalmorsecodesvg.FileinternationalmorsecodesvgId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Chart chart)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Chart] (ChartId, Name, Description)
                                    VALUES (@ChartId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(chart.ChartId, null)) cmd.Parameters.AddWithValue("@ChartId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ChartId", chart.ChartId);
                
                  
                if (ReferenceEquals(chart.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", chart.Name);
                
                  
                if (ReferenceEquals(chart.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", chart.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Chart chart)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = chart.ChartId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Chart WHERE ChartId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(chart);
                else return this.Insert(chart);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCharts<T>()
            where T : Chart, new()
        {
            return this.GetAllCharts<T>(String.Empty);
        }

        
        public List<T> GetAllCharts<T>(String whereClause)
            where T : Chart, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Chart]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T chart = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ChartId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          chart.ChartId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          chart.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          chart.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(chart);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Chart
        /// </summary>
        /// <returns></returns>
        public int Update(Chart chart)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Chart] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ChartId = @ChartId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(chart.ChartId, null)) cmd.Parameters.AddWithValue("@ChartId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ChartId", chart.ChartId);
                 //TEXT
                
                if (ReferenceEquals(chart.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", chart.Name);
                 //TEXT
                
                if (ReferenceEquals(chart.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", chart.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Chart
        /// </summary>
        /// <returns></returns>
        public int Delete(Chart chart)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Chart] 
                                    WHERE ChartId = @ChartId", this.Schema);
                                    
                
                if (ReferenceEquals(chart.ChartId, null)) cmd.Parameters.AddWithValue("@ChartId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ChartId", chart.ChartId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Code code)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Code] (CodeId, Name, Description)
                                    VALUES (@CodeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(code.CodeId, null)) cmd.Parameters.AddWithValue("@CodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CodeId", code.CodeId);
                
                  
                if (ReferenceEquals(code.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", code.Name);
                
                  
                if (ReferenceEquals(code.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", code.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Code code)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = code.CodeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Code WHERE CodeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(code);
                else return this.Insert(code);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCodes<T>()
            where T : Code, new()
        {
            return this.GetAllCodes<T>(String.Empty);
        }

        
        public List<T> GetAllCodes<T>(String whereClause)
            where T : Code, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Code]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T code = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("CodeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          code.CodeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          code.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          code.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(code);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Code
        /// </summary>
        /// <returns></returns>
        public int Update(Code code)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Code] SET 
                                    Name = @Name,Description = @Description
                                    WHERE CodeId = @CodeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(code.CodeId, null)) cmd.Parameters.AddWithValue("@CodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CodeId", code.CodeId);
                 //TEXT
                
                if (ReferenceEquals(code.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", code.Name);
                 //TEXT
                
                if (ReferenceEquals(code.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", code.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Code
        /// </summary>
        /// <returns></returns>
        public int Delete(Code code)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Code] 
                                    WHERE CodeId = @CodeId", this.Schema);
                                    
                
                if (ReferenceEquals(code.CodeId, null)) cmd.Parameters.AddWithValue("@CodeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@CodeId", code.CodeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Itur itur)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Itur] (IturId, Name, Description)
                                    VALUES (@IturId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(itur.IturId, null)) cmd.Parameters.AddWithValue("@IturId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IturId", itur.IturId);
                
                  
                if (ReferenceEquals(itur.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", itur.Name);
                
                  
                if (ReferenceEquals(itur.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", itur.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Itur itur)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = itur.IturId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Itur WHERE IturId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(itur);
                else return this.Insert(itur);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllIturs<T>()
            where T : Itur, new()
        {
            return this.GetAllIturs<T>(String.Empty);
        }

        
        public List<T> GetAllIturs<T>(String whereClause)
            where T : Itur, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Itur]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T itur = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("IturId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          itur.IturId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          itur.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          itur.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(itur);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Itur
        /// </summary>
        /// <returns></returns>
        public int Update(Itur itur)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Itur] SET 
                                    Name = @Name,Description = @Description
                                    WHERE IturId = @IturId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(itur.IturId, null)) cmd.Parameters.AddWithValue("@IturId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IturId", itur.IturId);
                 //TEXT
                
                if (ReferenceEquals(itur.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", itur.Name);
                 //TEXT
                
                if (ReferenceEquals(itur.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", itur.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Itur
        /// </summary>
        /// <returns></returns>
        public int Delete(Itur itur)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Itur] 
                                    WHERE IturId = @IturId", this.Schema);
                                    
                
                if (ReferenceEquals(itur.IturId, null)) cmd.Parameters.AddWithValue("@IturId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@IturId", itur.IturId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Method method)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Method] (MethodId, Name, Description)
                                    VALUES (@MethodId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(method.MethodId, null)) cmd.Parameters.AddWithValue("@MethodId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MethodId", method.MethodId);
                
                  
                if (ReferenceEquals(method.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", method.Name);
                
                  
                if (ReferenceEquals(method.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", method.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Method method)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = method.MethodId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Method WHERE MethodId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(method);
                else return this.Insert(method);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllMethods<T>()
            where T : Method, new()
        {
            return this.GetAllMethods<T>(String.Empty);
        }

        
        public List<T> GetAllMethods<T>(String whereClause)
            where T : Method, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Method]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T method = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("MethodId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          method.MethodId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          method.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          method.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(method);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Method
        /// </summary>
        /// <returns></returns>
        public int Update(Method method)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Method] SET 
                                    Name = @Name,Description = @Description
                                    WHERE MethodId = @MethodId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(method.MethodId, null)) cmd.Parameters.AddWithValue("@MethodId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MethodId", method.MethodId);
                 //TEXT
                
                if (ReferenceEquals(method.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", method.Name);
                 //TEXT
                
                if (ReferenceEquals(method.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", method.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Method
        /// </summary>
        /// <returns></returns>
        public int Delete(Method method)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Method] 
                                    WHERE MethodId = @MethodId", this.Schema);
                                    
                
                if (ReferenceEquals(method.MethodId, null)) cmd.Parameters.AddWithValue("@MethodId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@MethodId", method.MethodId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Text text)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Text] (TextId, Name, Description)
                                    VALUES (@TextId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(text.TextId, null)) cmd.Parameters.AddWithValue("@TextId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TextId", text.TextId);
                
                  
                if (ReferenceEquals(text.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", text.Name);
                
                  
                if (ReferenceEquals(text.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", text.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Text text)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = text.TextId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Text WHERE TextId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(text);
                else return this.Insert(text);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTexts<T>()
            where T : Text, new()
        {
            return this.GetAllTexts<T>(String.Empty);
        }

        
        public List<T> GetAllTexts<T>(String whereClause)
            where T : Text, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Text]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T text = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TextId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          text.TextId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          text.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          text.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(text);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Text
        /// </summary>
        /// <returns></returns>
        public int Update(Text text)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Text] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TextId = @TextId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(text.TextId, null)) cmd.Parameters.AddWithValue("@TextId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TextId", text.TextId);
                 //TEXT
                
                if (ReferenceEquals(text.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", text.Name);
                 //TEXT
                
                if (ReferenceEquals(text.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", text.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Text
        /// </summary>
        /// <returns></returns>
        public int Delete(Text text)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Text] 
                                    WHERE TextId = @TextId", this.Schema);
                                    
                
                if (ReferenceEquals(text.TextId, null)) cmd.Parameters.AddWithValue("@TextId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TextId", text.TextId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Writtenlanguage writtenlanguage)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Writtenlanguage] (WrittenlanguageId, Name, Description)
                                    VALUES (@WrittenlanguageId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(writtenlanguage.WrittenlanguageId, null)) cmd.Parameters.AddWithValue("@WrittenlanguageId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@WrittenlanguageId", writtenlanguage.WrittenlanguageId);
                
                  
                if (ReferenceEquals(writtenlanguage.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", writtenlanguage.Name);
                
                  
                if (ReferenceEquals(writtenlanguage.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", writtenlanguage.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Writtenlanguage writtenlanguage)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = writtenlanguage.WrittenlanguageId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Writtenlanguage WHERE WrittenlanguageId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(writtenlanguage);
                else return this.Insert(writtenlanguage);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllWrittenlanguages<T>()
            where T : Writtenlanguage, new()
        {
            return this.GetAllWrittenlanguages<T>(String.Empty);
        }

        
        public List<T> GetAllWrittenlanguages<T>(String whereClause)
            where T : Writtenlanguage, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Writtenlanguage]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T writtenlanguage = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("WrittenlanguageId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          writtenlanguage.WrittenlanguageId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          writtenlanguage.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          writtenlanguage.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(writtenlanguage);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Writtenlanguage
        /// </summary>
        /// <returns></returns>
        public int Update(Writtenlanguage writtenlanguage)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Writtenlanguage] SET 
                                    Name = @Name,Description = @Description
                                    WHERE WrittenlanguageId = @WrittenlanguageId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(writtenlanguage.WrittenlanguageId, null)) cmd.Parameters.AddWithValue("@WrittenlanguageId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@WrittenlanguageId", writtenlanguage.WrittenlanguageId);
                 //TEXT
                
                if (ReferenceEquals(writtenlanguage.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", writtenlanguage.Name);
                 //TEXT
                
                if (ReferenceEquals(writtenlanguage.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", writtenlanguage.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Writtenlanguage
        /// </summary>
        /// <returns></returns>
        public int Delete(Writtenlanguage writtenlanguage)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Writtenlanguage] 
                                    WHERE WrittenlanguageId = @WrittenlanguageId", this.Schema);
                                    
                
                if (ReferenceEquals(writtenlanguage.WrittenlanguageId, null)) cmd.Parameters.AddWithValue("@WrittenlanguageId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@WrittenlanguageId", writtenlanguage.WrittenlanguageId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Information information)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Information] (InformationId, Name, Description)
                                    VALUES (@InformationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(information.InformationId, null)) cmd.Parameters.AddWithValue("@InformationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InformationId", information.InformationId);
                
                  
                if (ReferenceEquals(information.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", information.Name);
                
                  
                if (ReferenceEquals(information.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", information.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Information information)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = information.InformationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Information WHERE InformationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(information);
                else return this.Insert(information);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllInformations<T>()
            where T : Information, new()
        {
            return this.GetAllInformations<T>(String.Empty);
        }

        
        public List<T> GetAllInformations<T>(String whereClause)
            where T : Information, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Information]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T information = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("InformationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          information.InformationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          information.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          information.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(information);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Information
        /// </summary>
        /// <returns></returns>
        public int Update(Information information)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Information] SET 
                                    Name = @Name,Description = @Description
                                    WHERE InformationId = @InformationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(information.InformationId, null)) cmd.Parameters.AddWithValue("@InformationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InformationId", information.InformationId);
                 //TEXT
                
                if (ReferenceEquals(information.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", information.Name);
                 //TEXT
                
                if (ReferenceEquals(information.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", information.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Information
        /// </summary>
        /// <returns></returns>
        public int Delete(Information information)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Information] 
                                    WHERE InformationId = @InformationId", this.Schema);
                                    
                
                if (ReferenceEquals(information.InformationId, null)) cmd.Parameters.AddWithValue("@InformationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@InformationId", information.InformationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Series series)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Series] (SeriesId, Name, Description)
                                    VALUES (@SeriesId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(series.SeriesId, null)) cmd.Parameters.AddWithValue("@SeriesId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SeriesId", series.SeriesId);
                
                  
                if (ReferenceEquals(series.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", series.Name);
                
                  
                if (ReferenceEquals(series.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", series.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Series series)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = series.SeriesId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Series WHERE SeriesId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(series);
                else return this.Insert(series);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSerieses<T>()
            where T : Series, new()
        {
            return this.GetAllSerieses<T>(String.Empty);
        }

        
        public List<T> GetAllSerieses<T>(String whereClause)
            where T : Series, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Series]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T series = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SeriesId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          series.SeriesId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          series.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          series.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(series);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Series
        /// </summary>
        /// <returns></returns>
        public int Update(Series series)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Series] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SeriesId = @SeriesId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(series.SeriesId, null)) cmd.Parameters.AddWithValue("@SeriesId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SeriesId", series.SeriesId);
                 //TEXT
                
                if (ReferenceEquals(series.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", series.Name);
                 //TEXT
                
                if (ReferenceEquals(series.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", series.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Series
        /// </summary>
        /// <returns></returns>
        public int Delete(Series series)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Series] 
                                    WHERE SeriesId = @SeriesId", this.Schema);
                                    
                
                if (ReferenceEquals(series.SeriesId, null)) cmd.Parameters.AddWithValue("@SeriesId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SeriesId", series.SeriesId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Listener listener)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Listener] (ListenerId, Name, Description)
                                    VALUES (@ListenerId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(listener.ListenerId, null)) cmd.Parameters.AddWithValue("@ListenerId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ListenerId", listener.ListenerId);
                
                  
                if (ReferenceEquals(listener.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", listener.Name);
                
                  
                if (ReferenceEquals(listener.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", listener.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Listener listener)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = listener.ListenerId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Listener WHERE ListenerId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(listener);
                else return this.Insert(listener);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllListeners<T>()
            where T : Listener, new()
        {
            return this.GetAllListeners<T>(String.Empty);
        }

        
        public List<T> GetAllListeners<T>(String whereClause)
            where T : Listener, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Listener]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T listener = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ListenerId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          listener.ListenerId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          listener.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          listener.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(listener);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Listener
        /// </summary>
        /// <returns></returns>
        public int Update(Listener listener)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Listener] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ListenerId = @ListenerId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(listener.ListenerId, null)) cmd.Parameters.AddWithValue("@ListenerId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ListenerId", listener.ListenerId);
                 //TEXT
                
                if (ReferenceEquals(listener.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", listener.Name);
                 //TEXT
                
                if (ReferenceEquals(listener.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", listener.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Listener
        /// </summary>
        /// <returns></returns>
        public int Delete(Listener listener)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Listener] 
                                    WHERE ListenerId = @ListenerId", this.Schema);
                                    
                
                if (ReferenceEquals(listener.ListenerId, null)) cmd.Parameters.AddWithValue("@ListenerId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ListenerId", listener.ListenerId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Observer observer)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Observer] (ObserverId, Name, Description)
                                    VALUES (@ObserverId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(observer.ObserverId, null)) cmd.Parameters.AddWithValue("@ObserverId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ObserverId", observer.ObserverId);
                
                  
                if (ReferenceEquals(observer.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", observer.Name);
                
                  
                if (ReferenceEquals(observer.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", observer.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Observer observer)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = observer.ObserverId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Observer WHERE ObserverId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(observer);
                else return this.Insert(observer);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllObservers<T>()
            where T : Observer, new()
        {
            return this.GetAllObservers<T>(String.Empty);
        }

        
        public List<T> GetAllObservers<T>(String whereClause)
            where T : Observer, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Observer]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T observer = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ObserverId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          observer.ObserverId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          observer.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          observer.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(observer);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Observer
        /// </summary>
        /// <returns></returns>
        public int Update(Observer observer)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Observer] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ObserverId = @ObserverId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(observer.ObserverId, null)) cmd.Parameters.AddWithValue("@ObserverId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ObserverId", observer.ObserverId);
                 //TEXT
                
                if (ReferenceEquals(observer.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", observer.Name);
                 //TEXT
                
                if (ReferenceEquals(observer.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", observer.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Observer
        /// </summary>
        /// <returns></returns>
        public int Delete(Observer observer)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Observer] 
                                    WHERE ObserverId = @ObserverId", this.Schema);
                                    
                
                if (ReferenceEquals(observer.ObserverId, null)) cmd.Parameters.AddWithValue("@ObserverId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ObserverId", observer.ObserverId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Equipment equipment)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Equipment] (EquipmentId, Name, Description)
                                    VALUES (@EquipmentId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(equipment.EquipmentId, null)) cmd.Parameters.AddWithValue("@EquipmentId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EquipmentId", equipment.EquipmentId);
                
                  
                if (ReferenceEquals(equipment.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", equipment.Name);
                
                  
                if (ReferenceEquals(equipment.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", equipment.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Equipment equipment)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = equipment.EquipmentId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Equipment WHERE EquipmentId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(equipment);
                else return this.Insert(equipment);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllEquipments<T>()
            where T : Equipment, new()
        {
            return this.GetAllEquipments<T>(String.Empty);
        }

        
        public List<T> GetAllEquipments<T>(String whereClause)
            where T : Equipment, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Equipment]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T equipment = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("EquipmentId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          equipment.EquipmentId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          equipment.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          equipment.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(equipment);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Equipment
        /// </summary>
        /// <returns></returns>
        public int Update(Equipment equipment)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Equipment] SET 
                                    Name = @Name,Description = @Description
                                    WHERE EquipmentId = @EquipmentId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(equipment.EquipmentId, null)) cmd.Parameters.AddWithValue("@EquipmentId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EquipmentId", equipment.EquipmentId);
                 //TEXT
                
                if (ReferenceEquals(equipment.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", equipment.Name);
                 //TEXT
                
                if (ReferenceEquals(equipment.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", equipment.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Equipment
        /// </summary>
        /// <returns></returns>
        public int Delete(Equipment equipment)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Equipment] 
                                    WHERE EquipmentId = @EquipmentId", this.Schema);
                                    
                
                if (ReferenceEquals(equipment.EquipmentId, null)) cmd.Parameters.AddWithValue("@EquipmentId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@EquipmentId", equipment.EquipmentId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Inventor inventor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Inventor] (InventorId, Name, Description)
                                    VALUES (@InventorId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(inventor.InventorId, null)) cmd.Parameters.AddWithValue("@InventorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InventorId", inventor.InventorId);
                
                  
                if (ReferenceEquals(inventor.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", inventor.Name);
                
                  
                if (ReferenceEquals(inventor.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", inventor.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Inventor inventor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = inventor.InventorId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Inventor WHERE InventorId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(inventor);
                else return this.Insert(inventor);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllInventors<T>()
            where T : Inventor, new()
        {
            return this.GetAllInventors<T>(String.Empty);
        }

        
        public List<T> GetAllInventors<T>(String whereClause)
            where T : Inventor, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Inventor]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T inventor = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("InventorId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          inventor.InventorId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          inventor.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          inventor.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(inventor);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Inventor
        /// </summary>
        /// <returns></returns>
        public int Update(Inventor inventor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Inventor] SET 
                                    Name = @Name,Description = @Description
                                    WHERE InventorId = @InventorId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(inventor.InventorId, null)) cmd.Parameters.AddWithValue("@InventorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InventorId", inventor.InventorId);
                 //TEXT
                
                if (ReferenceEquals(inventor.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", inventor.Name);
                 //TEXT
                
                if (ReferenceEquals(inventor.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", inventor.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Inventor
        /// </summary>
        /// <returns></returns>
        public int Delete(Inventor inventor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Inventor] 
                                    WHERE InventorId = @InventorId", this.Schema);
                                    
                
                if (ReferenceEquals(inventor.InventorId, null)) cmd.Parameters.AddWithValue("@InventorId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@InventorId", inventor.InventorId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Telegraph telegraph)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Telegraph] (TelegraphId, Name, Description)
                                    VALUES (@TelegraphId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(telegraph.TelegraphId, null)) cmd.Parameters.AddWithValue("@TelegraphId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TelegraphId", telegraph.TelegraphId);
                
                  
                if (ReferenceEquals(telegraph.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", telegraph.Name);
                
                  
                if (ReferenceEquals(telegraph.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", telegraph.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Telegraph telegraph)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = telegraph.TelegraphId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Telegraph WHERE TelegraphId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(telegraph);
                else return this.Insert(telegraph);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTelegraphs<T>()
            where T : Telegraph, new()
        {
            return this.GetAllTelegraphs<T>(String.Empty);
        }

        
        public List<T> GetAllTelegraphs<T>(String whereClause)
            where T : Telegraph, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Telegraph]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T telegraph = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TelegraphId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          telegraph.TelegraphId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          telegraph.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          telegraph.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(telegraph);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Telegraph
        /// </summary>
        /// <returns></returns>
        public int Update(Telegraph telegraph)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Telegraph] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TelegraphId = @TelegraphId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(telegraph.TelegraphId, null)) cmd.Parameters.AddWithValue("@TelegraphId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TelegraphId", telegraph.TelegraphId);
                 //TEXT
                
                if (ReferenceEquals(telegraph.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", telegraph.Name);
                 //TEXT
                
                if (ReferenceEquals(telegraph.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", telegraph.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Telegraph
        /// </summary>
        /// <returns></returns>
        public int Delete(Telegraph telegraph)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Telegraph] 
                                    WHERE TelegraphId = @TelegraphId", this.Schema);
                                    
                
                if (ReferenceEquals(telegraph.TelegraphId, null)) cmd.Parameters.AddWithValue("@TelegraphId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TelegraphId", telegraph.TelegraphId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Iso iso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Iso] (IsoId, Name, Description)
                                    VALUES (@IsoId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(iso.IsoId, null)) cmd.Parameters.AddWithValue("@IsoId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IsoId", iso.IsoId);
                
                  
                if (ReferenceEquals(iso.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", iso.Name);
                
                  
                if (ReferenceEquals(iso.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", iso.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Iso iso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = iso.IsoId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Iso WHERE IsoId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(iso);
                else return this.Insert(iso);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllIsos<T>()
            where T : Iso, new()
        {
            return this.GetAllIsos<T>(String.Empty);
        }

        
        public List<T> GetAllIsos<T>(String whereClause)
            where T : Iso, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Iso]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T iso = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("IsoId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          iso.IsoId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          iso.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          iso.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(iso);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Iso
        /// </summary>
        /// <returns></returns>
        public int Update(Iso iso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Iso] SET 
                                    Name = @Name,Description = @Description
                                    WHERE IsoId = @IsoId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(iso.IsoId, null)) cmd.Parameters.AddWithValue("@IsoId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IsoId", iso.IsoId);
                 //TEXT
                
                if (ReferenceEquals(iso.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", iso.Name);
                 //TEXT
                
                if (ReferenceEquals(iso.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", iso.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Iso
        /// </summary>
        /// <returns></returns>
        public int Delete(Iso iso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Iso] 
                                    WHERE IsoId = @IsoId", this.Schema);
                                    
                
                if (ReferenceEquals(iso.IsoId, null)) cmd.Parameters.AddWithValue("@IsoId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@IsoId", iso.IsoId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Alphabet alphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Alphabet] (AlphabetId, Name, Description)
                                    VALUES (@AlphabetId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(alphabet.AlphabetId, null)) cmd.Parameters.AddWithValue("@AlphabetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AlphabetId", alphabet.AlphabetId);
                
                  
                if (ReferenceEquals(alphabet.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", alphabet.Name);
                
                  
                if (ReferenceEquals(alphabet.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", alphabet.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Alphabet alphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = alphabet.AlphabetId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Alphabet WHERE AlphabetId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(alphabet);
                else return this.Insert(alphabet);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAlphabets<T>()
            where T : Alphabet, new()
        {
            return this.GetAllAlphabets<T>(String.Empty);
        }

        
        public List<T> GetAllAlphabets<T>(String whereClause)
            where T : Alphabet, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Alphabet]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T alphabet = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AlphabetId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          alphabet.AlphabetId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          alphabet.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          alphabet.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(alphabet);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Alphabet
        /// </summary>
        /// <returns></returns>
        public int Update(Alphabet alphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Alphabet] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AlphabetId = @AlphabetId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(alphabet.AlphabetId, null)) cmd.Parameters.AddWithValue("@AlphabetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AlphabetId", alphabet.AlphabetId);
                 //TEXT
                
                if (ReferenceEquals(alphabet.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", alphabet.Name);
                 //TEXT
                
                if (ReferenceEquals(alphabet.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", alphabet.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Alphabet
        /// </summary>
        /// <returns></returns>
        public int Delete(Alphabet alphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Alphabet] 
                                    WHERE AlphabetId = @AlphabetId", this.Schema);
                                    
                
                if (ReferenceEquals(alphabet.AlphabetId, null)) cmd.Parameters.AddWithValue("@AlphabetId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AlphabetId", alphabet.AlphabetId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Isobasiclatinalphabet isobasiclatinalphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Isobasiclatinalphabet] (IsobasiclatinalphabetId, Name, Description)
                                    VALUES (@IsobasiclatinalphabetId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(isobasiclatinalphabet.IsobasiclatinalphabetId, null)) cmd.Parameters.AddWithValue("@IsobasiclatinalphabetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IsobasiclatinalphabetId", isobasiclatinalphabet.IsobasiclatinalphabetId);
                
                  
                if (ReferenceEquals(isobasiclatinalphabet.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", isobasiclatinalphabet.Name);
                
                  
                if (ReferenceEquals(isobasiclatinalphabet.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", isobasiclatinalphabet.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Isobasiclatinalphabet isobasiclatinalphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = isobasiclatinalphabet.IsobasiclatinalphabetId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Isobasiclatinalphabet WHERE IsobasiclatinalphabetId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(isobasiclatinalphabet);
                else return this.Insert(isobasiclatinalphabet);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllIsobasiclatinalphabets<T>()
            where T : Isobasiclatinalphabet, new()
        {
            return this.GetAllIsobasiclatinalphabets<T>(String.Empty);
        }

        
        public List<T> GetAllIsobasiclatinalphabets<T>(String whereClause)
            where T : Isobasiclatinalphabet, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Isobasiclatinalphabet]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T isobasiclatinalphabet = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("IsobasiclatinalphabetId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          isobasiclatinalphabet.IsobasiclatinalphabetId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          isobasiclatinalphabet.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          isobasiclatinalphabet.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(isobasiclatinalphabet);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Isobasiclatinalphabet
        /// </summary>
        /// <returns></returns>
        public int Update(Isobasiclatinalphabet isobasiclatinalphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Isobasiclatinalphabet] SET 
                                    Name = @Name,Description = @Description
                                    WHERE IsobasiclatinalphabetId = @IsobasiclatinalphabetId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(isobasiclatinalphabet.IsobasiclatinalphabetId, null)) cmd.Parameters.AddWithValue("@IsobasiclatinalphabetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IsobasiclatinalphabetId", isobasiclatinalphabet.IsobasiclatinalphabetId);
                 //TEXT
                
                if (ReferenceEquals(isobasiclatinalphabet.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", isobasiclatinalphabet.Name);
                 //TEXT
                
                if (ReferenceEquals(isobasiclatinalphabet.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", isobasiclatinalphabet.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Isobasiclatinalphabet
        /// </summary>
        /// <returns></returns>
        public int Delete(Isobasiclatinalphabet isobasiclatinalphabet)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Isobasiclatinalphabet] 
                                    WHERE IsobasiclatinalphabetId = @IsobasiclatinalphabetId", this.Schema);
                                    
                
                if (ReferenceEquals(isobasiclatinalphabet.IsobasiclatinalphabetId, null)) cmd.Parameters.AddWithValue("@IsobasiclatinalphabetId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@IsobasiclatinalphabetId", isobasiclatinalphabet.IsobasiclatinalphabetId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Arabicnumeral arabicnumeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Arabicnumeral] (ArabicnumeralId, Name, Description)
                                    VALUES (@ArabicnumeralId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(arabicnumeral.ArabicnumeralId, null)) cmd.Parameters.AddWithValue("@ArabicnumeralId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ArabicnumeralId", arabicnumeral.ArabicnumeralId);
                
                  
                if (ReferenceEquals(arabicnumeral.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", arabicnumeral.Name);
                
                  
                if (ReferenceEquals(arabicnumeral.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", arabicnumeral.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Arabicnumeral arabicnumeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = arabicnumeral.ArabicnumeralId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Arabicnumeral WHERE ArabicnumeralId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(arabicnumeral);
                else return this.Insert(arabicnumeral);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllArabicnumerals<T>()
            where T : Arabicnumeral, new()
        {
            return this.GetAllArabicnumerals<T>(String.Empty);
        }

        
        public List<T> GetAllArabicnumerals<T>(String whereClause)
            where T : Arabicnumeral, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Arabicnumeral]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T arabicnumeral = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ArabicnumeralId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          arabicnumeral.ArabicnumeralId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          arabicnumeral.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          arabicnumeral.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(arabicnumeral);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Arabicnumeral
        /// </summary>
        /// <returns></returns>
        public int Update(Arabicnumeral arabicnumeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Arabicnumeral] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ArabicnumeralId = @ArabicnumeralId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(arabicnumeral.ArabicnumeralId, null)) cmd.Parameters.AddWithValue("@ArabicnumeralId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ArabicnumeralId", arabicnumeral.ArabicnumeralId);
                 //TEXT
                
                if (ReferenceEquals(arabicnumeral.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", arabicnumeral.Name);
                 //TEXT
                
                if (ReferenceEquals(arabicnumeral.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", arabicnumeral.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Arabicnumeral
        /// </summary>
        /// <returns></returns>
        public int Delete(Arabicnumeral arabicnumeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Arabicnumeral] 
                                    WHERE ArabicnumeralId = @ArabicnumeralId", this.Schema);
                                    
                
                if (ReferenceEquals(arabicnumeral.ArabicnumeralId, null)) cmd.Parameters.AddWithValue("@ArabicnumeralId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ArabicnumeralId", arabicnumeral.ArabicnumeralId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Set set)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Set] (SetId, Name, Description)
                                    VALUES (@SetId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(set.SetId, null)) cmd.Parameters.AddWithValue("@SetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SetId", set.SetId);
                
                  
                if (ReferenceEquals(set.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", set.Name);
                
                  
                if (ReferenceEquals(set.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", set.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Set set)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = set.SetId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Set WHERE SetId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(set);
                else return this.Insert(set);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSets<T>()
            where T : Set, new()
        {
            return this.GetAllSets<T>(String.Empty);
        }

        
        public List<T> GetAllSets<T>(String whereClause)
            where T : Set, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Set]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T set = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SetId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          set.SetId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          set.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          set.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(set);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Set
        /// </summary>
        /// <returns></returns>
        public int Update(Set set)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Set] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SetId = @SetId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(set.SetId, null)) cmd.Parameters.AddWithValue("@SetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SetId", set.SetId);
                 //TEXT
                
                if (ReferenceEquals(set.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", set.Name);
                 //TEXT
                
                if (ReferenceEquals(set.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", set.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Set
        /// </summary>
        /// <returns></returns>
        public int Delete(Set set)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Set] 
                                    WHERE SetId = @SetId", this.Schema);
                                    
                
                if (ReferenceEquals(set.SetId, null)) cmd.Parameters.AddWithValue("@SetId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SetId", set.SetId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Punctuation punctuation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Punctuation] (PunctuationId, Name, Description)
                                    VALUES (@PunctuationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(punctuation.PunctuationId, null)) cmd.Parameters.AddWithValue("@PunctuationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@PunctuationId", punctuation.PunctuationId);
                
                  
                if (ReferenceEquals(punctuation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", punctuation.Name);
                
                  
                if (ReferenceEquals(punctuation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", punctuation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Punctuation punctuation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = punctuation.PunctuationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Punctuation WHERE PunctuationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(punctuation);
                else return this.Insert(punctuation);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllPunctuations<T>()
            where T : Punctuation, new()
        {
            return this.GetAllPunctuations<T>(String.Empty);
        }

        
        public List<T> GetAllPunctuations<T>(String whereClause)
            where T : Punctuation, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Punctuation]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T punctuation = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("PunctuationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          punctuation.PunctuationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          punctuation.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          punctuation.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(punctuation);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Punctuation
        /// </summary>
        /// <returns></returns>
        public int Update(Punctuation punctuation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Punctuation] SET 
                                    Name = @Name,Description = @Description
                                    WHERE PunctuationId = @PunctuationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(punctuation.PunctuationId, null)) cmd.Parameters.AddWithValue("@PunctuationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@PunctuationId", punctuation.PunctuationId);
                 //TEXT
                
                if (ReferenceEquals(punctuation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", punctuation.Name);
                 //TEXT
                
                if (ReferenceEquals(punctuation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", punctuation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Punctuation
        /// </summary>
        /// <returns></returns>
        public int Delete(Punctuation punctuation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Punctuation] 
                                    WHERE PunctuationId = @PunctuationId", this.Schema);
                                    
                
                if (ReferenceEquals(punctuation.PunctuationId, null)) cmd.Parameters.AddWithValue("@PunctuationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@PunctuationId", punctuation.PunctuationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Prosignsformorsecode prosignsformorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Prosignsformorsecode] (ProsignsformorsecodeId, Name, Description)
                                    VALUES (@ProsignsformorsecodeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(prosignsformorsecode.ProsignsformorsecodeId, null)) cmd.Parameters.AddWithValue("@ProsignsformorsecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProsignsformorsecodeId", prosignsformorsecode.ProsignsformorsecodeId);
                
                  
                if (ReferenceEquals(prosignsformorsecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", prosignsformorsecode.Name);
                
                  
                if (ReferenceEquals(prosignsformorsecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", prosignsformorsecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Prosignsformorsecode prosignsformorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = prosignsformorsecode.ProsignsformorsecodeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Prosignsformorsecode WHERE ProsignsformorsecodeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(prosignsformorsecode);
                else return this.Insert(prosignsformorsecode);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllProsignsformorsecodes<T>()
            where T : Prosignsformorsecode, new()
        {
            return this.GetAllProsignsformorsecodes<T>(String.Empty);
        }

        
        public List<T> GetAllProsignsformorsecodes<T>(String whereClause)
            where T : Prosignsformorsecode, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Prosignsformorsecode]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T prosignsformorsecode = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ProsignsformorsecodeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          prosignsformorsecode.ProsignsformorsecodeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          prosignsformorsecode.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          prosignsformorsecode.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(prosignsformorsecode);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Prosignsformorsecode
        /// </summary>
        /// <returns></returns>
        public int Update(Prosignsformorsecode prosignsformorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Prosignsformorsecode] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ProsignsformorsecodeId = @ProsignsformorsecodeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(prosignsformorsecode.ProsignsformorsecodeId, null)) cmd.Parameters.AddWithValue("@ProsignsformorsecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProsignsformorsecodeId", prosignsformorsecode.ProsignsformorsecodeId);
                 //TEXT
                
                if (ReferenceEquals(prosignsformorsecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", prosignsformorsecode.Name);
                 //TEXT
                
                if (ReferenceEquals(prosignsformorsecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", prosignsformorsecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Prosignsformorsecode
        /// </summary>
        /// <returns></returns>
        public int Delete(Prosignsformorsecode prosignsformorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Prosignsformorsecode] 
                                    WHERE ProsignsformorsecodeId = @ProsignsformorsecodeId", this.Schema);
                                    
                
                if (ReferenceEquals(prosignsformorsecode.ProsignsformorsecodeId, null)) cmd.Parameters.AddWithValue("@ProsignsformorsecodeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ProsignsformorsecodeId", prosignsformorsecode.ProsignsformorsecodeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Radio radio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Radio] (RadioId, Name, Description)
                                    VALUES (@RadioId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(radio.RadioId, null)) cmd.Parameters.AddWithValue("@RadioId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RadioId", radio.RadioId);
                
                  
                if (ReferenceEquals(radio.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", radio.Name);
                
                  
                if (ReferenceEquals(radio.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", radio.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Radio radio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = radio.RadioId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Radio WHERE RadioId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(radio);
                else return this.Insert(radio);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllRadios<T>()
            where T : Radio, new()
        {
            return this.GetAllRadios<T>(String.Empty);
        }

        
        public List<T> GetAllRadios<T>(String whereClause)
            where T : Radio, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Radio]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T radio = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("RadioId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          radio.RadioId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          radio.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          radio.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(radio);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Radio
        /// </summary>
        /// <returns></returns>
        public int Update(Radio radio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Radio] SET 
                                    Name = @Name,Description = @Description
                                    WHERE RadioId = @RadioId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(radio.RadioId, null)) cmd.Parameters.AddWithValue("@RadioId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RadioId", radio.RadioId);
                 //TEXT
                
                if (ReferenceEquals(radio.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", radio.Name);
                 //TEXT
                
                if (ReferenceEquals(radio.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", radio.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Radio
        /// </summary>
        /// <returns></returns>
        public int Delete(Radio radio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Radio] 
                                    WHERE RadioId = @RadioId", this.Schema);
                                    
                
                if (ReferenceEquals(radio.RadioId, null)) cmd.Parameters.AddWithValue("@RadioId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@RadioId", radio.RadioId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Amateurradio amateurradio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Amateurradio] (AmateurradioId, Name, Description)
                                    VALUES (@AmateurradioId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(amateurradio.AmateurradioId, null)) cmd.Parameters.AddWithValue("@AmateurradioId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradioId", amateurradio.AmateurradioId);
                
                  
                if (ReferenceEquals(amateurradio.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradio.Name);
                
                  
                if (ReferenceEquals(amateurradio.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradio.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Amateurradio amateurradio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = amateurradio.AmateurradioId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Amateurradio WHERE AmateurradioId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(amateurradio);
                else return this.Insert(amateurradio);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAmateurradios<T>()
            where T : Amateurradio, new()
        {
            return this.GetAllAmateurradios<T>(String.Empty);
        }

        
        public List<T> GetAllAmateurradios<T>(String whereClause)
            where T : Amateurradio, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Amateurradio]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T amateurradio = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AmateurradioId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          amateurradio.AmateurradioId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradio.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradio.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(amateurradio);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Amateurradio
        /// </summary>
        /// <returns></returns>
        public int Update(Amateurradio amateurradio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Amateurradio] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AmateurradioId = @AmateurradioId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(amateurradio.AmateurradioId, null)) cmd.Parameters.AddWithValue("@AmateurradioId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradioId", amateurradio.AmateurradioId);
                 //TEXT
                
                if (ReferenceEquals(amateurradio.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradio.Name);
                 //TEXT
                
                if (ReferenceEquals(amateurradio.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradio.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Amateurradio
        /// </summary>
        /// <returns></returns>
        public int Delete(Amateurradio amateurradio)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Amateurradio] 
                                    WHERE AmateurradioId = @AmateurradioId", this.Schema);
                                    
                
                if (ReferenceEquals(amateurradio.AmateurradioId, null)) cmd.Parameters.AddWithValue("@AmateurradioId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AmateurradioId", amateurradio.AmateurradioId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Practice practice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Practice] (PracticeId, Name, Description)
                                    VALUES (@PracticeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(practice.PracticeId, null)) cmd.Parameters.AddWithValue("@PracticeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@PracticeId", practice.PracticeId);
                
                  
                if (ReferenceEquals(practice.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", practice.Name);
                
                  
                if (ReferenceEquals(practice.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", practice.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Practice practice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = practice.PracticeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Practice WHERE PracticeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(practice);
                else return this.Insert(practice);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllPractices<T>()
            where T : Practice, new()
        {
            return this.GetAllPractices<T>(String.Empty);
        }

        
        public List<T> GetAllPractices<T>(String whereClause)
            where T : Practice, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Practice]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T practice = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("PracticeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          practice.PracticeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          practice.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          practice.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(practice);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Practice
        /// </summary>
        /// <returns></returns>
        public int Update(Practice practice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Practice] SET 
                                    Name = @Name,Description = @Description
                                    WHERE PracticeId = @PracticeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(practice.PracticeId, null)) cmd.Parameters.AddWithValue("@PracticeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@PracticeId", practice.PracticeId);
                 //TEXT
                
                if (ReferenceEquals(practice.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", practice.Name);
                 //TEXT
                
                if (ReferenceEquals(practice.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", practice.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Practice
        /// </summary>
        /// <returns></returns>
        public int Delete(Practice practice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Practice] 
                                    WHERE PracticeId = @PracticeId", this.Schema);
                                    
                
                if (ReferenceEquals(practice.PracticeId, null)) cmd.Parameters.AddWithValue("@PracticeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@PracticeId", practice.PracticeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Symbol symbol)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Symbol] (SymbolId, Name, Description)
                                    VALUES (@SymbolId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(symbol.SymbolId, null)) cmd.Parameters.AddWithValue("@SymbolId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SymbolId", symbol.SymbolId);
                
                  
                if (ReferenceEquals(symbol.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", symbol.Name);
                
                  
                if (ReferenceEquals(symbol.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", symbol.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Symbol symbol)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = symbol.SymbolId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Symbol WHERE SymbolId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(symbol);
                else return this.Insert(symbol);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSymbols<T>()
            where T : Symbol, new()
        {
            return this.GetAllSymbols<T>(String.Empty);
        }

        
        public List<T> GetAllSymbols<T>(String whereClause)
            where T : Symbol, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Symbol]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T symbol = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SymbolId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          symbol.SymbolId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          symbol.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          symbol.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(symbol);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Symbol
        /// </summary>
        /// <returns></returns>
        public int Update(Symbol symbol)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Symbol] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SymbolId = @SymbolId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(symbol.SymbolId, null)) cmd.Parameters.AddWithValue("@SymbolId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SymbolId", symbol.SymbolId);
                 //TEXT
                
                if (ReferenceEquals(symbol.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", symbol.Name);
                 //TEXT
                
                if (ReferenceEquals(symbol.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", symbol.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Symbol
        /// </summary>
        /// <returns></returns>
        public int Delete(Symbol symbol)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Symbol] 
                                    WHERE SymbolId = @SymbolId", this.Schema);
                                    
                
                if (ReferenceEquals(symbol.SymbolId, null)) cmd.Parameters.AddWithValue("@SymbolId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SymbolId", symbol.SymbolId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Character character)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Character] (CharacterId, Name, Description)
                                    VALUES (@CharacterId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(character.CharacterId, null)) cmd.Parameters.AddWithValue("@CharacterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CharacterId", character.CharacterId);
                
                  
                if (ReferenceEquals(character.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", character.Name);
                
                  
                if (ReferenceEquals(character.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", character.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Character character)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = character.CharacterId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Character WHERE CharacterId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(character);
                else return this.Insert(character);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCharacters<T>()
            where T : Character, new()
        {
            return this.GetAllCharacters<T>(String.Empty);
        }

        
        public List<T> GetAllCharacters<T>(String whereClause)
            where T : Character, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Character]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T character = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("CharacterId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          character.CharacterId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          character.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          character.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(character);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Character
        /// </summary>
        /// <returns></returns>
        public int Update(Character character)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Character] SET 
                                    Name = @Name,Description = @Description
                                    WHERE CharacterId = @CharacterId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(character.CharacterId, null)) cmd.Parameters.AddWithValue("@CharacterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CharacterId", character.CharacterId);
                 //TEXT
                
                if (ReferenceEquals(character.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", character.Name);
                 //TEXT
                
                if (ReferenceEquals(character.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", character.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Character
        /// </summary>
        /// <returns></returns>
        public int Delete(Character character)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Character] 
                                    WHERE CharacterId = @CharacterId", this.Schema);
                                    
                
                if (ReferenceEquals(character.CharacterId, null)) cmd.Parameters.AddWithValue("@CharacterId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@CharacterId", character.CharacterId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Duration duration)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Duration] (DurationId, Name, Description)
                                    VALUES (@DurationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(duration.DurationId, null)) cmd.Parameters.AddWithValue("@DurationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DurationId", duration.DurationId);
                
                  
                if (ReferenceEquals(duration.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", duration.Name);
                
                  
                if (ReferenceEquals(duration.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", duration.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Duration duration)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = duration.DurationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Duration WHERE DurationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(duration);
                else return this.Insert(duration);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDurations<T>()
            where T : Duration, new()
        {
            return this.GetAllDurations<T>(String.Empty);
        }

        
        public List<T> GetAllDurations<T>(String whereClause)
            where T : Duration, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Duration]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T duration = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DurationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          duration.DurationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          duration.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          duration.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(duration);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Duration
        /// </summary>
        /// <returns></returns>
        public int Update(Duration duration)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Duration] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DurationId = @DurationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(duration.DurationId, null)) cmd.Parameters.AddWithValue("@DurationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DurationId", duration.DurationId);
                 //TEXT
                
                if (ReferenceEquals(duration.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", duration.Name);
                 //TEXT
                
                if (ReferenceEquals(duration.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", duration.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Duration
        /// </summary>
        /// <returns></returns>
        public int Delete(Duration duration)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Duration] 
                                    WHERE DurationId = @DurationId", this.Schema);
                                    
                
                if (ReferenceEquals(duration.DurationId, null)) cmd.Parameters.AddWithValue("@DurationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DurationId", duration.DurationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Unit unit)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Unit] (UnitId, Name, Description)
                                    VALUES (@UnitId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(unit.UnitId, null)) cmd.Parameters.AddWithValue("@UnitId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UnitId", unit.UnitId);
                
                  
                if (ReferenceEquals(unit.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", unit.Name);
                
                  
                if (ReferenceEquals(unit.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", unit.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Unit unit)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = unit.UnitId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Unit WHERE UnitId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(unit);
                else return this.Insert(unit);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUnits<T>()
            where T : Unit, new()
        {
            return this.GetAllUnits<T>(String.Empty);
        }

        
        public List<T> GetAllUnits<T>(String whereClause)
            where T : Unit, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Unit]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T unit = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UnitId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          unit.UnitId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          unit.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          unit.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(unit);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Unit
        /// </summary>
        /// <returns></returns>
        public int Update(Unit unit)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Unit] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UnitId = @UnitId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(unit.UnitId, null)) cmd.Parameters.AddWithValue("@UnitId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UnitId", unit.UnitId);
                 //TEXT
                
                if (ReferenceEquals(unit.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", unit.Name);
                 //TEXT
                
                if (ReferenceEquals(unit.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", unit.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Unit
        /// </summary>
        /// <returns></returns>
        public int Delete(Unit unit)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Unit] 
                                    WHERE UnitId = @UnitId", this.Schema);
                                    
                
                if (ReferenceEquals(unit.UnitId, null)) cmd.Parameters.AddWithValue("@UnitId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UnitId", unit.UnitId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Time time)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Time] (TimeId, Name, Description)
                                    VALUES (@TimeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(time.TimeId, null)) cmd.Parameters.AddWithValue("@TimeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TimeId", time.TimeId);
                
                  
                if (ReferenceEquals(time.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", time.Name);
                
                  
                if (ReferenceEquals(time.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", time.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Time time)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = time.TimeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Time WHERE TimeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(time);
                else return this.Insert(time);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTimes<T>()
            where T : Time, new()
        {
            return this.GetAllTimes<T>(String.Empty);
        }

        
        public List<T> GetAllTimes<T>(String whereClause)
            where T : Time, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Time]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T time = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TimeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          time.TimeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          time.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          time.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(time);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Time
        /// </summary>
        /// <returns></returns>
        public int Update(Time time)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Time] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TimeId = @TimeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(time.TimeId, null)) cmd.Parameters.AddWithValue("@TimeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TimeId", time.TimeId);
                 //TEXT
                
                if (ReferenceEquals(time.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", time.Name);
                 //TEXT
                
                if (ReferenceEquals(time.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", time.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Time
        /// </summary>
        /// <returns></returns>
        public int Delete(Time time)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Time] 
                                    WHERE TimeId = @TimeId", this.Schema);
                                    
                
                if (ReferenceEquals(time.TimeId, null)) cmd.Parameters.AddWithValue("@TimeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TimeId", time.TimeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Measurement measurement)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Measurement] (MeasurementId, Name, Description)
                                    VALUES (@MeasurementId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(measurement.MeasurementId, null)) cmd.Parameters.AddWithValue("@MeasurementId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MeasurementId", measurement.MeasurementId);
                
                  
                if (ReferenceEquals(measurement.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", measurement.Name);
                
                  
                if (ReferenceEquals(measurement.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", measurement.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Measurement measurement)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = measurement.MeasurementId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Measurement WHERE MeasurementId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(measurement);
                else return this.Insert(measurement);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllMeasurements<T>()
            where T : Measurement, new()
        {
            return this.GetAllMeasurements<T>(String.Empty);
        }

        
        public List<T> GetAllMeasurements<T>(String whereClause)
            where T : Measurement, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Measurement]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T measurement = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("MeasurementId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          measurement.MeasurementId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          measurement.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          measurement.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(measurement);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Measurement
        /// </summary>
        /// <returns></returns>
        public int Update(Measurement measurement)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Measurement] SET 
                                    Name = @Name,Description = @Description
                                    WHERE MeasurementId = @MeasurementId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(measurement.MeasurementId, null)) cmd.Parameters.AddWithValue("@MeasurementId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MeasurementId", measurement.MeasurementId);
                 //TEXT
                
                if (ReferenceEquals(measurement.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", measurement.Name);
                 //TEXT
                
                if (ReferenceEquals(measurement.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", measurement.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Measurement
        /// </summary>
        /// <returns></returns>
        public int Delete(Measurement measurement)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Measurement] 
                                    WHERE MeasurementId = @MeasurementId", this.Schema);
                                    
                
                if (ReferenceEquals(measurement.MeasurementId, null)) cmd.Parameters.AddWithValue("@MeasurementId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@MeasurementId", measurement.MeasurementId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Transmission transmission)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Transmission] (TransmissionId, Name, Description)
                                    VALUES (@TransmissionId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(transmission.TransmissionId, null)) cmd.Parameters.AddWithValue("@TransmissionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TransmissionId", transmission.TransmissionId);
                
                  
                if (ReferenceEquals(transmission.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", transmission.Name);
                
                  
                if (ReferenceEquals(transmission.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", transmission.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Transmission transmission)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = transmission.TransmissionId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Transmission WHERE TransmissionId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(transmission);
                else return this.Insert(transmission);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTransmissions<T>()
            where T : Transmission, new()
        {
            return this.GetAllTransmissions<T>(String.Empty);
        }

        
        public List<T> GetAllTransmissions<T>(String whereClause)
            where T : Transmission, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Transmission]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T transmission = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TransmissionId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          transmission.TransmissionId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          transmission.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          transmission.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(transmission);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Transmission
        /// </summary>
        /// <returns></returns>
        public int Update(Transmission transmission)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Transmission] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TransmissionId = @TransmissionId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(transmission.TransmissionId, null)) cmd.Parameters.AddWithValue("@TransmissionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TransmissionId", transmission.TransmissionId);
                 //TEXT
                
                if (ReferenceEquals(transmission.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", transmission.Name);
                 //TEXT
                
                if (ReferenceEquals(transmission.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", transmission.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Transmission
        /// </summary>
        /// <returns></returns>
        public int Delete(Transmission transmission)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Transmission] 
                                    WHERE TransmissionId = @TransmissionId", this.Schema);
                                    
                
                if (ReferenceEquals(transmission.TransmissionId, null)) cmd.Parameters.AddWithValue("@TransmissionId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TransmissionId", transmission.TransmissionId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Silence silence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Silence] (SilenceId, Name, Description)
                                    VALUES (@SilenceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(silence.SilenceId, null)) cmd.Parameters.AddWithValue("@SilenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SilenceId", silence.SilenceId);
                
                  
                if (ReferenceEquals(silence.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", silence.Name);
                
                  
                if (ReferenceEquals(silence.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", silence.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Silence silence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = silence.SilenceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Silence WHERE SilenceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(silence);
                else return this.Insert(silence);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSilences<T>()
            where T : Silence, new()
        {
            return this.GetAllSilences<T>(String.Empty);
        }

        
        public List<T> GetAllSilences<T>(String whereClause)
            where T : Silence, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Silence]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T silence = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SilenceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          silence.SilenceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          silence.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          silence.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(silence);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Silence
        /// </summary>
        /// <returns></returns>
        public int Update(Silence silence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Silence] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SilenceId = @SilenceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(silence.SilenceId, null)) cmd.Parameters.AddWithValue("@SilenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SilenceId", silence.SilenceId);
                 //TEXT
                
                if (ReferenceEquals(silence.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", silence.Name);
                 //TEXT
                
                if (ReferenceEquals(silence.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", silence.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Silence
        /// </summary>
        /// <returns></returns>
        public int Delete(Silence silence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Silence] 
                                    WHERE SilenceId = @SilenceId", this.Schema);
                                    
                
                if (ReferenceEquals(silence.SilenceId, null)) cmd.Parameters.AddWithValue("@SilenceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SilenceId", silence.SilenceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Word word)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Word] (WordId, Name, Description)
                                    VALUES (@WordId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(word.WordId, null)) cmd.Parameters.AddWithValue("@WordId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@WordId", word.WordId);
                
                  
                if (ReferenceEquals(word.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", word.Name);
                
                  
                if (ReferenceEquals(word.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", word.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Word word)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = word.WordId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Word WHERE WordId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(word);
                else return this.Insert(word);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllWords<T>()
            where T : Word, new()
        {
            return this.GetAllWords<T>(String.Empty);
        }

        
        public List<T> GetAllWords<T>(String whereClause)
            where T : Word, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Word]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T word = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("WordId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          word.WordId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          word.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          word.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(word);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Word
        /// </summary>
        /// <returns></returns>
        public int Update(Word word)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Word] SET 
                                    Name = @Name,Description = @Description
                                    WHERE WordId = @WordId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(word.WordId, null)) cmd.Parameters.AddWithValue("@WordId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@WordId", word.WordId);
                 //TEXT
                
                if (ReferenceEquals(word.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", word.Name);
                 //TEXT
                
                if (ReferenceEquals(word.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", word.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Word
        /// </summary>
        /// <returns></returns>
        public int Delete(Word word)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Word] 
                                    WHERE WordId = @WordId", this.Schema);
                                    
                
                if (ReferenceEquals(word.WordId, null)) cmd.Parameters.AddWithValue("@WordId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@WordId", word.WordId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Delimiter delimiter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Delimiter] (DelimiterId, Name, Description)
                                    VALUES (@DelimiterId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(delimiter.DelimiterId, null)) cmd.Parameters.AddWithValue("@DelimiterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DelimiterId", delimiter.DelimiterId);
                
                  
                if (ReferenceEquals(delimiter.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", delimiter.Name);
                
                  
                if (ReferenceEquals(delimiter.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", delimiter.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Delimiter delimiter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = delimiter.DelimiterId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Delimiter WHERE DelimiterId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(delimiter);
                else return this.Insert(delimiter);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDelimiters<T>()
            where T : Delimiter, new()
        {
            return this.GetAllDelimiters<T>(String.Empty);
        }

        
        public List<T> GetAllDelimiters<T>(String whereClause)
            where T : Delimiter, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Delimiter]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T delimiter = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DelimiterId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          delimiter.DelimiterId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          delimiter.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          delimiter.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(delimiter);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Delimiter
        /// </summary>
        /// <returns></returns>
        public int Update(Delimiter delimiter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Delimiter] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DelimiterId = @DelimiterId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(delimiter.DelimiterId, null)) cmd.Parameters.AddWithValue("@DelimiterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DelimiterId", delimiter.DelimiterId);
                 //TEXT
                
                if (ReferenceEquals(delimiter.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", delimiter.Name);
                 //TEXT
                
                if (ReferenceEquals(delimiter.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", delimiter.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Delimiter
        /// </summary>
        /// <returns></returns>
        public int Delete(Delimiter delimiter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Delimiter] 
                                    WHERE DelimiterId = @DelimiterId", this.Schema);
                                    
                
                if (ReferenceEquals(delimiter.DelimiterId, null)) cmd.Parameters.AddWithValue("@DelimiterId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DelimiterId", delimiter.DelimiterId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Space space)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Space] (SpaceId, Name, Description)
                                    VALUES (@SpaceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(space.SpaceId, null)) cmd.Parameters.AddWithValue("@SpaceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpaceId", space.SpaceId);
                
                  
                if (ReferenceEquals(space.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", space.Name);
                
                  
                if (ReferenceEquals(space.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", space.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Space space)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = space.SpaceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Space WHERE SpaceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(space);
                else return this.Insert(space);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSpaces<T>()
            where T : Space, new()
        {
            return this.GetAllSpaces<T>(String.Empty);
        }

        
        public List<T> GetAllSpaces<T>(String whereClause)
            where T : Space, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Space]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T space = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SpaceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          space.SpaceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          space.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          space.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(space);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Space
        /// </summary>
        /// <returns></returns>
        public int Update(Space space)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Space] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SpaceId = @SpaceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(space.SpaceId, null)) cmd.Parameters.AddWithValue("@SpaceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpaceId", space.SpaceId);
                 //TEXT
                
                if (ReferenceEquals(space.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", space.Name);
                 //TEXT
                
                if (ReferenceEquals(space.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", space.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Space
        /// </summary>
        /// <returns></returns>
        public int Delete(Space space)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Space] 
                                    WHERE SpaceId = @SpaceId", this.Schema);
                                    
                
                if (ReferenceEquals(space.SpaceId, null)) cmd.Parameters.AddWithValue("@SpaceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SpaceId", space.SpaceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Speed speed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Speed] (SpeedId, Name, Description)
                                    VALUES (@SpeedId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(speed.SpeedId, null)) cmd.Parameters.AddWithValue("@SpeedId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpeedId", speed.SpeedId);
                
                  
                if (ReferenceEquals(speed.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", speed.Name);
                
                  
                if (ReferenceEquals(speed.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", speed.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Speed speed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = speed.SpeedId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Speed WHERE SpeedId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(speed);
                else return this.Insert(speed);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSpeeds<T>()
            where T : Speed, new()
        {
            return this.GetAllSpeeds<T>(String.Empty);
        }

        
        public List<T> GetAllSpeeds<T>(String whereClause)
            where T : Speed, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Speed]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T speed = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SpeedId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          speed.SpeedId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          speed.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          speed.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(speed);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Speed
        /// </summary>
        /// <returns></returns>
        public int Update(Speed speed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Speed] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SpeedId = @SpeedId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(speed.SpeedId, null)) cmd.Parameters.AddWithValue("@SpeedId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpeedId", speed.SpeedId);
                 //TEXT
                
                if (ReferenceEquals(speed.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", speed.Name);
                 //TEXT
                
                if (ReferenceEquals(speed.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", speed.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Speed
        /// </summary>
        /// <returns></returns>
        public int Delete(Speed speed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Speed] 
                                    WHERE SpeedId = @SpeedId", this.Schema);
                                    
                
                if (ReferenceEquals(speed.SpeedId, null)) cmd.Parameters.AddWithValue("@SpeedId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SpeedId", speed.SpeedId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Communication communication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Communication] (CommunicationId, Name, Description)
                                    VALUES (@CommunicationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(communication.CommunicationId, null)) cmd.Parameters.AddWithValue("@CommunicationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CommunicationId", communication.CommunicationId);
                
                  
                if (ReferenceEquals(communication.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", communication.Name);
                
                  
                if (ReferenceEquals(communication.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", communication.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Communication communication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = communication.CommunicationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Communication WHERE CommunicationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(communication);
                else return this.Insert(communication);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCommunications<T>()
            where T : Communication, new()
        {
            return this.GetAllCommunications<T>(String.Empty);
        }

        
        public List<T> GetAllCommunications<T>(String whereClause)
            where T : Communication, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Communication]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T communication = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("CommunicationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          communication.CommunicationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          communication.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          communication.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(communication);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Communication
        /// </summary>
        /// <returns></returns>
        public int Update(Communication communication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Communication] SET 
                                    Name = @Name,Description = @Description
                                    WHERE CommunicationId = @CommunicationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(communication.CommunicationId, null)) cmd.Parameters.AddWithValue("@CommunicationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CommunicationId", communication.CommunicationId);
                 //TEXT
                
                if (ReferenceEquals(communication.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", communication.Name);
                 //TEXT
                
                if (ReferenceEquals(communication.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", communication.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Communication
        /// </summary>
        /// <returns></returns>
        public int Delete(Communication communication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Communication] 
                                    WHERE CommunicationId = @CommunicationId", this.Schema);
                                    
                
                if (ReferenceEquals(communication.CommunicationId, null)) cmd.Parameters.AddWithValue("@CommunicationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@CommunicationId", communication.CommunicationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Length length)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Length] (LengthId, Name, Description)
                                    VALUES (@LengthId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(length.LengthId, null)) cmd.Parameters.AddWithValue("@LengthId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LengthId", length.LengthId);
                
                  
                if (ReferenceEquals(length.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", length.Name);
                
                  
                if (ReferenceEquals(length.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", length.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Length length)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = length.LengthId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Length WHERE LengthId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(length);
                else return this.Insert(length);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLengths<T>()
            where T : Length, new()
        {
            return this.GetAllLengths<T>(String.Empty);
        }

        
        public List<T> GetAllLengths<T>(String whereClause)
            where T : Length, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Length]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T length = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LengthId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          length.LengthId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          length.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          length.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(length);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Length
        /// </summary>
        /// <returns></returns>
        public int Update(Length length)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Length] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LengthId = @LengthId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(length.LengthId, null)) cmd.Parameters.AddWithValue("@LengthId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LengthId", length.LengthId);
                 //TEXT
                
                if (ReferenceEquals(length.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", length.Name);
                 //TEXT
                
                if (ReferenceEquals(length.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", length.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Length
        /// </summary>
        /// <returns></returns>
        public int Delete(Length length)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Length] 
                                    WHERE LengthId = @LengthId", this.Schema);
                                    
                
                if (ReferenceEquals(length.LengthId, null)) cmd.Parameters.AddWithValue("@LengthId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LengthId", length.LengthId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Frequency frequency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Frequency] (FrequencyId, Name, Description)
                                    VALUES (@FrequencyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(frequency.FrequencyId, null)) cmd.Parameters.AddWithValue("@FrequencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FrequencyId", frequency.FrequencyId);
                
                  
                if (ReferenceEquals(frequency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", frequency.Name);
                
                  
                if (ReferenceEquals(frequency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", frequency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Frequency frequency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = frequency.FrequencyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Frequency WHERE FrequencyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(frequency);
                else return this.Insert(frequency);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllFrequencies<T>()
            where T : Frequency, new()
        {
            return this.GetAllFrequencies<T>(String.Empty);
        }

        
        public List<T> GetAllFrequencies<T>(String whereClause)
            where T : Frequency, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Frequency]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T frequency = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("FrequencyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          frequency.FrequencyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          frequency.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          frequency.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(frequency);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Frequency
        /// </summary>
        /// <returns></returns>
        public int Update(Frequency frequency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Frequency] SET 
                                    Name = @Name,Description = @Description
                                    WHERE FrequencyId = @FrequencyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(frequency.FrequencyId, null)) cmd.Parameters.AddWithValue("@FrequencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FrequencyId", frequency.FrequencyId);
                 //TEXT
                
                if (ReferenceEquals(frequency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", frequency.Name);
                 //TEXT
                
                if (ReferenceEquals(frequency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", frequency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Frequency
        /// </summary>
        /// <returns></returns>
        public int Delete(Frequency frequency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Frequency] 
                                    WHERE FrequencyId = @FrequencyId", this.Schema);
                                    
                
                if (ReferenceEquals(frequency.FrequencyId, null)) cmd.Parameters.AddWithValue("@FrequencyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@FrequencyId", frequency.FrequencyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Occurrence occurrence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Occurrence] (OccurrenceId, Name, Description)
                                    VALUES (@OccurrenceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(occurrence.OccurrenceId, null)) cmd.Parameters.AddWithValue("@OccurrenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@OccurrenceId", occurrence.OccurrenceId);
                
                  
                if (ReferenceEquals(occurrence.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", occurrence.Name);
                
                  
                if (ReferenceEquals(occurrence.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", occurrence.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Occurrence occurrence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = occurrence.OccurrenceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Occurrence WHERE OccurrenceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(occurrence);
                else return this.Insert(occurrence);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllOccurrences<T>()
            where T : Occurrence, new()
        {
            return this.GetAllOccurrences<T>(String.Empty);
        }

        
        public List<T> GetAllOccurrences<T>(String whereClause)
            where T : Occurrence, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Occurrence]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T occurrence = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("OccurrenceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          occurrence.OccurrenceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          occurrence.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          occurrence.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(occurrence);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Occurrence
        /// </summary>
        /// <returns></returns>
        public int Update(Occurrence occurrence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Occurrence] SET 
                                    Name = @Name,Description = @Description
                                    WHERE OccurrenceId = @OccurrenceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(occurrence.OccurrenceId, null)) cmd.Parameters.AddWithValue("@OccurrenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@OccurrenceId", occurrence.OccurrenceId);
                 //TEXT
                
                if (ReferenceEquals(occurrence.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", occurrence.Name);
                 //TEXT
                
                if (ReferenceEquals(occurrence.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", occurrence.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Occurrence
        /// </summary>
        /// <returns></returns>
        public int Delete(Occurrence occurrence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Occurrence] 
                                    WHERE OccurrenceId = @OccurrenceId", this.Schema);
                                    
                
                if (ReferenceEquals(occurrence.OccurrenceId, null)) cmd.Parameters.AddWithValue("@OccurrenceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@OccurrenceId", occurrence.OccurrenceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Entropyencoding entropyencoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Entropyencoding] (EntropyencodingId, Name, Description)
                                    VALUES (@EntropyencodingId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(entropyencoding.EntropyencodingId, null)) cmd.Parameters.AddWithValue("@EntropyencodingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EntropyencodingId", entropyencoding.EntropyencodingId);
                
                  
                if (ReferenceEquals(entropyencoding.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", entropyencoding.Name);
                
                  
                if (ReferenceEquals(entropyencoding.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", entropyencoding.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Entropyencoding entropyencoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = entropyencoding.EntropyencodingId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Entropyencoding WHERE EntropyencodingId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(entropyencoding);
                else return this.Insert(entropyencoding);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllEntropyencodings<T>()
            where T : Entropyencoding, new()
        {
            return this.GetAllEntropyencodings<T>(String.Empty);
        }

        
        public List<T> GetAllEntropyencodings<T>(String whereClause)
            where T : Entropyencoding, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Entropyencoding]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T entropyencoding = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("EntropyencodingId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          entropyencoding.EntropyencodingId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          entropyencoding.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          entropyencoding.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(entropyencoding);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Entropyencoding
        /// </summary>
        /// <returns></returns>
        public int Update(Entropyencoding entropyencoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Entropyencoding] SET 
                                    Name = @Name,Description = @Description
                                    WHERE EntropyencodingId = @EntropyencodingId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(entropyencoding.EntropyencodingId, null)) cmd.Parameters.AddWithValue("@EntropyencodingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EntropyencodingId", entropyencoding.EntropyencodingId);
                 //TEXT
                
                if (ReferenceEquals(entropyencoding.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", entropyencoding.Name);
                 //TEXT
                
                if (ReferenceEquals(entropyencoding.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", entropyencoding.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Entropyencoding
        /// </summary>
        /// <returns></returns>
        public int Delete(Entropyencoding entropyencoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Entropyencoding] 
                                    WHERE EntropyencodingId = @EntropyencodingId", this.Schema);
                                    
                
                if (ReferenceEquals(entropyencoding.EntropyencodingId, null)) cmd.Parameters.AddWithValue("@EntropyencodingId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@EntropyencodingId", entropyencoding.EntropyencodingId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Amateurradiooperator amateurradiooperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Amateurradiooperator] (AmateurradiooperatorId, Name, Description)
                                    VALUES (@AmateurradiooperatorId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(amateurradiooperator.AmateurradiooperatorId, null)) cmd.Parameters.AddWithValue("@AmateurradiooperatorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradiooperatorId", amateurradiooperator.AmateurradiooperatorId);
                
                  
                if (ReferenceEquals(amateurradiooperator.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradiooperator.Name);
                
                  
                if (ReferenceEquals(amateurradiooperator.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradiooperator.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Amateurradiooperator amateurradiooperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = amateurradiooperator.AmateurradiooperatorId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Amateurradiooperator WHERE AmateurradiooperatorId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(amateurradiooperator);
                else return this.Insert(amateurradiooperator);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAmateurradiooperators<T>()
            where T : Amateurradiooperator, new()
        {
            return this.GetAllAmateurradiooperators<T>(String.Empty);
        }

        
        public List<T> GetAllAmateurradiooperators<T>(String whereClause)
            where T : Amateurradiooperator, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Amateurradiooperator]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T amateurradiooperator = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AmateurradiooperatorId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          amateurradiooperator.AmateurradiooperatorId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradiooperator.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradiooperator.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(amateurradiooperator);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Amateurradiooperator
        /// </summary>
        /// <returns></returns>
        public int Update(Amateurradiooperator amateurradiooperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Amateurradiooperator] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AmateurradiooperatorId = @AmateurradiooperatorId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(amateurradiooperator.AmateurradiooperatorId, null)) cmd.Parameters.AddWithValue("@AmateurradiooperatorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradiooperatorId", amateurradiooperator.AmateurradiooperatorId);
                 //TEXT
                
                if (ReferenceEquals(amateurradiooperator.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradiooperator.Name);
                 //TEXT
                
                if (ReferenceEquals(amateurradiooperator.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradiooperator.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Amateurradiooperator
        /// </summary>
        /// <returns></returns>
        public int Delete(Amateurradiooperator amateurradiooperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Amateurradiooperator] 
                                    WHERE AmateurradiooperatorId = @AmateurradiooperatorId", this.Schema);
                                    
                
                if (ReferenceEquals(amateurradiooperator.AmateurradiooperatorId, null)) cmd.Parameters.AddWithValue("@AmateurradiooperatorId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AmateurradiooperatorId", amateurradiooperator.AmateurradiooperatorId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Knowledge knowledge)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Knowledge] (KnowledgeId, Name, Description)
                                    VALUES (@KnowledgeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(knowledge.KnowledgeId, null)) cmd.Parameters.AddWithValue("@KnowledgeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@KnowledgeId", knowledge.KnowledgeId);
                
                  
                if (ReferenceEquals(knowledge.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", knowledge.Name);
                
                  
                if (ReferenceEquals(knowledge.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", knowledge.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Knowledge knowledge)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = knowledge.KnowledgeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Knowledge WHERE KnowledgeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(knowledge);
                else return this.Insert(knowledge);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllKnowledges<T>()
            where T : Knowledge, new()
        {
            return this.GetAllKnowledges<T>(String.Empty);
        }

        
        public List<T> GetAllKnowledges<T>(String whereClause)
            where T : Knowledge, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Knowledge]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T knowledge = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("KnowledgeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          knowledge.KnowledgeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          knowledge.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          knowledge.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(knowledge);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Knowledge
        /// </summary>
        /// <returns></returns>
        public int Update(Knowledge knowledge)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Knowledge] SET 
                                    Name = @Name,Description = @Description
                                    WHERE KnowledgeId = @KnowledgeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(knowledge.KnowledgeId, null)) cmd.Parameters.AddWithValue("@KnowledgeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@KnowledgeId", knowledge.KnowledgeId);
                 //TEXT
                
                if (ReferenceEquals(knowledge.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", knowledge.Name);
                 //TEXT
                
                if (ReferenceEquals(knowledge.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", knowledge.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Knowledge
        /// </summary>
        /// <returns></returns>
        public int Delete(Knowledge knowledge)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Knowledge] 
                                    WHERE KnowledgeId = @KnowledgeId", this.Schema);
                                    
                
                if (ReferenceEquals(knowledge.KnowledgeId, null)) cmd.Parameters.AddWithValue("@KnowledgeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@KnowledgeId", knowledge.KnowledgeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Proficiency proficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Proficiency] (ProficiencyId, Name, Description)
                                    VALUES (@ProficiencyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(proficiency.ProficiencyId, null)) cmd.Parameters.AddWithValue("@ProficiencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProficiencyId", proficiency.ProficiencyId);
                
                  
                if (ReferenceEquals(proficiency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", proficiency.Name);
                
                  
                if (ReferenceEquals(proficiency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", proficiency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Proficiency proficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = proficiency.ProficiencyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Proficiency WHERE ProficiencyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(proficiency);
                else return this.Insert(proficiency);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllProficiencies<T>()
            where T : Proficiency, new()
        {
            return this.GetAllProficiencies<T>(String.Empty);
        }

        
        public List<T> GetAllProficiencies<T>(String whereClause)
            where T : Proficiency, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Proficiency]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T proficiency = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ProficiencyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          proficiency.ProficiencyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          proficiency.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          proficiency.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(proficiency);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Proficiency
        /// </summary>
        /// <returns></returns>
        public int Update(Proficiency proficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Proficiency] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ProficiencyId = @ProficiencyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(proficiency.ProficiencyId, null)) cmd.Parameters.AddWithValue("@ProficiencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProficiencyId", proficiency.ProficiencyId);
                 //TEXT
                
                if (ReferenceEquals(proficiency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", proficiency.Name);
                 //TEXT
                
                if (ReferenceEquals(proficiency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", proficiency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Proficiency
        /// </summary>
        /// <returns></returns>
        public int Delete(Proficiency proficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Proficiency] 
                                    WHERE ProficiencyId = @ProficiencyId", this.Schema);
                                    
                
                if (ReferenceEquals(proficiency.ProficiencyId, null)) cmd.Parameters.AddWithValue("@ProficiencyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ProficiencyId", proficiency.ProficiencyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Licensing licensing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Licensing] (LicensingId, Name, Description)
                                    VALUES (@LicensingId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(licensing.LicensingId, null)) cmd.Parameters.AddWithValue("@LicensingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LicensingId", licensing.LicensingId);
                
                  
                if (ReferenceEquals(licensing.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", licensing.Name);
                
                  
                if (ReferenceEquals(licensing.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", licensing.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Licensing licensing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = licensing.LicensingId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Licensing WHERE LicensingId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(licensing);
                else return this.Insert(licensing);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLicensings<T>()
            where T : Licensing, new()
        {
            return this.GetAllLicensings<T>(String.Empty);
        }

        
        public List<T> GetAllLicensings<T>(String whereClause)
            where T : Licensing, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Licensing]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T licensing = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LicensingId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          licensing.LicensingId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          licensing.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          licensing.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(licensing);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Licensing
        /// </summary>
        /// <returns></returns>
        public int Update(Licensing licensing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Licensing] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LicensingId = @LicensingId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(licensing.LicensingId, null)) cmd.Parameters.AddWithValue("@LicensingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LicensingId", licensing.LicensingId);
                 //TEXT
                
                if (ReferenceEquals(licensing.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", licensing.Name);
                 //TEXT
                
                if (ReferenceEquals(licensing.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", licensing.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Licensing
        /// </summary>
        /// <returns></returns>
        public int Delete(Licensing licensing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Licensing] 
                                    WHERE LicensingId = @LicensingId", this.Schema);
                                    
                
                if (ReferenceEquals(licensing.LicensingId, null)) cmd.Parameters.AddWithValue("@LicensingId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LicensingId", licensing.LicensingId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Amateurradiolicense amateurradiolicense)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Amateurradiolicense] (AmateurradiolicenseId, Name, Description)
                                    VALUES (@AmateurradiolicenseId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(amateurradiolicense.AmateurradiolicenseId, null)) cmd.Parameters.AddWithValue("@AmateurradiolicenseId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradiolicenseId", amateurradiolicense.AmateurradiolicenseId);
                
                  
                if (ReferenceEquals(amateurradiolicense.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradiolicense.Name);
                
                  
                if (ReferenceEquals(amateurradiolicense.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradiolicense.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Amateurradiolicense amateurradiolicense)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = amateurradiolicense.AmateurradiolicenseId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Amateurradiolicense WHERE AmateurradiolicenseId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(amateurradiolicense);
                else return this.Insert(amateurradiolicense);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAmateurradiolicenses<T>()
            where T : Amateurradiolicense, new()
        {
            return this.GetAllAmateurradiolicenses<T>(String.Empty);
        }

        
        public List<T> GetAllAmateurradiolicenses<T>(String whereClause)
            where T : Amateurradiolicense, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Amateurradiolicense]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T amateurradiolicense = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AmateurradiolicenseId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          amateurradiolicense.AmateurradiolicenseId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradiolicense.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradiolicense.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(amateurradiolicense);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Amateurradiolicense
        /// </summary>
        /// <returns></returns>
        public int Update(Amateurradiolicense amateurradiolicense)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Amateurradiolicense] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AmateurradiolicenseId = @AmateurradiolicenseId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(amateurradiolicense.AmateurradiolicenseId, null)) cmd.Parameters.AddWithValue("@AmateurradiolicenseId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradiolicenseId", amateurradiolicense.AmateurradiolicenseId);
                 //TEXT
                
                if (ReferenceEquals(amateurradiolicense.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradiolicense.Name);
                 //TEXT
                
                if (ReferenceEquals(amateurradiolicense.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradiolicense.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Amateurradiolicense
        /// </summary>
        /// <returns></returns>
        public int Delete(Amateurradiolicense amateurradiolicense)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Amateurradiolicense] 
                                    WHERE AmateurradiolicenseId = @AmateurradiolicenseId", this.Schema);
                                    
                
                if (ReferenceEquals(amateurradiolicense.AmateurradiolicenseId, null)) cmd.Parameters.AddWithValue("@AmateurradiolicenseId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AmateurradiolicenseId", amateurradiolicense.AmateurradiolicenseId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Aviator aviator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Aviator] (AviatorId, Name, Description)
                                    VALUES (@AviatorId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(aviator.AviatorId, null)) cmd.Parameters.AddWithValue("@AviatorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AviatorId", aviator.AviatorId);
                
                  
                if (ReferenceEquals(aviator.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aviator.Name);
                
                  
                if (ReferenceEquals(aviator.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aviator.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Aviator aviator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = aviator.AviatorId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Aviator WHERE AviatorId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(aviator);
                else return this.Insert(aviator);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAviators<T>()
            where T : Aviator, new()
        {
            return this.GetAllAviators<T>(String.Empty);
        }

        
        public List<T> GetAllAviators<T>(String whereClause)
            where T : Aviator, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Aviator]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T aviator = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AviatorId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          aviator.AviatorId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aviator.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aviator.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(aviator);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Aviator
        /// </summary>
        /// <returns></returns>
        public int Update(Aviator aviator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Aviator] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AviatorId = @AviatorId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(aviator.AviatorId, null)) cmd.Parameters.AddWithValue("@AviatorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AviatorId", aviator.AviatorId);
                 //TEXT
                
                if (ReferenceEquals(aviator.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aviator.Name);
                 //TEXT
                
                if (ReferenceEquals(aviator.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aviator.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Aviator
        /// </summary>
        /// <returns></returns>
        public int Delete(Aviator aviator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Aviator] 
                                    WHERE AviatorId = @AviatorId", this.Schema);
                                    
                
                if (ReferenceEquals(aviator.AviatorId, null)) cmd.Parameters.AddWithValue("@AviatorId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AviatorId", aviator.AviatorId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Air air)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Air] (AirId, Name, Description)
                                    VALUES (@AirId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(air.AirId, null)) cmd.Parameters.AddWithValue("@AirId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AirId", air.AirId);
                
                  
                if (ReferenceEquals(air.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", air.Name);
                
                  
                if (ReferenceEquals(air.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", air.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Air air)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = air.AirId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Air WHERE AirId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(air);
                else return this.Insert(air);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAirs<T>()
            where T : Air, new()
        {
            return this.GetAllAirs<T>(String.Empty);
        }

        
        public List<T> GetAllAirs<T>(String whereClause)
            where T : Air, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Air]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T air = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AirId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          air.AirId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          air.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          air.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(air);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Air
        /// </summary>
        /// <returns></returns>
        public int Update(Air air)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Air] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AirId = @AirId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(air.AirId, null)) cmd.Parameters.AddWithValue("@AirId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AirId", air.AirId);
                 //TEXT
                
                if (ReferenceEquals(air.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", air.Name);
                 //TEXT
                
                if (ReferenceEquals(air.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", air.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Air
        /// </summary>
        /// <returns></returns>
        public int Delete(Air air)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Air] 
                                    WHERE AirId = @AirId", this.Schema);
                                    
                
                if (ReferenceEquals(air.AirId, null)) cmd.Parameters.AddWithValue("@AirId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AirId", air.AirId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Traffic traffic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Traffic] (TrafficId, Name, Description)
                                    VALUES (@TrafficId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(traffic.TrafficId, null)) cmd.Parameters.AddWithValue("@TrafficId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TrafficId", traffic.TrafficId);
                
                  
                if (ReferenceEquals(traffic.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", traffic.Name);
                
                  
                if (ReferenceEquals(traffic.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", traffic.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Traffic traffic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = traffic.TrafficId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Traffic WHERE TrafficId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(traffic);
                else return this.Insert(traffic);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTraffics<T>()
            where T : Traffic, new()
        {
            return this.GetAllTraffics<T>(String.Empty);
        }

        
        public List<T> GetAllTraffics<T>(String whereClause)
            where T : Traffic, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Traffic]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T traffic = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TrafficId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          traffic.TrafficId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          traffic.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          traffic.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(traffic);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Traffic
        /// </summary>
        /// <returns></returns>
        public int Update(Traffic traffic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Traffic] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TrafficId = @TrafficId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(traffic.TrafficId, null)) cmd.Parameters.AddWithValue("@TrafficId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TrafficId", traffic.TrafficId);
                 //TEXT
                
                if (ReferenceEquals(traffic.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", traffic.Name);
                 //TEXT
                
                if (ReferenceEquals(traffic.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", traffic.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Traffic
        /// </summary>
        /// <returns></returns>
        public int Delete(Traffic traffic)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Traffic] 
                                    WHERE TrafficId = @TrafficId", this.Schema);
                                    
                
                if (ReferenceEquals(traffic.TrafficId, null)) cmd.Parameters.AddWithValue("@TrafficId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TrafficId", traffic.TrafficId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Airtrafficcontroller airtrafficcontroller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Airtrafficcontroller] (AirtrafficcontrollerId, Name, Description)
                                    VALUES (@AirtrafficcontrollerId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(airtrafficcontroller.AirtrafficcontrollerId, null)) cmd.Parameters.AddWithValue("@AirtrafficcontrollerId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AirtrafficcontrollerId", airtrafficcontroller.AirtrafficcontrollerId);
                
                  
                if (ReferenceEquals(airtrafficcontroller.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", airtrafficcontroller.Name);
                
                  
                if (ReferenceEquals(airtrafficcontroller.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", airtrafficcontroller.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Airtrafficcontroller airtrafficcontroller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = airtrafficcontroller.AirtrafficcontrollerId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Airtrafficcontroller WHERE AirtrafficcontrollerId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(airtrafficcontroller);
                else return this.Insert(airtrafficcontroller);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAirtrafficcontrollers<T>()
            where T : Airtrafficcontroller, new()
        {
            return this.GetAllAirtrafficcontrollers<T>(String.Empty);
        }

        
        public List<T> GetAllAirtrafficcontrollers<T>(String whereClause)
            where T : Airtrafficcontroller, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Airtrafficcontroller]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T airtrafficcontroller = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AirtrafficcontrollerId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          airtrafficcontroller.AirtrafficcontrollerId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          airtrafficcontroller.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          airtrafficcontroller.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(airtrafficcontroller);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Airtrafficcontroller
        /// </summary>
        /// <returns></returns>
        public int Update(Airtrafficcontroller airtrafficcontroller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Airtrafficcontroller] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AirtrafficcontrollerId = @AirtrafficcontrollerId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(airtrafficcontroller.AirtrafficcontrollerId, null)) cmd.Parameters.AddWithValue("@AirtrafficcontrollerId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AirtrafficcontrollerId", airtrafficcontroller.AirtrafficcontrollerId);
                 //TEXT
                
                if (ReferenceEquals(airtrafficcontroller.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", airtrafficcontroller.Name);
                 //TEXT
                
                if (ReferenceEquals(airtrafficcontroller.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", airtrafficcontroller.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Airtrafficcontroller
        /// </summary>
        /// <returns></returns>
        public int Delete(Airtrafficcontroller airtrafficcontroller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Airtrafficcontroller] 
                                    WHERE AirtrafficcontrollerId = @AirtrafficcontrollerId", this.Schema);
                                    
                
                if (ReferenceEquals(airtrafficcontroller.AirtrafficcontrollerId, null)) cmd.Parameters.AddWithValue("@AirtrafficcontrollerId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AirtrafficcontrollerId", airtrafficcontroller.AirtrafficcontrollerId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Understanding understanding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Understanding] (UnderstandingId, Name, Description)
                                    VALUES (@UnderstandingId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(understanding.UnderstandingId, null)) cmd.Parameters.AddWithValue("@UnderstandingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UnderstandingId", understanding.UnderstandingId);
                
                  
                if (ReferenceEquals(understanding.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", understanding.Name);
                
                  
                if (ReferenceEquals(understanding.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", understanding.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Understanding understanding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = understanding.UnderstandingId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Understanding WHERE UnderstandingId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(understanding);
                else return this.Insert(understanding);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUnderstandings<T>()
            where T : Understanding, new()
        {
            return this.GetAllUnderstandings<T>(String.Empty);
        }

        
        public List<T> GetAllUnderstandings<T>(String whereClause)
            where T : Understanding, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Understanding]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T understanding = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UnderstandingId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          understanding.UnderstandingId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          understanding.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          understanding.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(understanding);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Understanding
        /// </summary>
        /// <returns></returns>
        public int Update(Understanding understanding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Understanding] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UnderstandingId = @UnderstandingId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(understanding.UnderstandingId, null)) cmd.Parameters.AddWithValue("@UnderstandingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UnderstandingId", understanding.UnderstandingId);
                 //TEXT
                
                if (ReferenceEquals(understanding.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", understanding.Name);
                 //TEXT
                
                if (ReferenceEquals(understanding.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", understanding.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Understanding
        /// </summary>
        /// <returns></returns>
        public int Delete(Understanding understanding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Understanding] 
                                    WHERE UnderstandingId = @UnderstandingId", this.Schema);
                                    
                
                if (ReferenceEquals(understanding.UnderstandingId, null)) cmd.Parameters.AddWithValue("@UnderstandingId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UnderstandingId", understanding.UnderstandingId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Navigationalaid navigationalaid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Navigationalaid] (NavigationalaidId, Name, Description)
                                    VALUES (@NavigationalaidId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(navigationalaid.NavigationalaidId, null)) cmd.Parameters.AddWithValue("@NavigationalaidId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NavigationalaidId", navigationalaid.NavigationalaidId);
                
                  
                if (ReferenceEquals(navigationalaid.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", navigationalaid.Name);
                
                  
                if (ReferenceEquals(navigationalaid.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", navigationalaid.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Navigationalaid navigationalaid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = navigationalaid.NavigationalaidId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Navigationalaid WHERE NavigationalaidId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(navigationalaid);
                else return this.Insert(navigationalaid);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNavigationalaids<T>()
            where T : Navigationalaid, new()
        {
            return this.GetAllNavigationalaids<T>(String.Empty);
        }

        
        public List<T> GetAllNavigationalaids<T>(String whereClause)
            where T : Navigationalaid, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Navigationalaid]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T navigationalaid = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NavigationalaidId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          navigationalaid.NavigationalaidId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          navigationalaid.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          navigationalaid.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(navigationalaid);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Navigationalaid
        /// </summary>
        /// <returns></returns>
        public int Update(Navigationalaid navigationalaid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Navigationalaid] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NavigationalaidId = @NavigationalaidId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(navigationalaid.NavigationalaidId, null)) cmd.Parameters.AddWithValue("@NavigationalaidId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NavigationalaidId", navigationalaid.NavigationalaidId);
                 //TEXT
                
                if (ReferenceEquals(navigationalaid.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", navigationalaid.Name);
                 //TEXT
                
                if (ReferenceEquals(navigationalaid.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", navigationalaid.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Navigationalaid
        /// </summary>
        /// <returns></returns>
        public int Delete(Navigationalaid navigationalaid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Navigationalaid] 
                                    WHERE NavigationalaidId = @NavigationalaidId", this.Schema);
                                    
                
                if (ReferenceEquals(navigationalaid.NavigationalaidId, null)) cmd.Parameters.AddWithValue("@NavigationalaidId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NavigationalaidId", navigationalaid.NavigationalaidId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Vhfomnidirectionalrange vhfomnidirectionalrange)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Vhfomnidirectionalrange] (VhfomnidirectionalrangeId, Name, Description)
                                    VALUES (@VhfomnidirectionalrangeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(vhfomnidirectionalrange.VhfomnidirectionalrangeId, null)) cmd.Parameters.AddWithValue("@VhfomnidirectionalrangeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VhfomnidirectionalrangeId", vhfomnidirectionalrange.VhfomnidirectionalrangeId);
                
                  
                if (ReferenceEquals(vhfomnidirectionalrange.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", vhfomnidirectionalrange.Name);
                
                  
                if (ReferenceEquals(vhfomnidirectionalrange.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", vhfomnidirectionalrange.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Vhfomnidirectionalrange vhfomnidirectionalrange)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = vhfomnidirectionalrange.VhfomnidirectionalrangeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Vhfomnidirectionalrange WHERE VhfomnidirectionalrangeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(vhfomnidirectionalrange);
                else return this.Insert(vhfomnidirectionalrange);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllVhfomnidirectionalranges<T>()
            where T : Vhfomnidirectionalrange, new()
        {
            return this.GetAllVhfomnidirectionalranges<T>(String.Empty);
        }

        
        public List<T> GetAllVhfomnidirectionalranges<T>(String whereClause)
            where T : Vhfomnidirectionalrange, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Vhfomnidirectionalrange]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T vhfomnidirectionalrange = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("VhfomnidirectionalrangeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          vhfomnidirectionalrange.VhfomnidirectionalrangeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          vhfomnidirectionalrange.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          vhfomnidirectionalrange.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(vhfomnidirectionalrange);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Vhfomnidirectionalrange
        /// </summary>
        /// <returns></returns>
        public int Update(Vhfomnidirectionalrange vhfomnidirectionalrange)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Vhfomnidirectionalrange] SET 
                                    Name = @Name,Description = @Description
                                    WHERE VhfomnidirectionalrangeId = @VhfomnidirectionalrangeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(vhfomnidirectionalrange.VhfomnidirectionalrangeId, null)) cmd.Parameters.AddWithValue("@VhfomnidirectionalrangeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VhfomnidirectionalrangeId", vhfomnidirectionalrange.VhfomnidirectionalrangeId);
                 //TEXT
                
                if (ReferenceEquals(vhfomnidirectionalrange.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", vhfomnidirectionalrange.Name);
                 //TEXT
                
                if (ReferenceEquals(vhfomnidirectionalrange.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", vhfomnidirectionalrange.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Vhfomnidirectionalrange
        /// </summary>
        /// <returns></returns>
        public int Delete(Vhfomnidirectionalrange vhfomnidirectionalrange)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Vhfomnidirectionalrange] 
                                    WHERE VhfomnidirectionalrangeId = @VhfomnidirectionalrangeId", this.Schema);
                                    
                
                if (ReferenceEquals(vhfomnidirectionalrange.VhfomnidirectionalrangeId, null)) cmd.Parameters.AddWithValue("@VhfomnidirectionalrangeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@VhfomnidirectionalrangeId", vhfomnidirectionalrange.VhfomnidirectionalrangeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Nondirectionalbeacon nondirectionalbeacon)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Nondirectionalbeacon] (NondirectionalbeaconId, Name, Description)
                                    VALUES (@NondirectionalbeaconId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(nondirectionalbeacon.NondirectionalbeaconId, null)) cmd.Parameters.AddWithValue("@NondirectionalbeaconId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NondirectionalbeaconId", nondirectionalbeacon.NondirectionalbeaconId);
                
                  
                if (ReferenceEquals(nondirectionalbeacon.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", nondirectionalbeacon.Name);
                
                  
                if (ReferenceEquals(nondirectionalbeacon.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", nondirectionalbeacon.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Nondirectionalbeacon nondirectionalbeacon)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = nondirectionalbeacon.NondirectionalbeaconId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Nondirectionalbeacon WHERE NondirectionalbeaconId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(nondirectionalbeacon);
                else return this.Insert(nondirectionalbeacon);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNondirectionalbeacons<T>()
            where T : Nondirectionalbeacon, new()
        {
            return this.GetAllNondirectionalbeacons<T>(String.Empty);
        }

        
        public List<T> GetAllNondirectionalbeacons<T>(String whereClause)
            where T : Nondirectionalbeacon, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Nondirectionalbeacon]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T nondirectionalbeacon = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NondirectionalbeaconId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          nondirectionalbeacon.NondirectionalbeaconId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          nondirectionalbeacon.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          nondirectionalbeacon.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(nondirectionalbeacon);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Nondirectionalbeacon
        /// </summary>
        /// <returns></returns>
        public int Update(Nondirectionalbeacon nondirectionalbeacon)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Nondirectionalbeacon] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NondirectionalbeaconId = @NondirectionalbeaconId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(nondirectionalbeacon.NondirectionalbeaconId, null)) cmd.Parameters.AddWithValue("@NondirectionalbeaconId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NondirectionalbeaconId", nondirectionalbeacon.NondirectionalbeaconId);
                 //TEXT
                
                if (ReferenceEquals(nondirectionalbeacon.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", nondirectionalbeacon.Name);
                 //TEXT
                
                if (ReferenceEquals(nondirectionalbeacon.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", nondirectionalbeacon.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Nondirectionalbeacon
        /// </summary>
        /// <returns></returns>
        public int Delete(Nondirectionalbeacon nondirectionalbeacon)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Nondirectionalbeacon] 
                                    WHERE NondirectionalbeaconId = @NondirectionalbeaconId", this.Schema);
                                    
                
                if (ReferenceEquals(nondirectionalbeacon.NondirectionalbeaconId, null)) cmd.Parameters.AddWithValue("@NondirectionalbeaconId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NondirectionalbeaconId", nondirectionalbeacon.NondirectionalbeaconId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Voice voice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Voice] (VoiceId, Name, Description)
                                    VALUES (@VoiceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(voice.VoiceId, null)) cmd.Parameters.AddWithValue("@VoiceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VoiceId", voice.VoiceId);
                
                  
                if (ReferenceEquals(voice.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", voice.Name);
                
                  
                if (ReferenceEquals(voice.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", voice.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Voice voice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = voice.VoiceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Voice WHERE VoiceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(voice);
                else return this.Insert(voice);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllVoices<T>()
            where T : Voice, new()
        {
            return this.GetAllVoices<T>(String.Empty);
        }

        
        public List<T> GetAllVoices<T>(String whereClause)
            where T : Voice, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Voice]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T voice = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("VoiceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          voice.VoiceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          voice.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          voice.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(voice);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Voice
        /// </summary>
        /// <returns></returns>
        public int Update(Voice voice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Voice] SET 
                                    Name = @Name,Description = @Description
                                    WHERE VoiceId = @VoiceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(voice.VoiceId, null)) cmd.Parameters.AddWithValue("@VoiceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VoiceId", voice.VoiceId);
                 //TEXT
                
                if (ReferenceEquals(voice.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", voice.Name);
                 //TEXT
                
                if (ReferenceEquals(voice.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", voice.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Voice
        /// </summary>
        /// <returns></returns>
        public int Delete(Voice voice)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Voice] 
                                    WHERE VoiceId = @VoiceId", this.Schema);
                                    
                
                if (ReferenceEquals(voice.VoiceId, null)) cmd.Parameters.AddWithValue("@VoiceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@VoiceId", voice.VoiceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Decoding decoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Decoding] (DecodingId, Name, Description)
                                    VALUES (@DecodingId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(decoding.DecodingId, null)) cmd.Parameters.AddWithValue("@DecodingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DecodingId", decoding.DecodingId);
                
                  
                if (ReferenceEquals(decoding.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", decoding.Name);
                
                  
                if (ReferenceEquals(decoding.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", decoding.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Decoding decoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = decoding.DecodingId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Decoding WHERE DecodingId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(decoding);
                else return this.Insert(decoding);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDecodings<T>()
            where T : Decoding, new()
        {
            return this.GetAllDecodings<T>(String.Empty);
        }

        
        public List<T> GetAllDecodings<T>(String whereClause)
            where T : Decoding, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Decoding]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T decoding = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DecodingId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          decoding.DecodingId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          decoding.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          decoding.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(decoding);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Decoding
        /// </summary>
        /// <returns></returns>
        public int Update(Decoding decoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Decoding] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DecodingId = @DecodingId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(decoding.DecodingId, null)) cmd.Parameters.AddWithValue("@DecodingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DecodingId", decoding.DecodingId);
                 //TEXT
                
                if (ReferenceEquals(decoding.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", decoding.Name);
                 //TEXT
                
                if (ReferenceEquals(decoding.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", decoding.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Decoding
        /// </summary>
        /// <returns></returns>
        public int Delete(Decoding decoding)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Decoding] 
                                    WHERE DecodingId = @DecodingId", this.Schema);
                                    
                
                if (ReferenceEquals(decoding.DecodingId, null)) cmd.Parameters.AddWithValue("@DecodingId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DecodingId", decoding.DecodingId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Device device)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Device] (DeviceId, Name, Description)
                                    VALUES (@DeviceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(device.DeviceId, null)) cmd.Parameters.AddWithValue("@DeviceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DeviceId", device.DeviceId);
                
                  
                if (ReferenceEquals(device.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", device.Name);
                
                  
                if (ReferenceEquals(device.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", device.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Device device)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = device.DeviceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Device WHERE DeviceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(device);
                else return this.Insert(device);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDevices<T>()
            where T : Device, new()
        {
            return this.GetAllDevices<T>(String.Empty);
        }

        
        public List<T> GetAllDevices<T>(String whereClause)
            where T : Device, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Device]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T device = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DeviceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          device.DeviceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          device.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          device.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(device);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Device
        /// </summary>
        /// <returns></returns>
        public int Update(Device device)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Device] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DeviceId = @DeviceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(device.DeviceId, null)) cmd.Parameters.AddWithValue("@DeviceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DeviceId", device.DeviceId);
                 //TEXT
                
                if (ReferenceEquals(device.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", device.Name);
                 //TEXT
                
                if (ReferenceEquals(device.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", device.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Device
        /// </summary>
        /// <returns></returns>
        public int Delete(Device device)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Device] 
                                    WHERE DeviceId = @DeviceId", this.Schema);
                                    
                
                if (ReferenceEquals(device.DeviceId, null)) cmd.Parameters.AddWithValue("@DeviceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DeviceId", device.DeviceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Alternative alternative)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Alternative] (AlternativeId, Name, Description)
                                    VALUES (@AlternativeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(alternative.AlternativeId, null)) cmd.Parameters.AddWithValue("@AlternativeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AlternativeId", alternative.AlternativeId);
                
                  
                if (ReferenceEquals(alternative.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", alternative.Name);
                
                  
                if (ReferenceEquals(alternative.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", alternative.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Alternative alternative)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = alternative.AlternativeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Alternative WHERE AlternativeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(alternative);
                else return this.Insert(alternative);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAlternatives<T>()
            where T : Alternative, new()
        {
            return this.GetAllAlternatives<T>(String.Empty);
        }

        
        public List<T> GetAllAlternatives<T>(String whereClause)
            where T : Alternative, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Alternative]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T alternative = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AlternativeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          alternative.AlternativeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          alternative.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          alternative.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(alternative);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Alternative
        /// </summary>
        /// <returns></returns>
        public int Update(Alternative alternative)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Alternative] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AlternativeId = @AlternativeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(alternative.AlternativeId, null)) cmd.Parameters.AddWithValue("@AlternativeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AlternativeId", alternative.AlternativeId);
                 //TEXT
                
                if (ReferenceEquals(alternative.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", alternative.Name);
                 //TEXT
                
                if (ReferenceEquals(alternative.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", alternative.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Alternative
        /// </summary>
        /// <returns></returns>
        public int Delete(Alternative alternative)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Alternative] 
                                    WHERE AlternativeId = @AlternativeId", this.Schema);
                                    
                
                if (ReferenceEquals(alternative.AlternativeId, null)) cmd.Parameters.AddWithValue("@AlternativeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AlternativeId", alternative.AlternativeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Speech speech)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Speech] (SpeechId, Name, Description)
                                    VALUES (@SpeechId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(speech.SpeechId, null)) cmd.Parameters.AddWithValue("@SpeechId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpeechId", speech.SpeechId);
                
                  
                if (ReferenceEquals(speech.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", speech.Name);
                
                  
                if (ReferenceEquals(speech.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", speech.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Speech speech)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = speech.SpeechId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Speech WHERE SpeechId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(speech);
                else return this.Insert(speech);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSpeechs<T>()
            where T : Speech, new()
        {
            return this.GetAllSpeechs<T>(String.Empty);
        }

        
        public List<T> GetAllSpeechs<T>(String whereClause)
            where T : Speech, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Speech]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T speech = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SpeechId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          speech.SpeechId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          speech.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          speech.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(speech);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Speech
        /// </summary>
        /// <returns></returns>
        public int Update(Speech speech)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Speech] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SpeechId = @SpeechId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(speech.SpeechId, null)) cmd.Parameters.AddWithValue("@SpeechId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpeechId", speech.SpeechId);
                 //TEXT
                
                if (ReferenceEquals(speech.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", speech.Name);
                 //TEXT
                
                if (ReferenceEquals(speech.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", speech.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Speech
        /// </summary>
        /// <returns></returns>
        public int Delete(Speech speech)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Speech] 
                                    WHERE SpeechId = @SpeechId", this.Schema);
                                    
                
                if (ReferenceEquals(speech.SpeechId, null)) cmd.Parameters.AddWithValue("@SpeechId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SpeechId", speech.SpeechId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Amateurradiorepeater amateurradiorepeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Amateurradiorepeater] (AmateurradiorepeaterId, Name, Description)
                                    VALUES (@AmateurradiorepeaterId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(amateurradiorepeater.AmateurradiorepeaterId, null)) cmd.Parameters.AddWithValue("@AmateurradiorepeaterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradiorepeaterId", amateurradiorepeater.AmateurradiorepeaterId);
                
                  
                if (ReferenceEquals(amateurradiorepeater.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradiorepeater.Name);
                
                  
                if (ReferenceEquals(amateurradiorepeater.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradiorepeater.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Amateurradiorepeater amateurradiorepeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = amateurradiorepeater.AmateurradiorepeaterId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Amateurradiorepeater WHERE AmateurradiorepeaterId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(amateurradiorepeater);
                else return this.Insert(amateurradiorepeater);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAmateurradiorepeaters<T>()
            where T : Amateurradiorepeater, new()
        {
            return this.GetAllAmateurradiorepeaters<T>(String.Empty);
        }

        
        public List<T> GetAllAmateurradiorepeaters<T>(String whereClause)
            where T : Amateurradiorepeater, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Amateurradiorepeater]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T amateurradiorepeater = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AmateurradiorepeaterId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          amateurradiorepeater.AmateurradiorepeaterId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradiorepeater.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          amateurradiorepeater.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(amateurradiorepeater);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Amateurradiorepeater
        /// </summary>
        /// <returns></returns>
        public int Update(Amateurradiorepeater amateurradiorepeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Amateurradiorepeater] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AmateurradiorepeaterId = @AmateurradiorepeaterId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(amateurradiorepeater.AmateurradiorepeaterId, null)) cmd.Parameters.AddWithValue("@AmateurradiorepeaterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AmateurradiorepeaterId", amateurradiorepeater.AmateurradiorepeaterId);
                 //TEXT
                
                if (ReferenceEquals(amateurradiorepeater.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", amateurradiorepeater.Name);
                 //TEXT
                
                if (ReferenceEquals(amateurradiorepeater.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", amateurradiorepeater.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Amateurradiorepeater
        /// </summary>
        /// <returns></returns>
        public int Delete(Amateurradiorepeater amateurradiorepeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Amateurradiorepeater] 
                                    WHERE AmateurradiorepeaterId = @AmateurradiorepeaterId", this.Schema);
                                    
                
                if (ReferenceEquals(amateurradiorepeater.AmateurradiorepeaterId, null)) cmd.Parameters.AddWithValue("@AmateurradiorepeaterId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AmateurradiorepeaterId", amateurradiorepeater.AmateurradiorepeaterId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Example example)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Example] (ExampleId, Name, Description)
                                    VALUES (@ExampleId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(example.ExampleId, null)) cmd.Parameters.AddWithValue("@ExampleId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ExampleId", example.ExampleId);
                
                  
                if (ReferenceEquals(example.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", example.Name);
                
                  
                if (ReferenceEquals(example.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", example.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Example example)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = example.ExampleId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Example WHERE ExampleId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(example);
                else return this.Insert(example);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllExamples<T>()
            where T : Example, new()
        {
            return this.GetAllExamples<T>(String.Empty);
        }

        
        public List<T> GetAllExamples<T>(String whereClause)
            where T : Example, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Example]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T example = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ExampleId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          example.ExampleId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          example.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          example.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(example);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Example
        /// </summary>
        /// <returns></returns>
        public int Update(Example example)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Example] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ExampleId = @ExampleId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(example.ExampleId, null)) cmd.Parameters.AddWithValue("@ExampleId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ExampleId", example.ExampleId);
                 //TEXT
                
                if (ReferenceEquals(example.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", example.Name);
                 //TEXT
                
                if (ReferenceEquals(example.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", example.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Example
        /// </summary>
        /// <returns></returns>
        public int Delete(Example example)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Example] 
                                    WHERE ExampleId = @ExampleId", this.Schema);
                                    
                
                if (ReferenceEquals(example.ExampleId, null)) cmd.Parameters.AddWithValue("@ExampleId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ExampleId", example.ExampleId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng] (UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId, Name, Description)
                                    VALUES (@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId, null)) cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId);
                
                  
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Name);
                
                  
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng WHERE UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng);
                else return this.Insert(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngs<T>()
            where T : Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng, new()
        {
            return this.GetAllUploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngs<T>(String.Empty);
        }

        
        public List<T> GetAllUploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngs<T>(String whereClause)
            where T : Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng
        /// </summary>
        /// <returns></returns>
        public int Update(Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId = @UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId, null)) cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId);
                 //TEXT
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Name);
                 //TEXT
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng
        /// </summary>
        /// <returns></returns>
        public int Delete(Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng] 
                                    WHERE UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId = @UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", this.Schema);
                                    
                
                if (ReferenceEquals(uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId, null)) cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId", uploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpng.UploadwikimediaorgwikipediacommonsthumbfsossvgpxsossvgpngId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Filesossvg filesossvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Filesossvg] (FilesossvgId, Name, Description)
                                    VALUES (@FilesossvgId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(filesossvg.FilesossvgId, null)) cmd.Parameters.AddWithValue("@FilesossvgId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FilesossvgId", filesossvg.FilesossvgId);
                
                  
                if (ReferenceEquals(filesossvg.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", filesossvg.Name);
                
                  
                if (ReferenceEquals(filesossvg.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", filesossvg.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Filesossvg filesossvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = filesossvg.FilesossvgId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Filesossvg WHERE FilesossvgId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(filesossvg);
                else return this.Insert(filesossvg);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllFilesossvgs<T>()
            where T : Filesossvg, new()
        {
            return this.GetAllFilesossvgs<T>(String.Empty);
        }

        
        public List<T> GetAllFilesossvgs<T>(String whereClause)
            where T : Filesossvg, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Filesossvg]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T filesossvg = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("FilesossvgId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          filesossvg.FilesossvgId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          filesossvg.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          filesossvg.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(filesossvg);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Filesossvg
        /// </summary>
        /// <returns></returns>
        public int Update(Filesossvg filesossvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Filesossvg] SET 
                                    Name = @Name,Description = @Description
                                    WHERE FilesossvgId = @FilesossvgId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(filesossvg.FilesossvgId, null)) cmd.Parameters.AddWithValue("@FilesossvgId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FilesossvgId", filesossvg.FilesossvgId);
                 //TEXT
                
                if (ReferenceEquals(filesossvg.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", filesossvg.Name);
                 //TEXT
                
                if (ReferenceEquals(filesossvg.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", filesossvg.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Filesossvg
        /// </summary>
        /// <returns></returns>
        public int Delete(Filesossvg filesossvg)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Filesossvg] 
                                    WHERE FilesossvgId = @FilesossvgId", this.Schema);
                                    
                
                if (ReferenceEquals(filesossvg.FilesossvgId, null)) cmd.Parameters.AddWithValue("@FilesossvgId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@FilesossvgId", filesossvg.FilesossvgId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Emergency emergency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Emergency] (EmergencyId, Name, Description)
                                    VALUES (@EmergencyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(emergency.EmergencyId, null)) cmd.Parameters.AddWithValue("@EmergencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EmergencyId", emergency.EmergencyId);
                
                  
                if (ReferenceEquals(emergency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", emergency.Name);
                
                  
                if (ReferenceEquals(emergency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", emergency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Emergency emergency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = emergency.EmergencyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Emergency WHERE EmergencyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(emergency);
                else return this.Insert(emergency);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllEmergencies<T>()
            where T : Emergency, new()
        {
            return this.GetAllEmergencies<T>(String.Empty);
        }

        
        public List<T> GetAllEmergencies<T>(String whereClause)
            where T : Emergency, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Emergency]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T emergency = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("EmergencyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          emergency.EmergencyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          emergency.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          emergency.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(emergency);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Emergency
        /// </summary>
        /// <returns></returns>
        public int Update(Emergency emergency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Emergency] SET 
                                    Name = @Name,Description = @Description
                                    WHERE EmergencyId = @EmergencyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(emergency.EmergencyId, null)) cmd.Parameters.AddWithValue("@EmergencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EmergencyId", emergency.EmergencyId);
                 //TEXT
                
                if (ReferenceEquals(emergency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", emergency.Name);
                 //TEXT
                
                if (ReferenceEquals(emergency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", emergency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Emergency
        /// </summary>
        /// <returns></returns>
        public int Delete(Emergency emergency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Emergency] 
                                    WHERE EmergencyId = @EmergencyId", this.Schema);
                                    
                
                if (ReferenceEquals(emergency.EmergencyId, null)) cmd.Parameters.AddWithValue("@EmergencyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@EmergencyId", emergency.EmergencyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Telecommunication telecommunication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Telecommunication] (TelecommunicationId, Name, Description)
                                    VALUES (@TelecommunicationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(telecommunication.TelecommunicationId, null)) cmd.Parameters.AddWithValue("@TelecommunicationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TelecommunicationId", telecommunication.TelecommunicationId);
                
                  
                if (ReferenceEquals(telecommunication.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", telecommunication.Name);
                
                  
                if (ReferenceEquals(telecommunication.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", telecommunication.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Telecommunication telecommunication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = telecommunication.TelecommunicationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Telecommunication WHERE TelecommunicationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(telecommunication);
                else return this.Insert(telecommunication);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTelecommunications<T>()
            where T : Telecommunication, new()
        {
            return this.GetAllTelecommunications<T>(String.Empty);
        }

        
        public List<T> GetAllTelecommunications<T>(String whereClause)
            where T : Telecommunication, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Telecommunication]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T telecommunication = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TelecommunicationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          telecommunication.TelecommunicationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          telecommunication.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          telecommunication.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(telecommunication);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Telecommunication
        /// </summary>
        /// <returns></returns>
        public int Update(Telecommunication telecommunication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Telecommunication] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TelecommunicationId = @TelecommunicationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(telecommunication.TelecommunicationId, null)) cmd.Parameters.AddWithValue("@TelecommunicationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TelecommunicationId", telecommunication.TelecommunicationId);
                 //TEXT
                
                if (ReferenceEquals(telecommunication.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", telecommunication.Name);
                 //TEXT
                
                if (ReferenceEquals(telecommunication.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", telecommunication.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Telecommunication
        /// </summary>
        /// <returns></returns>
        public int Delete(Telecommunication telecommunication)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Telecommunication] 
                                    WHERE TelecommunicationId = @TelecommunicationId", this.Schema);
                                    
                
                if (ReferenceEquals(telecommunication.TelecommunicationId, null)) cmd.Parameters.AddWithValue("@TelecommunicationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TelecommunicationId", telecommunication.TelecommunicationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Distress distress)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Distress] (DistressId, Name, Description)
                                    VALUES (@DistressId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(distress.DistressId, null)) cmd.Parameters.AddWithValue("@DistressId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DistressId", distress.DistressId);
                
                  
                if (ReferenceEquals(distress.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", distress.Name);
                
                  
                if (ReferenceEquals(distress.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", distress.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Distress distress)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = distress.DistressId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Distress WHERE DistressId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(distress);
                else return this.Insert(distress);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDistresses<T>()
            where T : Distress, new()
        {
            return this.GetAllDistresses<T>(String.Empty);
        }

        
        public List<T> GetAllDistresses<T>(String whereClause)
            where T : Distress, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Distress]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T distress = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DistressId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          distress.DistressId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          distress.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          distress.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(distress);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Distress
        /// </summary>
        /// <returns></returns>
        public int Update(Distress distress)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Distress] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DistressId = @DistressId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(distress.DistressId, null)) cmd.Parameters.AddWithValue("@DistressId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DistressId", distress.DistressId);
                 //TEXT
                
                if (ReferenceEquals(distress.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", distress.Name);
                 //TEXT
                
                if (ReferenceEquals(distress.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", distress.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Distress
        /// </summary>
        /// <returns></returns>
        public int Delete(Distress distress)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Distress] 
                                    WHERE DistressId = @DistressId", this.Schema);
                                    
                
                if (ReferenceEquals(distress.DistressId, null)) cmd.Parameters.AddWithValue("@DistressId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DistressId", distress.DistressId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Treaty treaty)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Treaty] (TreatyId, Name, Description)
                                    VALUES (@TreatyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(treaty.TreatyId, null)) cmd.Parameters.AddWithValue("@TreatyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TreatyId", treaty.TreatyId);
                
                  
                if (ReferenceEquals(treaty.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", treaty.Name);
                
                  
                if (ReferenceEquals(treaty.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", treaty.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Treaty treaty)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = treaty.TreatyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Treaty WHERE TreatyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(treaty);
                else return this.Insert(treaty);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTreaties<T>()
            where T : Treaty, new()
        {
            return this.GetAllTreaties<T>(String.Empty);
        }

        
        public List<T> GetAllTreaties<T>(String whereClause)
            where T : Treaty, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Treaty]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T treaty = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TreatyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          treaty.TreatyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          treaty.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          treaty.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(treaty);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Treaty
        /// </summary>
        /// <returns></returns>
        public int Update(Treaty treaty)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Treaty] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TreatyId = @TreatyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(treaty.TreatyId, null)) cmd.Parameters.AddWithValue("@TreatyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TreatyId", treaty.TreatyId);
                 //TEXT
                
                if (ReferenceEquals(treaty.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", treaty.Name);
                 //TEXT
                
                if (ReferenceEquals(treaty.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", treaty.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Treaty
        /// </summary>
        /// <returns></returns>
        public int Delete(Treaty treaty)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Treaty] 
                                    WHERE TreatyId = @TreatyId", this.Schema);
                                    
                
                if (ReferenceEquals(treaty.TreatyId, null)) cmd.Parameters.AddWithValue("@TreatyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TreatyId", treaty.TreatyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Development development)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Development] (DevelopmentId, Name, Description)
                                    VALUES (@DevelopmentId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(development.DevelopmentId, null)) cmd.Parameters.AddWithValue("@DevelopmentId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DevelopmentId", development.DevelopmentId);
                
                  
                if (ReferenceEquals(development.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", development.Name);
                
                  
                if (ReferenceEquals(development.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", development.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Development development)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = development.DevelopmentId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Development WHERE DevelopmentId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(development);
                else return this.Insert(development);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDevelopments<T>()
            where T : Development, new()
        {
            return this.GetAllDevelopments<T>(String.Empty);
        }

        
        public List<T> GetAllDevelopments<T>(String whereClause)
            where T : Development, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Development]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T development = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DevelopmentId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          development.DevelopmentId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          development.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          development.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(development);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Development
        /// </summary>
        /// <returns></returns>
        public int Update(Development development)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Development] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DevelopmentId = @DevelopmentId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(development.DevelopmentId, null)) cmd.Parameters.AddWithValue("@DevelopmentId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DevelopmentId", development.DevelopmentId);
                 //TEXT
                
                if (ReferenceEquals(development.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", development.Name);
                 //TEXT
                
                if (ReferenceEquals(development.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", development.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Development
        /// </summary>
        /// <returns></returns>
        public int Delete(Development development)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Development] 
                                    WHERE DevelopmentId = @DevelopmentId", this.Schema);
                                    
                
                if (ReferenceEquals(development.DevelopmentId, null)) cmd.Parameters.AddWithValue("@DevelopmentId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DevelopmentId", development.DevelopmentId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(History history)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[History] (HistoryId, Name, Description)
                                    VALUES (@HistoryId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(history.HistoryId, null)) cmd.Parameters.AddWithValue("@HistoryId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HistoryId", history.HistoryId);
                
                  
                if (ReferenceEquals(history.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", history.Name);
                
                  
                if (ReferenceEquals(history.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", history.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(History history)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = history.HistoryId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM History WHERE HistoryId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(history);
                else return this.Insert(history);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllHistories<T>()
            where T : History, new()
        {
            return this.GetAllHistories<T>(String.Empty);
        }

        
        public List<T> GetAllHistories<T>(String whereClause)
            where T : History, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[History]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T history = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("HistoryId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          history.HistoryId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          history.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          history.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(history);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified History
        /// </summary>
        /// <returns></returns>
        public int Update(History history)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[History] SET 
                                    Name = @Name,Description = @Description
                                    WHERE HistoryId = @HistoryId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(history.HistoryId, null)) cmd.Parameters.AddWithValue("@HistoryId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HistoryId", history.HistoryId);
                 //TEXT
                
                if (ReferenceEquals(history.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", history.Name);
                 //TEXT
                
                if (ReferenceEquals(history.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", history.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified History
        /// </summary>
        /// <returns></returns>
        public int Delete(History history)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[History] 
                                    WHERE HistoryId = @HistoryId", this.Schema);
                                    
                
                if (ReferenceEquals(history.HistoryId, null)) cmd.Parameters.AddWithValue("@HistoryId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@HistoryId", history.HistoryId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Developmentandhistory developmentandhistory)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Developmentandhistory] (DevelopmentandhistoryId, Name, Description)
                                    VALUES (@DevelopmentandhistoryId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(developmentandhistory.DevelopmentandhistoryId, null)) cmd.Parameters.AddWithValue("@DevelopmentandhistoryId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DevelopmentandhistoryId", developmentandhistory.DevelopmentandhistoryId);
                
                  
                if (ReferenceEquals(developmentandhistory.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", developmentandhistory.Name);
                
                  
                if (ReferenceEquals(developmentandhistory.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", developmentandhistory.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Developmentandhistory developmentandhistory)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = developmentandhistory.DevelopmentandhistoryId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Developmentandhistory WHERE DevelopmentandhistoryId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(developmentandhistory);
                else return this.Insert(developmentandhistory);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDevelopmentandhistories<T>()
            where T : Developmentandhistory, new()
        {
            return this.GetAllDevelopmentandhistories<T>(String.Empty);
        }

        
        public List<T> GetAllDevelopmentandhistories<T>(String whereClause)
            where T : Developmentandhistory, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Developmentandhistory]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T developmentandhistory = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DevelopmentandhistoryId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          developmentandhistory.DevelopmentandhistoryId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          developmentandhistory.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          developmentandhistory.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(developmentandhistory);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Developmentandhistory
        /// </summary>
        /// <returns></returns>
        public int Update(Developmentandhistory developmentandhistory)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Developmentandhistory] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DevelopmentandhistoryId = @DevelopmentandhistoryId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(developmentandhistory.DevelopmentandhistoryId, null)) cmd.Parameters.AddWithValue("@DevelopmentandhistoryId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DevelopmentandhistoryId", developmentandhistory.DevelopmentandhistoryId);
                 //TEXT
                
                if (ReferenceEquals(developmentandhistory.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", developmentandhistory.Name);
                 //TEXT
                
                if (ReferenceEquals(developmentandhistory.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", developmentandhistory.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Developmentandhistory
        /// </summary>
        /// <returns></returns>
        public int Delete(Developmentandhistory developmentandhistory)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Developmentandhistory] 
                                    WHERE DevelopmentandhistoryId = @DevelopmentandhistoryId", this.Schema);
                                    
                
                if (ReferenceEquals(developmentandhistory.DevelopmentandhistoryId, null)) cmd.Parameters.AddWithValue("@DevelopmentandhistoryId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DevelopmentandhistoryId", developmentandhistory.DevelopmentandhistoryId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(User user)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[User] (UserId, Name, Description)
                                    VALUES (@UserId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(user.UserId, null)) cmd.Parameters.AddWithValue("@UserId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UserId", user.UserId);
                
                  
                if (ReferenceEquals(user.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", user.Name);
                
                  
                if (ReferenceEquals(user.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", user.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(User user)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = user.UserId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM User WHERE UserId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(user);
                else return this.Insert(user);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUsers<T>()
            where T : User, new()
        {
            return this.GetAllUsers<T>(String.Empty);
        }

        
        public List<T> GetAllUsers<T>(String whereClause)
            where T : User, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[User]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T user = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UserId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          user.UserId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          user.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          user.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(user);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified User
        /// </summary>
        /// <returns></returns>
        public int Update(User user)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[User] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UserId = @UserId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(user.UserId, null)) cmd.Parameters.AddWithValue("@UserId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UserId", user.UserId);
                 //TEXT
                
                if (ReferenceEquals(user.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", user.Name);
                 //TEXT
                
                if (ReferenceEquals(user.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", user.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified User
        /// </summary>
        /// <returns></returns>
        public int Delete(User user)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[User] 
                                    WHERE UserId = @UserId", this.Schema);
                                    
                
                if (ReferenceEquals(user.UserId, null)) cmd.Parameters.AddWithValue("@UserId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UserId", user.UserId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Userproficiency userproficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Userproficiency] (UserproficiencyId, Name, Description)
                                    VALUES (@UserproficiencyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(userproficiency.UserproficiencyId, null)) cmd.Parameters.AddWithValue("@UserproficiencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UserproficiencyId", userproficiency.UserproficiencyId);
                
                  
                if (ReferenceEquals(userproficiency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", userproficiency.Name);
                
                  
                if (ReferenceEquals(userproficiency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", userproficiency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Userproficiency userproficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = userproficiency.UserproficiencyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Userproficiency WHERE UserproficiencyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(userproficiency);
                else return this.Insert(userproficiency);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUserproficiencies<T>()
            where T : Userproficiency, new()
        {
            return this.GetAllUserproficiencies<T>(String.Empty);
        }

        
        public List<T> GetAllUserproficiencies<T>(String whereClause)
            where T : Userproficiency, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Userproficiency]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T userproficiency = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UserproficiencyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          userproficiency.UserproficiencyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          userproficiency.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          userproficiency.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(userproficiency);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Userproficiency
        /// </summary>
        /// <returns></returns>
        public int Update(Userproficiency userproficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Userproficiency] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UserproficiencyId = @UserproficiencyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(userproficiency.UserproficiencyId, null)) cmd.Parameters.AddWithValue("@UserproficiencyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UserproficiencyId", userproficiency.UserproficiencyId);
                 //TEXT
                
                if (ReferenceEquals(userproficiency.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", userproficiency.Name);
                 //TEXT
                
                if (ReferenceEquals(userproficiency.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", userproficiency.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Userproficiency
        /// </summary>
        /// <returns></returns>
        public int Delete(Userproficiency userproficiency)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Userproficiency] 
                                    WHERE UserproficiencyId = @UserproficiencyId", this.Schema);
                                    
                
                if (ReferenceEquals(userproficiency.UserproficiencyId, null)) cmd.Parameters.AddWithValue("@UserproficiencyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UserproficiencyId", userproficiency.UserproficiencyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Internationalmorsecode internationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Internationalmorsecode] (InternationalmorsecodeId, Name, Description)
                                    VALUES (@InternationalmorsecodeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(internationalmorsecode.InternationalmorsecodeId, null)) cmd.Parameters.AddWithValue("@InternationalmorsecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InternationalmorsecodeId", internationalmorsecode.InternationalmorsecodeId);
                
                  
                if (ReferenceEquals(internationalmorsecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", internationalmorsecode.Name);
                
                  
                if (ReferenceEquals(internationalmorsecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", internationalmorsecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Internationalmorsecode internationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = internationalmorsecode.InternationalmorsecodeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Internationalmorsecode WHERE InternationalmorsecodeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(internationalmorsecode);
                else return this.Insert(internationalmorsecode);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllInternationalmorsecodes<T>()
            where T : Internationalmorsecode, new()
        {
            return this.GetAllInternationalmorsecodes<T>(String.Empty);
        }

        
        public List<T> GetAllInternationalmorsecodes<T>(String whereClause)
            where T : Internationalmorsecode, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Internationalmorsecode]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T internationalmorsecode = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("InternationalmorsecodeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          internationalmorsecode.InternationalmorsecodeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          internationalmorsecode.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          internationalmorsecode.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(internationalmorsecode);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Internationalmorsecode
        /// </summary>
        /// <returns></returns>
        public int Update(Internationalmorsecode internationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Internationalmorsecode] SET 
                                    Name = @Name,Description = @Description
                                    WHERE InternationalmorsecodeId = @InternationalmorsecodeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(internationalmorsecode.InternationalmorsecodeId, null)) cmd.Parameters.AddWithValue("@InternationalmorsecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@InternationalmorsecodeId", internationalmorsecode.InternationalmorsecodeId);
                 //TEXT
                
                if (ReferenceEquals(internationalmorsecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", internationalmorsecode.Name);
                 //TEXT
                
                if (ReferenceEquals(internationalmorsecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", internationalmorsecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Internationalmorsecode
        /// </summary>
        /// <returns></returns>
        public int Delete(Internationalmorsecode internationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Internationalmorsecode] 
                                    WHERE InternationalmorsecodeId = @InternationalmorsecodeId", this.Schema);
                                    
                
                if (ReferenceEquals(internationalmorsecode.InternationalmorsecodeId, null)) cmd.Parameters.AddWithValue("@InternationalmorsecodeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@InternationalmorsecodeId", internationalmorsecode.InternationalmorsecodeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Technology technology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Technology] (TechnologyId, Name, Description)
                                    VALUES (@TechnologyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(technology.TechnologyId, null)) cmd.Parameters.AddWithValue("@TechnologyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TechnologyId", technology.TechnologyId);
                
                  
                if (ReferenceEquals(technology.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", technology.Name);
                
                  
                if (ReferenceEquals(technology.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", technology.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Technology technology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = technology.TechnologyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Technology WHERE TechnologyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(technology);
                else return this.Insert(technology);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTechnologies<T>()
            where T : Technology, new()
        {
            return this.GetAllTechnologies<T>(String.Empty);
        }

        
        public List<T> GetAllTechnologies<T>(String whereClause)
            where T : Technology, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Technology]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T technology = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TechnologyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          technology.TechnologyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          technology.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          technology.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(technology);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Technology
        /// </summary>
        /// <returns></returns>
        public int Update(Technology technology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Technology] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TechnologyId = @TechnologyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(technology.TechnologyId, null)) cmd.Parameters.AddWithValue("@TechnologyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TechnologyId", technology.TechnologyId);
                 //TEXT
                
                if (ReferenceEquals(technology.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", technology.Name);
                 //TEXT
                
                if (ReferenceEquals(technology.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", technology.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Technology
        /// </summary>
        /// <returns></returns>
        public int Delete(Technology technology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Technology] 
                                    WHERE TechnologyId = @TechnologyId", this.Schema);
                                    
                
                if (ReferenceEquals(technology.TechnologyId, null)) cmd.Parameters.AddWithValue("@TechnologyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TechnologyId", technology.TechnologyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Morsecodeasanassistivetechnology morsecodeasanassistivetechnology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Morsecodeasanassistivetechnology] (MorsecodeasanassistivetechnologyId, Name, Description)
                                    VALUES (@MorsecodeasanassistivetechnologyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId, null)) cmd.Parameters.AddWithValue("@MorsecodeasanassistivetechnologyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MorsecodeasanassistivetechnologyId", morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId);
                
                  
                if (ReferenceEquals(morsecodeasanassistivetechnology.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", morsecodeasanassistivetechnology.Name);
                
                  
                if (ReferenceEquals(morsecodeasanassistivetechnology.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", morsecodeasanassistivetechnology.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Morsecodeasanassistivetechnology morsecodeasanassistivetechnology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Morsecodeasanassistivetechnology WHERE MorsecodeasanassistivetechnologyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(morsecodeasanassistivetechnology);
                else return this.Insert(morsecodeasanassistivetechnology);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllMorsecodeasanassistivetechnologies<T>()
            where T : Morsecodeasanassistivetechnology, new()
        {
            return this.GetAllMorsecodeasanassistivetechnologies<T>(String.Empty);
        }

        
        public List<T> GetAllMorsecodeasanassistivetechnologies<T>(String whereClause)
            where T : Morsecodeasanassistivetechnology, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Morsecodeasanassistivetechnology]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T morsecodeasanassistivetechnology = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("MorsecodeasanassistivetechnologyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          morsecodeasanassistivetechnology.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          morsecodeasanassistivetechnology.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(morsecodeasanassistivetechnology);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Morsecodeasanassistivetechnology
        /// </summary>
        /// <returns></returns>
        public int Update(Morsecodeasanassistivetechnology morsecodeasanassistivetechnology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Morsecodeasanassistivetechnology] SET 
                                    Name = @Name,Description = @Description
                                    WHERE MorsecodeasanassistivetechnologyId = @MorsecodeasanassistivetechnologyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId, null)) cmd.Parameters.AddWithValue("@MorsecodeasanassistivetechnologyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MorsecodeasanassistivetechnologyId", morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId);
                 //TEXT
                
                if (ReferenceEquals(morsecodeasanassistivetechnology.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", morsecodeasanassistivetechnology.Name);
                 //TEXT
                
                if (ReferenceEquals(morsecodeasanassistivetechnology.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", morsecodeasanassistivetechnology.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Morsecodeasanassistivetechnology
        /// </summary>
        /// <returns></returns>
        public int Delete(Morsecodeasanassistivetechnology morsecodeasanassistivetechnology)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Morsecodeasanassistivetechnology] 
                                    WHERE MorsecodeasanassistivetechnologyId = @MorsecodeasanassistivetechnologyId", this.Schema);
                                    
                
                if (ReferenceEquals(morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId, null)) cmd.Parameters.AddWithValue("@MorsecodeasanassistivetechnologyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@MorsecodeasanassistivetechnologyId", morsecodeasanassistivetechnology.MorsecodeasanassistivetechnologyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Representation representation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Representation] (RepresentationId, Name, Description)
                                    VALUES (@RepresentationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(representation.RepresentationId, null)) cmd.Parameters.AddWithValue("@RepresentationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RepresentationId", representation.RepresentationId);
                
                  
                if (ReferenceEquals(representation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", representation.Name);
                
                  
                if (ReferenceEquals(representation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", representation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Representation representation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = representation.RepresentationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Representation WHERE RepresentationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(representation);
                else return this.Insert(representation);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllRepresentations<T>()
            where T : Representation, new()
        {
            return this.GetAllRepresentations<T>(String.Empty);
        }

        
        public List<T> GetAllRepresentations<T>(String whereClause)
            where T : Representation, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Representation]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T representation = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("RepresentationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          representation.RepresentationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          representation.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          representation.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(representation);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Representation
        /// </summary>
        /// <returns></returns>
        public int Update(Representation representation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Representation] SET 
                                    Name = @Name,Description = @Description
                                    WHERE RepresentationId = @RepresentationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(representation.RepresentationId, null)) cmd.Parameters.AddWithValue("@RepresentationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RepresentationId", representation.RepresentationId);
                 //TEXT
                
                if (ReferenceEquals(representation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", representation.Name);
                 //TEXT
                
                if (ReferenceEquals(representation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", representation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Representation
        /// </summary>
        /// <returns></returns>
        public int Delete(Representation representation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Representation] 
                                    WHERE RepresentationId = @RepresentationId", this.Schema);
                                    
                
                if (ReferenceEquals(representation.RepresentationId, null)) cmd.Parameters.AddWithValue("@RepresentationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@RepresentationId", representation.RepresentationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Timing timing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Timing] (TimingId, Name, Description)
                                    VALUES (@TimingId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(timing.TimingId, null)) cmd.Parameters.AddWithValue("@TimingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TimingId", timing.TimingId);
                
                  
                if (ReferenceEquals(timing.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", timing.Name);
                
                  
                if (ReferenceEquals(timing.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", timing.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Timing timing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = timing.TimingId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Timing WHERE TimingId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(timing);
                else return this.Insert(timing);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTimings<T>()
            where T : Timing, new()
        {
            return this.GetAllTimings<T>(String.Empty);
        }

        
        public List<T> GetAllTimings<T>(String whereClause)
            where T : Timing, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Timing]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T timing = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TimingId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          timing.TimingId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          timing.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          timing.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(timing);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Timing
        /// </summary>
        /// <returns></returns>
        public int Update(Timing timing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Timing] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TimingId = @TimingId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(timing.TimingId, null)) cmd.Parameters.AddWithValue("@TimingId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TimingId", timing.TimingId);
                 //TEXT
                
                if (ReferenceEquals(timing.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", timing.Name);
                 //TEXT
                
                if (ReferenceEquals(timing.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", timing.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Timing
        /// </summary>
        /// <returns></returns>
        public int Delete(Timing timing)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Timing] 
                                    WHERE TimingId = @TimingId", this.Schema);
                                    
                
                if (ReferenceEquals(timing.TimingId, null)) cmd.Parameters.AddWithValue("@TimingId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TimingId", timing.TimingId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Cablecode cablecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Cablecode] (CablecodeId, Name, Description)
                                    VALUES (@CablecodeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(cablecode.CablecodeId, null)) cmd.Parameters.AddWithValue("@CablecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CablecodeId", cablecode.CablecodeId);
                
                  
                if (ReferenceEquals(cablecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", cablecode.Name);
                
                  
                if (ReferenceEquals(cablecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", cablecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Cablecode cablecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = cablecode.CablecodeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Cablecode WHERE CablecodeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(cablecode);
                else return this.Insert(cablecode);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCablecodes<T>()
            where T : Cablecode, new()
        {
            return this.GetAllCablecodes<T>(String.Empty);
        }

        
        public List<T> GetAllCablecodes<T>(String whereClause)
            where T : Cablecode, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Cablecode]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T cablecode = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("CablecodeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          cablecode.CablecodeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          cablecode.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          cablecode.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(cablecode);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Cablecode
        /// </summary>
        /// <returns></returns>
        public int Update(Cablecode cablecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Cablecode] SET 
                                    Name = @Name,Description = @Description
                                    WHERE CablecodeId = @CablecodeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(cablecode.CablecodeId, null)) cmd.Parameters.AddWithValue("@CablecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CablecodeId", cablecode.CablecodeId);
                 //TEXT
                
                if (ReferenceEquals(cablecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", cablecode.Name);
                 //TEXT
                
                if (ReferenceEquals(cablecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", cablecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Cablecode
        /// </summary>
        /// <returns></returns>
        public int Delete(Cablecode cablecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Cablecode] 
                                    WHERE CablecodeId = @CablecodeId", this.Schema);
                                    
                
                if (ReferenceEquals(cablecode.CablecodeId, null)) cmd.Parameters.AddWithValue("@CablecodeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@CablecodeId", cablecode.CablecodeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Spokenrepresentation spokenrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Spokenrepresentation] (SpokenrepresentationId, Name, Description)
                                    VALUES (@SpokenrepresentationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(spokenrepresentation.SpokenrepresentationId, null)) cmd.Parameters.AddWithValue("@SpokenrepresentationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpokenrepresentationId", spokenrepresentation.SpokenrepresentationId);
                
                  
                if (ReferenceEquals(spokenrepresentation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", spokenrepresentation.Name);
                
                  
                if (ReferenceEquals(spokenrepresentation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", spokenrepresentation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Spokenrepresentation spokenrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = spokenrepresentation.SpokenrepresentationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Spokenrepresentation WHERE SpokenrepresentationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(spokenrepresentation);
                else return this.Insert(spokenrepresentation);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSpokenrepresentations<T>()
            where T : Spokenrepresentation, new()
        {
            return this.GetAllSpokenrepresentations<T>(String.Empty);
        }

        
        public List<T> GetAllSpokenrepresentations<T>(String whereClause)
            where T : Spokenrepresentation, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Spokenrepresentation]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T spokenrepresentation = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SpokenrepresentationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          spokenrepresentation.SpokenrepresentationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          spokenrepresentation.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          spokenrepresentation.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(spokenrepresentation);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Spokenrepresentation
        /// </summary>
        /// <returns></returns>
        public int Update(Spokenrepresentation spokenrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Spokenrepresentation] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SpokenrepresentationId = @SpokenrepresentationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(spokenrepresentation.SpokenrepresentationId, null)) cmd.Parameters.AddWithValue("@SpokenrepresentationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpokenrepresentationId", spokenrepresentation.SpokenrepresentationId);
                 //TEXT
                
                if (ReferenceEquals(spokenrepresentation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", spokenrepresentation.Name);
                 //TEXT
                
                if (ReferenceEquals(spokenrepresentation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", spokenrepresentation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Spokenrepresentation
        /// </summary>
        /// <returns></returns>
        public int Delete(Spokenrepresentation spokenrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Spokenrepresentation] 
                                    WHERE SpokenrepresentationId = @SpokenrepresentationId", this.Schema);
                                    
                
                if (ReferenceEquals(spokenrepresentation.SpokenrepresentationId, null)) cmd.Parameters.AddWithValue("@SpokenrepresentationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SpokenrepresentationId", spokenrepresentation.SpokenrepresentationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Minute minute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Minute] (MinuteId, Name, Description)
                                    VALUES (@MinuteId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(minute.MinuteId, null)) cmd.Parameters.AddWithValue("@MinuteId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MinuteId", minute.MinuteId);
                
                  
                if (ReferenceEquals(minute.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", minute.Name);
                
                  
                if (ReferenceEquals(minute.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", minute.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Minute minute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = minute.MinuteId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Minute WHERE MinuteId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(minute);
                else return this.Insert(minute);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllMinutes<T>()
            where T : Minute, new()
        {
            return this.GetAllMinutes<T>(String.Empty);
        }

        
        public List<T> GetAllMinutes<T>(String whereClause)
            where T : Minute, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Minute]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T minute = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("MinuteId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          minute.MinuteId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          minute.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          minute.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(minute);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Minute
        /// </summary>
        /// <returns></returns>
        public int Update(Minute minute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Minute] SET 
                                    Name = @Name,Description = @Description
                                    WHERE MinuteId = @MinuteId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(minute.MinuteId, null)) cmd.Parameters.AddWithValue("@MinuteId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@MinuteId", minute.MinuteId);
                 //TEXT
                
                if (ReferenceEquals(minute.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", minute.Name);
                 //TEXT
                
                if (ReferenceEquals(minute.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", minute.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Minute
        /// </summary>
        /// <returns></returns>
        public int Delete(Minute minute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Minute] 
                                    WHERE MinuteId = @MinuteId", this.Schema);
                                    
                
                if (ReferenceEquals(minute.MinuteId, null)) cmd.Parameters.AddWithValue("@MinuteId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@MinuteId", minute.MinuteId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Speedinwordsperminute speedinwordsperminute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Speedinwordsperminute] (SpeedinwordsperminuteId, Name, Description)
                                    VALUES (@SpeedinwordsperminuteId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(speedinwordsperminute.SpeedinwordsperminuteId, null)) cmd.Parameters.AddWithValue("@SpeedinwordsperminuteId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpeedinwordsperminuteId", speedinwordsperminute.SpeedinwordsperminuteId);
                
                  
                if (ReferenceEquals(speedinwordsperminute.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", speedinwordsperminute.Name);
                
                  
                if (ReferenceEquals(speedinwordsperminute.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", speedinwordsperminute.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Speedinwordsperminute speedinwordsperminute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = speedinwordsperminute.SpeedinwordsperminuteId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Speedinwordsperminute WHERE SpeedinwordsperminuteId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(speedinwordsperminute);
                else return this.Insert(speedinwordsperminute);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSpeedinwordsperminutes<T>()
            where T : Speedinwordsperminute, new()
        {
            return this.GetAllSpeedinwordsperminutes<T>(String.Empty);
        }

        
        public List<T> GetAllSpeedinwordsperminutes<T>(String whereClause)
            where T : Speedinwordsperminute, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Speedinwordsperminute]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T speedinwordsperminute = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SpeedinwordsperminuteId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          speedinwordsperminute.SpeedinwordsperminuteId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          speedinwordsperminute.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          speedinwordsperminute.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(speedinwordsperminute);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Speedinwordsperminute
        /// </summary>
        /// <returns></returns>
        public int Update(Speedinwordsperminute speedinwordsperminute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Speedinwordsperminute] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SpeedinwordsperminuteId = @SpeedinwordsperminuteId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(speedinwordsperminute.SpeedinwordsperminuteId, null)) cmd.Parameters.AddWithValue("@SpeedinwordsperminuteId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SpeedinwordsperminuteId", speedinwordsperminute.SpeedinwordsperminuteId);
                 //TEXT
                
                if (ReferenceEquals(speedinwordsperminute.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", speedinwordsperminute.Name);
                 //TEXT
                
                if (ReferenceEquals(speedinwordsperminute.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", speedinwordsperminute.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Speedinwordsperminute
        /// </summary>
        /// <returns></returns>
        public int Delete(Speedinwordsperminute speedinwordsperminute)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Speedinwordsperminute] 
                                    WHERE SpeedinwordsperminuteId = @SpeedinwordsperminuteId", this.Schema);
                                    
                
                if (ReferenceEquals(speedinwordsperminute.SpeedinwordsperminuteId, null)) cmd.Parameters.AddWithValue("@SpeedinwordsperminuteId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SpeedinwordsperminuteId", speedinwordsperminute.SpeedinwordsperminuteId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Farnsworthspeed farnsworthspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Farnsworthspeed] (FarnsworthspeedId, Name, Description)
                                    VALUES (@FarnsworthspeedId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(farnsworthspeed.FarnsworthspeedId, null)) cmd.Parameters.AddWithValue("@FarnsworthspeedId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FarnsworthspeedId", farnsworthspeed.FarnsworthspeedId);
                
                  
                if (ReferenceEquals(farnsworthspeed.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", farnsworthspeed.Name);
                
                  
                if (ReferenceEquals(farnsworthspeed.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", farnsworthspeed.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Farnsworthspeed farnsworthspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = farnsworthspeed.FarnsworthspeedId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Farnsworthspeed WHERE FarnsworthspeedId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(farnsworthspeed);
                else return this.Insert(farnsworthspeed);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllFarnsworthspeeds<T>()
            where T : Farnsworthspeed, new()
        {
            return this.GetAllFarnsworthspeeds<T>(String.Empty);
        }

        
        public List<T> GetAllFarnsworthspeeds<T>(String whereClause)
            where T : Farnsworthspeed, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Farnsworthspeed]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T farnsworthspeed = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("FarnsworthspeedId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          farnsworthspeed.FarnsworthspeedId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          farnsworthspeed.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          farnsworthspeed.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(farnsworthspeed);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Farnsworthspeed
        /// </summary>
        /// <returns></returns>
        public int Update(Farnsworthspeed farnsworthspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Farnsworthspeed] SET 
                                    Name = @Name,Description = @Description
                                    WHERE FarnsworthspeedId = @FarnsworthspeedId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(farnsworthspeed.FarnsworthspeedId, null)) cmd.Parameters.AddWithValue("@FarnsworthspeedId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@FarnsworthspeedId", farnsworthspeed.FarnsworthspeedId);
                 //TEXT
                
                if (ReferenceEquals(farnsworthspeed.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", farnsworthspeed.Name);
                 //TEXT
                
                if (ReferenceEquals(farnsworthspeed.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", farnsworthspeed.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Farnsworthspeed
        /// </summary>
        /// <returns></returns>
        public int Delete(Farnsworthspeed farnsworthspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Farnsworthspeed] 
                                    WHERE FarnsworthspeedId = @FarnsworthspeedId", this.Schema);
                                    
                
                if (ReferenceEquals(farnsworthspeed.FarnsworthspeedId, null)) cmd.Parameters.AddWithValue("@FarnsworthspeedId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@FarnsworthspeedId", farnsworthspeed.FarnsworthspeedId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Display display)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Display] (DisplayId, Name, Description)
                                    VALUES (@DisplayId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(display.DisplayId, null)) cmd.Parameters.AddWithValue("@DisplayId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DisplayId", display.DisplayId);
                
                  
                if (ReferenceEquals(display.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", display.Name);
                
                  
                if (ReferenceEquals(display.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", display.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Display display)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = display.DisplayId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Display WHERE DisplayId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(display);
                else return this.Insert(display);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDisplaies<T>()
            where T : Display, new()
        {
            return this.GetAllDisplaies<T>(String.Empty);
        }

        
        public List<T> GetAllDisplaies<T>(String whereClause)
            where T : Display, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Display]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T display = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DisplayId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          display.DisplayId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          display.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          display.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(display);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Display
        /// </summary>
        /// <returns></returns>
        public int Update(Display display)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Display] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DisplayId = @DisplayId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(display.DisplayId, null)) cmd.Parameters.AddWithValue("@DisplayId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DisplayId", display.DisplayId);
                 //TEXT
                
                if (ReferenceEquals(display.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", display.Name);
                 //TEXT
                
                if (ReferenceEquals(display.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", display.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Display
        /// </summary>
        /// <returns></returns>
        public int Delete(Display display)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Display] 
                                    WHERE DisplayId = @DisplayId", this.Schema);
                                    
                
                if (ReferenceEquals(display.DisplayId, null)) cmd.Parameters.AddWithValue("@DisplayId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DisplayId", display.DisplayId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Alternativedisplayofcommoncharactersininternationalmorsecode alternativedisplayofcommoncharactersininternationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Alternativedisplayofcommoncharactersininternationalmorsecode] (AlternativedisplayofcommoncharactersininternationalmorsecodeId, Name, Description)
                                    VALUES (@AlternativedisplayofcommoncharactersininternationalmorsecodeId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId, null)) cmd.Parameters.AddWithValue("@AlternativedisplayofcommoncharactersininternationalmorsecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AlternativedisplayofcommoncharactersininternationalmorsecodeId", alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId);
                
                  
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", alternativedisplayofcommoncharactersininternationalmorsecode.Name);
                
                  
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", alternativedisplayofcommoncharactersininternationalmorsecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Alternativedisplayofcommoncharactersininternationalmorsecode alternativedisplayofcommoncharactersininternationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Alternativedisplayofcommoncharactersininternationalmorsecode WHERE AlternativedisplayofcommoncharactersininternationalmorsecodeId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(alternativedisplayofcommoncharactersininternationalmorsecode);
                else return this.Insert(alternativedisplayofcommoncharactersininternationalmorsecode);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAlternativedisplayofcommoncharactersininternationalmorsecodes<T>()
            where T : Alternativedisplayofcommoncharactersininternationalmorsecode, new()
        {
            return this.GetAllAlternativedisplayofcommoncharactersininternationalmorsecodes<T>(String.Empty);
        }

        
        public List<T> GetAllAlternativedisplayofcommoncharactersininternationalmorsecodes<T>(String whereClause)
            where T : Alternativedisplayofcommoncharactersininternationalmorsecode, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Alternativedisplayofcommoncharactersininternationalmorsecode]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T alternativedisplayofcommoncharactersininternationalmorsecode = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AlternativedisplayofcommoncharactersininternationalmorsecodeId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          alternativedisplayofcommoncharactersininternationalmorsecode.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          alternativedisplayofcommoncharactersininternationalmorsecode.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(alternativedisplayofcommoncharactersininternationalmorsecode);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Alternativedisplayofcommoncharactersininternationalmorsecode
        /// </summary>
        /// <returns></returns>
        public int Update(Alternativedisplayofcommoncharactersininternationalmorsecode alternativedisplayofcommoncharactersininternationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Alternativedisplayofcommoncharactersininternationalmorsecode] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AlternativedisplayofcommoncharactersininternationalmorsecodeId = @AlternativedisplayofcommoncharactersininternationalmorsecodeId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId, null)) cmd.Parameters.AddWithValue("@AlternativedisplayofcommoncharactersininternationalmorsecodeId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AlternativedisplayofcommoncharactersininternationalmorsecodeId", alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId);
                 //TEXT
                
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", alternativedisplayofcommoncharactersininternationalmorsecode.Name);
                 //TEXT
                
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", alternativedisplayofcommoncharactersininternationalmorsecode.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Alternativedisplayofcommoncharactersininternationalmorsecode
        /// </summary>
        /// <returns></returns>
        public int Delete(Alternativedisplayofcommoncharactersininternationalmorsecode alternativedisplayofcommoncharactersininternationalmorsecode)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Alternativedisplayofcommoncharactersininternationalmorsecode] 
                                    WHERE AlternativedisplayofcommoncharactersininternationalmorsecodeId = @AlternativedisplayofcommoncharactersininternationalmorsecodeId", this.Schema);
                                    
                
                if (ReferenceEquals(alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId, null)) cmd.Parameters.AddWithValue("@AlternativedisplayofcommoncharactersininternationalmorsecodeId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AlternativedisplayofcommoncharactersininternationalmorsecodeId", alternativedisplayofcommoncharactersininternationalmorsecode.AlternativedisplayofcommoncharactersininternationalmorsecodeId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Link link)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Link] (LinkId, Name, Description)
                                    VALUES (@LinkId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(link.LinkId, null)) cmd.Parameters.AddWithValue("@LinkId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LinkId", link.LinkId);
                
                  
                if (ReferenceEquals(link.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", link.Name);
                
                  
                if (ReferenceEquals(link.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", link.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Link link)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = link.LinkId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Link WHERE LinkId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(link);
                else return this.Insert(link);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLinks<T>()
            where T : Link, new()
        {
            return this.GetAllLinks<T>(String.Empty);
        }

        
        public List<T> GetAllLinks<T>(String whereClause)
            where T : Link, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Link]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T link = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LinkId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          link.LinkId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          link.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          link.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(link);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Link
        /// </summary>
        /// <returns></returns>
        public int Update(Link link)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Link] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LinkId = @LinkId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(link.LinkId, null)) cmd.Parameters.AddWithValue("@LinkId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LinkId", link.LinkId);
                 //TEXT
                
                if (ReferenceEquals(link.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", link.Name);
                 //TEXT
                
                if (ReferenceEquals(link.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", link.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Link
        /// </summary>
        /// <returns></returns>
        public int Delete(Link link)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Link] 
                                    WHERE LinkId = @LinkId", this.Schema);
                                    
                
                if (ReferenceEquals(link.LinkId, null)) cmd.Parameters.AddWithValue("@LinkId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LinkId", link.LinkId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Budget budget)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Budget] (BudgetId, Name, Description)
                                    VALUES (@BudgetId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(budget.BudgetId, null)) cmd.Parameters.AddWithValue("@BudgetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@BudgetId", budget.BudgetId);
                
                  
                if (ReferenceEquals(budget.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", budget.Name);
                
                  
                if (ReferenceEquals(budget.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", budget.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Budget budget)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = budget.BudgetId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Budget WHERE BudgetId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(budget);
                else return this.Insert(budget);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllBudgets<T>()
            where T : Budget, new()
        {
            return this.GetAllBudgets<T>(String.Empty);
        }

        
        public List<T> GetAllBudgets<T>(String whereClause)
            where T : Budget, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Budget]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T budget = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("BudgetId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          budget.BudgetId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          budget.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          budget.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(budget);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Budget
        /// </summary>
        /// <returns></returns>
        public int Update(Budget budget)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Budget] SET 
                                    Name = @Name,Description = @Description
                                    WHERE BudgetId = @BudgetId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(budget.BudgetId, null)) cmd.Parameters.AddWithValue("@BudgetId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@BudgetId", budget.BudgetId);
                 //TEXT
                
                if (ReferenceEquals(budget.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", budget.Name);
                 //TEXT
                
                if (ReferenceEquals(budget.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", budget.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Budget
        /// </summary>
        /// <returns></returns>
        public int Delete(Budget budget)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Budget] 
                                    WHERE BudgetId = @BudgetId", this.Schema);
                                    
                
                if (ReferenceEquals(budget.BudgetId, null)) cmd.Parameters.AddWithValue("@BudgetId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@BudgetId", budget.BudgetId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Non non)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Non] (NonId, Name, Description)
                                    VALUES (@NonId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(non.NonId, null)) cmd.Parameters.AddWithValue("@NonId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NonId", non.NonId);
                
                  
                if (ReferenceEquals(non.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", non.Name);
                
                  
                if (ReferenceEquals(non.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", non.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Non non)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = non.NonId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Non WHERE NonId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(non);
                else return this.Insert(non);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNons<T>()
            where T : Non, new()
        {
            return this.GetAllNons<T>(String.Empty);
        }

        
        public List<T> GetAllNons<T>(String whereClause)
            where T : Non, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Non]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T non = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NonId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          non.NonId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          non.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          non.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(non);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Non
        /// </summary>
        /// <returns></returns>
        public int Update(Non non)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Non] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NonId = @NonId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(non.NonId, null)) cmd.Parameters.AddWithValue("@NonId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NonId", non.NonId);
                 //TEXT
                
                if (ReferenceEquals(non.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", non.Name);
                 //TEXT
                
                if (ReferenceEquals(non.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", non.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Non
        /// </summary>
        /// <returns></returns>
        public int Delete(Non non)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Non] 
                                    WHERE NonId = @NonId", this.Schema);
                                    
                
                if (ReferenceEquals(non.NonId, null)) cmd.Parameters.AddWithValue("@NonId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NonId", non.NonId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Latinextension latinextension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Latinextension] (LatinextensionId, Name, Description)
                                    VALUES (@LatinextensionId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(latinextension.LatinextensionId, null)) cmd.Parameters.AddWithValue("@LatinextensionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LatinextensionId", latinextension.LatinextensionId);
                
                  
                if (ReferenceEquals(latinextension.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", latinextension.Name);
                
                  
                if (ReferenceEquals(latinextension.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", latinextension.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Latinextension latinextension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = latinextension.LatinextensionId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Latinextension WHERE LatinextensionId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(latinextension);
                else return this.Insert(latinextension);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLatinextensions<T>()
            where T : Latinextension, new()
        {
            return this.GetAllLatinextensions<T>(String.Empty);
        }

        
        public List<T> GetAllLatinextensions<T>(String whereClause)
            where T : Latinextension, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Latinextension]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T latinextension = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LatinextensionId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          latinextension.LatinextensionId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          latinextension.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          latinextension.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(latinextension);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Latinextension
        /// </summary>
        /// <returns></returns>
        public int Update(Latinextension latinextension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Latinextension] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LatinextensionId = @LatinextensionId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(latinextension.LatinextensionId, null)) cmd.Parameters.AddWithValue("@LatinextensionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LatinextensionId", latinextension.LatinextensionId);
                 //TEXT
                
                if (ReferenceEquals(latinextension.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", latinextension.Name);
                 //TEXT
                
                if (ReferenceEquals(latinextension.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", latinextension.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Latinextension
        /// </summary>
        /// <returns></returns>
        public int Delete(Latinextension latinextension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Latinextension] 
                                    WHERE LatinextensionId = @LatinextensionId", this.Schema);
                                    
                
                if (ReferenceEquals(latinextension.LatinextensionId, null)) cmd.Parameters.AddWithValue("@LatinextensionId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LatinextensionId", latinextension.LatinextensionId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Software software)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Software] (SoftwareId, Name, Description)
                                    VALUES (@SoftwareId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(software.SoftwareId, null)) cmd.Parameters.AddWithValue("@SoftwareId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SoftwareId", software.SoftwareId);
                
                  
                if (ReferenceEquals(software.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", software.Name);
                
                  
                if (ReferenceEquals(software.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", software.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Software software)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = software.SoftwareId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Software WHERE SoftwareId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(software);
                else return this.Insert(software);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSoftwares<T>()
            where T : Software, new()
        {
            return this.GetAllSoftwares<T>(String.Empty);
        }

        
        public List<T> GetAllSoftwares<T>(String whereClause)
            where T : Software, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Software]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T software = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SoftwareId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          software.SoftwareId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          software.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          software.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(software);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Software
        /// </summary>
        /// <returns></returns>
        public int Update(Software software)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Software] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SoftwareId = @SoftwareId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(software.SoftwareId, null)) cmd.Parameters.AddWithValue("@SoftwareId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SoftwareId", software.SoftwareId);
                 //TEXT
                
                if (ReferenceEquals(software.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", software.Name);
                 //TEXT
                
                if (ReferenceEquals(software.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", software.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Software
        /// </summary>
        /// <returns></returns>
        public int Delete(Software software)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Software] 
                                    WHERE SoftwareId = @SoftwareId", this.Schema);
                                    
                
                if (ReferenceEquals(software.SoftwareId, null)) cmd.Parameters.AddWithValue("@SoftwareId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SoftwareId", software.SoftwareId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Decodingsoftware decodingsoftware)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Decodingsoftware] (DecodingsoftwareId, Name, Description)
                                    VALUES (@DecodingsoftwareId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(decodingsoftware.DecodingsoftwareId, null)) cmd.Parameters.AddWithValue("@DecodingsoftwareId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DecodingsoftwareId", decodingsoftware.DecodingsoftwareId);
                
                  
                if (ReferenceEquals(decodingsoftware.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", decodingsoftware.Name);
                
                  
                if (ReferenceEquals(decodingsoftware.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", decodingsoftware.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Decodingsoftware decodingsoftware)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = decodingsoftware.DecodingsoftwareId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Decodingsoftware WHERE DecodingsoftwareId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(decodingsoftware);
                else return this.Insert(decodingsoftware);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDecodingsoftwares<T>()
            where T : Decodingsoftware, new()
        {
            return this.GetAllDecodingsoftwares<T>(String.Empty);
        }

        
        public List<T> GetAllDecodingsoftwares<T>(String whereClause)
            where T : Decodingsoftware, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Decodingsoftware]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T decodingsoftware = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DecodingsoftwareId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          decodingsoftware.DecodingsoftwareId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          decodingsoftware.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          decodingsoftware.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(decodingsoftware);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Decodingsoftware
        /// </summary>
        /// <returns></returns>
        public int Update(Decodingsoftware decodingsoftware)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Decodingsoftware] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DecodingsoftwareId = @DecodingsoftwareId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(decodingsoftware.DecodingsoftwareId, null)) cmd.Parameters.AddWithValue("@DecodingsoftwareId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DecodingsoftwareId", decodingsoftware.DecodingsoftwareId);
                 //TEXT
                
                if (ReferenceEquals(decodingsoftware.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", decodingsoftware.Name);
                 //TEXT
                
                if (ReferenceEquals(decodingsoftware.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", decodingsoftware.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Decodingsoftware
        /// </summary>
        /// <returns></returns>
        public int Delete(Decodingsoftware decodingsoftware)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Decodingsoftware] 
                                    WHERE DecodingsoftwareId = @DecodingsoftwareId", this.Schema);
                                    
                
                if (ReferenceEquals(decodingsoftware.DecodingsoftwareId, null)) cmd.Parameters.AddWithValue("@DecodingsoftwareId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DecodingsoftwareId", decodingsoftware.DecodingsoftwareId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Seealso seealso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Seealso] (SeealsoId, Name, Description)
                                    VALUES (@SeealsoId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(seealso.SeealsoId, null)) cmd.Parameters.AddWithValue("@SeealsoId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SeealsoId", seealso.SeealsoId);
                
                  
                if (ReferenceEquals(seealso.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", seealso.Name);
                
                  
                if (ReferenceEquals(seealso.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", seealso.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Seealso seealso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = seealso.SeealsoId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Seealso WHERE SeealsoId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(seealso);
                else return this.Insert(seealso);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSeealsos<T>()
            where T : Seealso, new()
        {
            return this.GetAllSeealsos<T>(String.Empty);
        }

        
        public List<T> GetAllSeealsos<T>(String whereClause)
            where T : Seealso, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Seealso]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T seealso = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SeealsoId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          seealso.SeealsoId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          seealso.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          seealso.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(seealso);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Seealso
        /// </summary>
        /// <returns></returns>
        public int Update(Seealso seealso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Seealso] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SeealsoId = @SeealsoId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(seealso.SeealsoId, null)) cmd.Parameters.AddWithValue("@SeealsoId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SeealsoId", seealso.SeealsoId);
                 //TEXT
                
                if (ReferenceEquals(seealso.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", seealso.Name);
                 //TEXT
                
                if (ReferenceEquals(seealso.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", seealso.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Seealso
        /// </summary>
        /// <returns></returns>
        public int Delete(Seealso seealso)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Seealso] 
                                    WHERE SeealsoId = @SeealsoId", this.Schema);
                                    
                
                if (ReferenceEquals(seealso.SeealsoId, null)) cmd.Parameters.AddWithValue("@SeealsoId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SeealsoId", seealso.SeealsoId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Bibliography bibliography)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Bibliography] (BibliographyId, Name, Description)
                                    VALUES (@BibliographyId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(bibliography.BibliographyId, null)) cmd.Parameters.AddWithValue("@BibliographyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@BibliographyId", bibliography.BibliographyId);
                
                  
                if (ReferenceEquals(bibliography.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", bibliography.Name);
                
                  
                if (ReferenceEquals(bibliography.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", bibliography.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Bibliography bibliography)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = bibliography.BibliographyId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Bibliography WHERE BibliographyId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(bibliography);
                else return this.Insert(bibliography);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllBibliographies<T>()
            where T : Bibliography, new()
        {
            return this.GetAllBibliographies<T>(String.Empty);
        }

        
        public List<T> GetAllBibliographies<T>(String whereClause)
            where T : Bibliography, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Bibliography]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T bibliography = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("BibliographyId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          bibliography.BibliographyId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          bibliography.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          bibliography.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(bibliography);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Bibliography
        /// </summary>
        /// <returns></returns>
        public int Update(Bibliography bibliography)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Bibliography] SET 
                                    Name = @Name,Description = @Description
                                    WHERE BibliographyId = @BibliographyId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(bibliography.BibliographyId, null)) cmd.Parameters.AddWithValue("@BibliographyId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@BibliographyId", bibliography.BibliographyId);
                 //TEXT
                
                if (ReferenceEquals(bibliography.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", bibliography.Name);
                 //TEXT
                
                if (ReferenceEquals(bibliography.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", bibliography.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Bibliography
        /// </summary>
        /// <returns></returns>
        public int Delete(Bibliography bibliography)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Bibliography] 
                                    WHERE BibliographyId = @BibliographyId", this.Schema);
                                    
                
                if (ReferenceEquals(bibliography.BibliographyId, null)) cmd.Parameters.AddWithValue("@BibliographyId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@BibliographyId", bibliography.BibliographyId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Enwikipediaorgwikispecialcentralautologinstarttypex enwikipediaorgwikispecialcentralautologinstarttypex)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Enwikipediaorgwikispecialcentralautologinstarttypex] (EnwikipediaorgwikispecialcentralautologinstarttypexId, Name, Description)
                                    VALUES (@EnwikipediaorgwikispecialcentralautologinstarttypexId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId, null)) cmd.Parameters.AddWithValue("@EnwikipediaorgwikispecialcentralautologinstarttypexId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EnwikipediaorgwikispecialcentralautologinstarttypexId", enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId);
                
                  
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", enwikipediaorgwikispecialcentralautologinstarttypex.Name);
                
                  
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", enwikipediaorgwikispecialcentralautologinstarttypex.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Enwikipediaorgwikispecialcentralautologinstarttypex enwikipediaorgwikispecialcentralautologinstarttypex)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Enwikipediaorgwikispecialcentralautologinstarttypex WHERE EnwikipediaorgwikispecialcentralautologinstarttypexId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(enwikipediaorgwikispecialcentralautologinstarttypex);
                else return this.Insert(enwikipediaorgwikispecialcentralautologinstarttypex);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllEnwikipediaorgwikispecialcentralautologinstarttypexes<T>()
            where T : Enwikipediaorgwikispecialcentralautologinstarttypex, new()
        {
            return this.GetAllEnwikipediaorgwikispecialcentralautologinstarttypexes<T>(String.Empty);
        }

        
        public List<T> GetAllEnwikipediaorgwikispecialcentralautologinstarttypexes<T>(String whereClause)
            where T : Enwikipediaorgwikispecialcentralautologinstarttypex, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Enwikipediaorgwikispecialcentralautologinstarttypex]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T enwikipediaorgwikispecialcentralautologinstarttypex = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("EnwikipediaorgwikispecialcentralautologinstarttypexId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          enwikipediaorgwikispecialcentralautologinstarttypex.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          enwikipediaorgwikispecialcentralautologinstarttypex.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(enwikipediaorgwikispecialcentralautologinstarttypex);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Enwikipediaorgwikispecialcentralautologinstarttypex
        /// </summary>
        /// <returns></returns>
        public int Update(Enwikipediaorgwikispecialcentralautologinstarttypex enwikipediaorgwikispecialcentralautologinstarttypex)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Enwikipediaorgwikispecialcentralautologinstarttypex] SET 
                                    Name = @Name,Description = @Description
                                    WHERE EnwikipediaorgwikispecialcentralautologinstarttypexId = @EnwikipediaorgwikispecialcentralautologinstarttypexId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId, null)) cmd.Parameters.AddWithValue("@EnwikipediaorgwikispecialcentralautologinstarttypexId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@EnwikipediaorgwikispecialcentralautologinstarttypexId", enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId);
                 //TEXT
                
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", enwikipediaorgwikispecialcentralautologinstarttypex.Name);
                 //TEXT
                
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", enwikipediaorgwikispecialcentralautologinstarttypex.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Enwikipediaorgwikispecialcentralautologinstarttypex
        /// </summary>
        /// <returns></returns>
        public int Delete(Enwikipediaorgwikispecialcentralautologinstarttypex enwikipediaorgwikispecialcentralautologinstarttypex)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Enwikipediaorgwikispecialcentralautologinstarttypex] 
                                    WHERE EnwikipediaorgwikispecialcentralautologinstarttypexId = @EnwikipediaorgwikispecialcentralautologinstarttypexId", this.Schema);
                                    
                
                if (ReferenceEquals(enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId, null)) cmd.Parameters.AddWithValue("@EnwikipediaorgwikispecialcentralautologinstarttypexId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@EnwikipediaorgwikispecialcentralautologinstarttypexId", enwikipediaorgwikispecialcentralautologinstarttypex.EnwikipediaorgwikispecialcentralautologinstarttypexId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Httpsenwikipediaorgwindexphptitlemorsecodeoldid httpsenwikipediaorgwindexphptitlemorsecodeoldid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Httpsenwikipediaorgwindexphptitlemorsecodeoldid] (HttpsenwikipediaorgwindexphptitlemorsecodeoldidId, Name, Description)
                                    VALUES (@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId, null)) cmd.Parameters.AddWithValue("@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId);
                
                  
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", httpsenwikipediaorgwindexphptitlemorsecodeoldid.Name);
                
                  
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", httpsenwikipediaorgwindexphptitlemorsecodeoldid.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Httpsenwikipediaorgwindexphptitlemorsecodeoldid httpsenwikipediaorgwindexphptitlemorsecodeoldid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Httpsenwikipediaorgwindexphptitlemorsecodeoldid WHERE HttpsenwikipediaorgwindexphptitlemorsecodeoldidId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(httpsenwikipediaorgwindexphptitlemorsecodeoldid);
                else return this.Insert(httpsenwikipediaorgwindexphptitlemorsecodeoldid);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllHttpsenwikipediaorgwindexphptitlemorsecodeoldids<T>()
            where T : Httpsenwikipediaorgwindexphptitlemorsecodeoldid, new()
        {
            return this.GetAllHttpsenwikipediaorgwindexphptitlemorsecodeoldids<T>(String.Empty);
        }

        
        public List<T> GetAllHttpsenwikipediaorgwindexphptitlemorsecodeoldids<T>(String whereClause)
            where T : Httpsenwikipediaorgwindexphptitlemorsecodeoldid, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Httpsenwikipediaorgwindexphptitlemorsecodeoldid]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T httpsenwikipediaorgwindexphptitlemorsecodeoldid = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("HttpsenwikipediaorgwindexphptitlemorsecodeoldidId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          httpsenwikipediaorgwindexphptitlemorsecodeoldid.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          httpsenwikipediaorgwindexphptitlemorsecodeoldid.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(httpsenwikipediaorgwindexphptitlemorsecodeoldid);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Httpsenwikipediaorgwindexphptitlemorsecodeoldid
        /// </summary>
        /// <returns></returns>
        public int Update(Httpsenwikipediaorgwindexphptitlemorsecodeoldid httpsenwikipediaorgwindexphptitlemorsecodeoldid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Httpsenwikipediaorgwindexphptitlemorsecodeoldid] SET 
                                    Name = @Name,Description = @Description
                                    WHERE HttpsenwikipediaorgwindexphptitlemorsecodeoldidId = @HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId, null)) cmd.Parameters.AddWithValue("@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId);
                 //TEXT
                
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", httpsenwikipediaorgwindexphptitlemorsecodeoldid.Name);
                 //TEXT
                
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", httpsenwikipediaorgwindexphptitlemorsecodeoldid.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Httpsenwikipediaorgwindexphptitlemorsecodeoldid
        /// </summary>
        /// <returns></returns>
        public int Delete(Httpsenwikipediaorgwindexphptitlemorsecodeoldid httpsenwikipediaorgwindexphptitlemorsecodeoldid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Httpsenwikipediaorgwindexphptitlemorsecodeoldid] 
                                    WHERE HttpsenwikipediaorgwindexphptitlemorsecodeoldidId = @HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", this.Schema);
                                    
                
                if (ReferenceEquals(httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId, null)) cmd.Parameters.AddWithValue("@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@HttpsenwikipediaorgwindexphptitlemorsecodeoldidId", httpsenwikipediaorgwindexphptitlemorsecodeoldid.HttpsenwikipediaorgwindexphptitlemorsecodeoldidId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Letter letter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Letter] (LetterId, Name, Description)
                                    VALUES (@LetterId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(letter.LetterId, null)) cmd.Parameters.AddWithValue("@LetterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LetterId", letter.LetterId);
                
                  
                if (ReferenceEquals(letter.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", letter.Name);
                
                  
                if (ReferenceEquals(letter.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", letter.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Letter letter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = letter.LetterId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Letter WHERE LetterId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(letter);
                else return this.Insert(letter);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLetters<T>()
            where T : Letter, new()
        {
            return this.GetAllLetters<T>(String.Empty);
        }

        
        public List<T> GetAllLetters<T>(String whereClause)
            where T : Letter, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Letter]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T letter = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LetterId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          letter.LetterId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          letter.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          letter.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(letter);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Letter
        /// </summary>
        /// <returns></returns>
        public int Update(Letter letter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Letter] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LetterId = @LetterId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(letter.LetterId, null)) cmd.Parameters.AddWithValue("@LetterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LetterId", letter.LetterId);
                 //TEXT
                
                if (ReferenceEquals(letter.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", letter.Name);
                 //TEXT
                
                if (ReferenceEquals(letter.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", letter.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Letter
        /// </summary>
        /// <returns></returns>
        public int Delete(Letter letter)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Letter] 
                                    WHERE LetterId = @LetterId", this.Schema);
                                    
                
                if (ReferenceEquals(letter.LetterId, null)) cmd.Parameters.AddWithValue("@LetterId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LetterId", letter.LetterId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Numeral numeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Numeral] (NumeralId, Name, Description)
                                    VALUES (@NumeralId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(numeral.NumeralId, null)) cmd.Parameters.AddWithValue("@NumeralId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NumeralId", numeral.NumeralId);
                
                  
                if (ReferenceEquals(numeral.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", numeral.Name);
                
                  
                if (ReferenceEquals(numeral.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", numeral.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Numeral numeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = numeral.NumeralId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Numeral WHERE NumeralId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(numeral);
                else return this.Insert(numeral);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNumerals<T>()
            where T : Numeral, new()
        {
            return this.GetAllNumerals<T>(String.Empty);
        }

        
        public List<T> GetAllNumerals<T>(String whereClause)
            where T : Numeral, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Numeral]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T numeral = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NumeralId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          numeral.NumeralId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          numeral.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          numeral.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(numeral);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Numeral
        /// </summary>
        /// <returns></returns>
        public int Update(Numeral numeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Numeral] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NumeralId = @NumeralId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(numeral.NumeralId, null)) cmd.Parameters.AddWithValue("@NumeralId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NumeralId", numeral.NumeralId);
                 //TEXT
                
                if (ReferenceEquals(numeral.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", numeral.Name);
                 //TEXT
                
                if (ReferenceEquals(numeral.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", numeral.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Numeral
        /// </summary>
        /// <returns></returns>
        public int Delete(Numeral numeral)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Numeral] 
                                    WHERE NumeralId = @NumeralId", this.Schema);
                                    
                
                if (ReferenceEquals(numeral.NumeralId, null)) cmd.Parameters.AddWithValue("@NumeralId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NumeralId", numeral.NumeralId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Tone tone)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Tone] (ToneId, Name, Description)
                                    VALUES (@ToneId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(tone.ToneId, null)) cmd.Parameters.AddWithValue("@ToneId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ToneId", tone.ToneId);
                
                  
                if (ReferenceEquals(tone.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", tone.Name);
                
                  
                if (ReferenceEquals(tone.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", tone.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Tone tone)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = tone.ToneId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Tone WHERE ToneId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(tone);
                else return this.Insert(tone);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTones<T>()
            where T : Tone, new()
        {
            return this.GetAllTones<T>(String.Empty);
        }

        
        public List<T> GetAllTones<T>(String whereClause)
            where T : Tone, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Tone]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T tone = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ToneId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          tone.ToneId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          tone.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          tone.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(tone);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Tone
        /// </summary>
        /// <returns></returns>
        public int Update(Tone tone)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Tone] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ToneId = @ToneId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(tone.ToneId, null)) cmd.Parameters.AddWithValue("@ToneId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ToneId", tone.ToneId);
                 //TEXT
                
                if (ReferenceEquals(tone.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", tone.Name);
                 //TEXT
                
                if (ReferenceEquals(tone.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", tone.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Tone
        /// </summary>
        /// <returns></returns>
        public int Delete(Tone tone)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Tone] 
                                    WHERE ToneId = @ToneId", this.Schema);
                                    
                
                if (ReferenceEquals(tone.ToneId, null)) cmd.Parameters.AddWithValue("@ToneId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ToneId", tone.ToneId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Light light)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Light] (LightId, Name, Description)
                                    VALUES (@LightId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(light.LightId, null)) cmd.Parameters.AddWithValue("@LightId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LightId", light.LightId);
                
                  
                if (ReferenceEquals(light.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", light.Name);
                
                  
                if (ReferenceEquals(light.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", light.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Light light)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = light.LightId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Light WHERE LightId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(light);
                else return this.Insert(light);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLights<T>()
            where T : Light, new()
        {
            return this.GetAllLights<T>(String.Empty);
        }

        
        public List<T> GetAllLights<T>(String whereClause)
            where T : Light, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Light]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T light = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LightId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          light.LightId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          light.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          light.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(light);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Light
        /// </summary>
        /// <returns></returns>
        public int Update(Light light)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Light] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LightId = @LightId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(light.LightId, null)) cmd.Parameters.AddWithValue("@LightId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LightId", light.LightId);
                 //TEXT
                
                if (ReferenceEquals(light.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", light.Name);
                 //TEXT
                
                if (ReferenceEquals(light.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", light.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Light
        /// </summary>
        /// <returns></returns>
        public int Delete(Light light)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Light] 
                                    WHERE LightId = @LightId", this.Schema);
                                    
                
                if (ReferenceEquals(light.LightId, null)) cmd.Parameters.AddWithValue("@LightId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LightId", light.LightId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Click click)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Click] (ClickId, Name, Description)
                                    VALUES (@ClickId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(click.ClickId, null)) cmd.Parameters.AddWithValue("@ClickId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ClickId", click.ClickId);
                
                  
                if (ReferenceEquals(click.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", click.Name);
                
                  
                if (ReferenceEquals(click.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", click.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Click click)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = click.ClickId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Click WHERE ClickId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(click);
                else return this.Insert(click);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllClicks<T>()
            where T : Click, new()
        {
            return this.GetAllClicks<T>(String.Empty);
        }

        
        public List<T> GetAllClicks<T>(String whereClause)
            where T : Click, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Click]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T click = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ClickId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          click.ClickId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          click.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          click.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(click);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Click
        /// </summary>
        /// <returns></returns>
        public int Update(Click click)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Click] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ClickId = @ClickId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(click.ClickId, null)) cmd.Parameters.AddWithValue("@ClickId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ClickId", click.ClickId);
                 //TEXT
                
                if (ReferenceEquals(click.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", click.Name);
                 //TEXT
                
                if (ReferenceEquals(click.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", click.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Click
        /// </summary>
        /// <returns></returns>
        public int Delete(Click click)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Click] 
                                    WHERE ClickId = @ClickId", this.Schema);
                                    
                
                if (ReferenceEquals(click.ClickId, null)) cmd.Parameters.AddWithValue("@ClickId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ClickId", click.ClickId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Signal signal)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Signal] (SignalId, Name, Description)
                                    VALUES (@SignalId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(signal.SignalId, null)) cmd.Parameters.AddWithValue("@SignalId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SignalId", signal.SignalId);
                
                  
                if (ReferenceEquals(signal.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", signal.Name);
                
                  
                if (ReferenceEquals(signal.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", signal.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Signal signal)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = signal.SignalId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Signal WHERE SignalId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(signal);
                else return this.Insert(signal);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSignals<T>()
            where T : Signal, new()
        {
            return this.GetAllSignals<T>(String.Empty);
        }

        
        public List<T> GetAllSignals<T>(String whereClause)
            where T : Signal, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Signal]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T signal = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SignalId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          signal.SignalId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          signal.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          signal.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(signal);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Signal
        /// </summary>
        /// <returns></returns>
        public int Update(Signal signal)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Signal] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SignalId = @SignalId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(signal.SignalId, null)) cmd.Parameters.AddWithValue("@SignalId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SignalId", signal.SignalId);
                 //TEXT
                
                if (ReferenceEquals(signal.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", signal.Name);
                 //TEXT
                
                if (ReferenceEquals(signal.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", signal.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Signal
        /// </summary>
        /// <returns></returns>
        public int Delete(Signal signal)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Signal] 
                                    WHERE SignalId = @SignalId", this.Schema);
                                    
                
                if (ReferenceEquals(signal.SignalId, null)) cmd.Parameters.AddWithValue("@SignalId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SignalId", signal.SignalId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Prosign prosign)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Prosign] (ProsignId, Name, Description)
                                    VALUES (@ProsignId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(prosign.ProsignId, null)) cmd.Parameters.AddWithValue("@ProsignId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProsignId", prosign.ProsignId);
                
                  
                if (ReferenceEquals(prosign.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", prosign.Name);
                
                  
                if (ReferenceEquals(prosign.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", prosign.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Prosign prosign)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = prosign.ProsignId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Prosign WHERE ProsignId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(prosign);
                else return this.Insert(prosign);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllProsigns<T>()
            where T : Prosign, new()
        {
            return this.GetAllProsigns<T>(String.Empty);
        }

        
        public List<T> GetAllProsigns<T>(String whereClause)
            where T : Prosign, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Prosign]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T prosign = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ProsignId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          prosign.ProsignId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          prosign.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          prosign.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(prosign);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Prosign
        /// </summary>
        /// <returns></returns>
        public int Update(Prosign prosign)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Prosign] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ProsignId = @ProsignId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(prosign.ProsignId, null)) cmd.Parameters.AddWithValue("@ProsignId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProsignId", prosign.ProsignId);
                 //TEXT
                
                if (ReferenceEquals(prosign.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", prosign.Name);
                 //TEXT
                
                if (ReferenceEquals(prosign.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", prosign.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Prosign
        /// </summary>
        /// <returns></returns>
        public int Delete(Prosign prosign)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Prosign] 
                                    WHERE ProsignId = @ProsignId", this.Schema);
                                    
                
                if (ReferenceEquals(prosign.ProsignId, null)) cmd.Parameters.AddWithValue("@ProsignId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ProsignId", prosign.ProsignId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Sequence sequence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Sequence] (SequenceId, Name, Description)
                                    VALUES (@SequenceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(sequence.SequenceId, null)) cmd.Parameters.AddWithValue("@SequenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SequenceId", sequence.SequenceId);
                
                  
                if (ReferenceEquals(sequence.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", sequence.Name);
                
                  
                if (ReferenceEquals(sequence.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", sequence.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Sequence sequence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = sequence.SequenceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Sequence WHERE SequenceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(sequence);
                else return this.Insert(sequence);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSequences<T>()
            where T : Sequence, new()
        {
            return this.GetAllSequences<T>(String.Empty);
        }

        
        public List<T> GetAllSequences<T>(String whereClause)
            where T : Sequence, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Sequence]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T sequence = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SequenceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          sequence.SequenceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          sequence.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          sequence.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(sequence);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Sequence
        /// </summary>
        /// <returns></returns>
        public int Update(Sequence sequence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Sequence] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SequenceId = @SequenceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(sequence.SequenceId, null)) cmd.Parameters.AddWithValue("@SequenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SequenceId", sequence.SequenceId);
                 //TEXT
                
                if (ReferenceEquals(sequence.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", sequence.Name);
                 //TEXT
                
                if (ReferenceEquals(sequence.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", sequence.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Sequence
        /// </summary>
        /// <returns></returns>
        public int Delete(Sequence sequence)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Sequence] 
                                    WHERE SequenceId = @SequenceId", this.Schema);
                                    
                
                if (ReferenceEquals(sequence.SequenceId, null)) cmd.Parameters.AddWithValue("@SequenceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SequenceId", sequence.SequenceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Dot dot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Dot] (DotId, Name, Description)
                                    VALUES (@DotId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(dot.DotId, null)) cmd.Parameters.AddWithValue("@DotId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DotId", dot.DotId);
                
                  
                if (ReferenceEquals(dot.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", dot.Name);
                
                  
                if (ReferenceEquals(dot.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", dot.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Dot dot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = dot.DotId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Dot WHERE DotId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(dot);
                else return this.Insert(dot);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDots<T>()
            where T : Dot, new()
        {
            return this.GetAllDots<T>(String.Empty);
        }

        
        public List<T> GetAllDots<T>(String whereClause)
            where T : Dot, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Dot]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T dot = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DotId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          dot.DotId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          dot.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          dot.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(dot);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Dot
        /// </summary>
        /// <returns></returns>
        public int Update(Dot dot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Dot] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DotId = @DotId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(dot.DotId, null)) cmd.Parameters.AddWithValue("@DotId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DotId", dot.DotId);
                 //TEXT
                
                if (ReferenceEquals(dot.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", dot.Name);
                 //TEXT
                
                if (ReferenceEquals(dot.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", dot.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Dot
        /// </summary>
        /// <returns></returns>
        public int Delete(Dot dot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Dot] 
                                    WHERE DotId = @DotId", this.Schema);
                                    
                
                if (ReferenceEquals(dot.DotId, null)) cmd.Parameters.AddWithValue("@DotId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DotId", dot.DotId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Dash dash)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Dash] (DashId, Name, Description)
                                    VALUES (@DashId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(dash.DashId, null)) cmd.Parameters.AddWithValue("@DashId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DashId", dash.DashId);
                
                  
                if (ReferenceEquals(dash.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", dash.Name);
                
                  
                if (ReferenceEquals(dash.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", dash.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Dash dash)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = dash.DashId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Dash WHERE DashId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(dash);
                else return this.Insert(dash);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDashs<T>()
            where T : Dash, new()
        {
            return this.GetAllDashs<T>(String.Empty);
        }

        
        public List<T> GetAllDashs<T>(String whereClause)
            where T : Dash, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Dash]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T dash = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DashId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          dash.DashId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          dash.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          dash.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(dash);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Dash
        /// </summary>
        /// <returns></returns>
        public int Update(Dash dash)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Dash] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DashId = @DashId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(dash.DashId, null)) cmd.Parameters.AddWithValue("@DashId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DashId", dash.DashId);
                 //TEXT
                
                if (ReferenceEquals(dash.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", dash.Name);
                 //TEXT
                
                if (ReferenceEquals(dash.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", dash.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Dash
        /// </summary>
        /// <returns></returns>
        public int Delete(Dash dash)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Dash] 
                                    WHERE DashId = @DashId", this.Schema);
                                    
                
                if (ReferenceEquals(dash.DashId, null)) cmd.Parameters.AddWithValue("@DashId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DashId", dash.DashId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Language language)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Language] (LanguageId, Name, Description)
                                    VALUES (@LanguageId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(language.LanguageId, null)) cmd.Parameters.AddWithValue("@LanguageId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LanguageId", language.LanguageId);
                
                  
                if (ReferenceEquals(language.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", language.Name);
                
                  
                if (ReferenceEquals(language.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", language.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Language language)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = language.LanguageId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Language WHERE LanguageId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(language);
                else return this.Insert(language);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLanguages<T>()
            where T : Language, new()
        {
            return this.GetAllLanguages<T>(String.Empty);
        }

        
        public List<T> GetAllLanguages<T>(String whereClause)
            where T : Language, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Language]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T language = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LanguageId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          language.LanguageId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          language.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          language.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(language);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Language
        /// </summary>
        /// <returns></returns>
        public int Update(Language language)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Language] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LanguageId = @LanguageId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(language.LanguageId, null)) cmd.Parameters.AddWithValue("@LanguageId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LanguageId", language.LanguageId);
                 //TEXT
                
                if (ReferenceEquals(language.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", language.Name);
                 //TEXT
                
                if (ReferenceEquals(language.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", language.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Language
        /// </summary>
        /// <returns></returns>
        public int Delete(Language language)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Language] 
                                    WHERE LanguageId = @LanguageId", this.Schema);
                                    
                
                if (ReferenceEquals(language.LanguageId, null)) cmd.Parameters.AddWithValue("@LanguageId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LanguageId", language.LanguageId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Extension extension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Extension] (ExtensionId, Name, Description)
                                    VALUES (@ExtensionId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(extension.ExtensionId, null)) cmd.Parameters.AddWithValue("@ExtensionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ExtensionId", extension.ExtensionId);
                
                  
                if (ReferenceEquals(extension.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", extension.Name);
                
                  
                if (ReferenceEquals(extension.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", extension.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Extension extension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = extension.ExtensionId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Extension WHERE ExtensionId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(extension);
                else return this.Insert(extension);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllExtensions<T>()
            where T : Extension, new()
        {
            return this.GetAllExtensions<T>(String.Empty);
        }

        
        public List<T> GetAllExtensions<T>(String whereClause)
            where T : Extension, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Extension]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T extension = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ExtensionId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          extension.ExtensionId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          extension.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          extension.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(extension);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Extension
        /// </summary>
        /// <returns></returns>
        public int Update(Extension extension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Extension] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ExtensionId = @ExtensionId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(extension.ExtensionId, null)) cmd.Parameters.AddWithValue("@ExtensionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ExtensionId", extension.ExtensionId);
                 //TEXT
                
                if (ReferenceEquals(extension.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", extension.Name);
                 //TEXT
                
                if (ReferenceEquals(extension.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", extension.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Extension
        /// </summary>
        /// <returns></returns>
        public int Delete(Extension extension)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Extension] 
                                    WHERE ExtensionId = @ExtensionId", this.Schema);
                                    
                
                if (ReferenceEquals(extension.ExtensionId, null)) cmd.Parameters.AddWithValue("@ExtensionId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ExtensionId", extension.ExtensionId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(TelegraphOperator telegraphOperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[TelegraphOperator] (TelegraphOperatorId, Name, Description)
                                    VALUES (@TelegraphOperatorId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(telegraphOperator.TelegraphOperatorId, null)) cmd.Parameters.AddWithValue("@TelegraphOperatorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TelegraphOperatorId", telegraphOperator.TelegraphOperatorId);
                
                  
                if (ReferenceEquals(telegraphOperator.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", telegraphOperator.Name);
                
                  
                if (ReferenceEquals(telegraphOperator.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", telegraphOperator.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(TelegraphOperator telegraphOperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = telegraphOperator.TelegraphOperatorId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM TelegraphOperator WHERE TelegraphOperatorId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(telegraphOperator);
                else return this.Insert(telegraphOperator);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllTelegraphOperators<T>()
            where T : TelegraphOperator, new()
        {
            return this.GetAllTelegraphOperators<T>(String.Empty);
        }

        
        public List<T> GetAllTelegraphOperators<T>(String whereClause)
            where T : TelegraphOperator, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[TelegraphOperator]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T telegraphOperator = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("TelegraphOperatorId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          telegraphOperator.TelegraphOperatorId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          telegraphOperator.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          telegraphOperator.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(telegraphOperator);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified TelegraphOperator
        /// </summary>
        /// <returns></returns>
        public int Update(TelegraphOperator telegraphOperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[TelegraphOperator] SET 
                                    Name = @Name,Description = @Description
                                    WHERE TelegraphOperatorId = @TelegraphOperatorId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(telegraphOperator.TelegraphOperatorId, null)) cmd.Parameters.AddWithValue("@TelegraphOperatorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@TelegraphOperatorId", telegraphOperator.TelegraphOperatorId);
                 //TEXT
                
                if (ReferenceEquals(telegraphOperator.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", telegraphOperator.Name);
                 //TEXT
                
                if (ReferenceEquals(telegraphOperator.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", telegraphOperator.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified TelegraphOperator
        /// </summary>
        /// <returns></returns>
        public int Delete(TelegraphOperator telegraphOperator)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[TelegraphOperator] 
                                    WHERE TelegraphOperatorId = @TelegraphOperatorId", this.Schema);
                                    
                
                if (ReferenceEquals(telegraphOperator.TelegraphOperatorId, null)) cmd.Parameters.AddWithValue("@TelegraphOperatorId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@TelegraphOperatorId", telegraphOperator.TelegraphOperatorId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Country country)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Country] (CountryId, Name, Description)
                                    VALUES (@CountryId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(country.CountryId, null)) cmd.Parameters.AddWithValue("@CountryId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CountryId", country.CountryId);
                
                  
                if (ReferenceEquals(country.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", country.Name);
                
                  
                if (ReferenceEquals(country.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", country.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Country country)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = country.CountryId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Country WHERE CountryId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(country);
                else return this.Insert(country);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllCountries<T>()
            where T : Country, new()
        {
            return this.GetAllCountries<T>(String.Empty);
        }

        
        public List<T> GetAllCountries<T>(String whereClause)
            where T : Country, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Country]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T country = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("CountryId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          country.CountryId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          country.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          country.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(country);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Country
        /// </summary>
        /// <returns></returns>
        public int Update(Country country)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Country] SET 
                                    Name = @Name,Description = @Description
                                    WHERE CountryId = @CountryId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(country.CountryId, null)) cmd.Parameters.AddWithValue("@CountryId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@CountryId", country.CountryId);
                 //TEXT
                
                if (ReferenceEquals(country.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", country.Name);
                 //TEXT
                
                if (ReferenceEquals(country.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", country.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Country
        /// </summary>
        /// <returns></returns>
        public int Delete(Country country)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Country] 
                                    WHERE CountryId = @CountryId", this.Schema);
                                    
                
                if (ReferenceEquals(country.CountryId, null)) cmd.Parameters.AddWithValue("@CountryId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@CountryId", country.CountryId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Pilot pilot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Pilot] (PilotId, Name, Description)
                                    VALUES (@PilotId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(pilot.PilotId, null)) cmd.Parameters.AddWithValue("@PilotId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@PilotId", pilot.PilotId);
                
                  
                if (ReferenceEquals(pilot.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", pilot.Name);
                
                  
                if (ReferenceEquals(pilot.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", pilot.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Pilot pilot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = pilot.PilotId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Pilot WHERE PilotId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(pilot);
                else return this.Insert(pilot);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllPilots<T>()
            where T : Pilot, new()
        {
            return this.GetAllPilots<T>(String.Empty);
        }

        
        public List<T> GetAllPilots<T>(String whereClause)
            where T : Pilot, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Pilot]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T pilot = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("PilotId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          pilot.PilotId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          pilot.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          pilot.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(pilot);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Pilot
        /// </summary>
        /// <returns></returns>
        public int Update(Pilot pilot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Pilot] SET 
                                    Name = @Name,Description = @Description
                                    WHERE PilotId = @PilotId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(pilot.PilotId, null)) cmd.Parameters.AddWithValue("@PilotId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@PilotId", pilot.PilotId);
                 //TEXT
                
                if (ReferenceEquals(pilot.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", pilot.Name);
                 //TEXT
                
                if (ReferenceEquals(pilot.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", pilot.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Pilot
        /// </summary>
        /// <returns></returns>
        public int Delete(Pilot pilot)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Pilot] 
                                    WHERE PilotId = @PilotId", this.Schema);
                                    
                
                if (ReferenceEquals(pilot.PilotId, null)) cmd.Parameters.AddWithValue("@PilotId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@PilotId", pilot.PilotId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Controller controller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Controller] (ControllerId, Name, Description)
                                    VALUES (@ControllerId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(controller.ControllerId, null)) cmd.Parameters.AddWithValue("@ControllerId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ControllerId", controller.ControllerId);
                
                  
                if (ReferenceEquals(controller.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", controller.Name);
                
                  
                if (ReferenceEquals(controller.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", controller.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Controller controller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = controller.ControllerId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Controller WHERE ControllerId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(controller);
                else return this.Insert(controller);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllControllers<T>()
            where T : Controller, new()
        {
            return this.GetAllControllers<T>(String.Empty);
        }

        
        public List<T> GetAllControllers<T>(String whereClause)
            where T : Controller, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Controller]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T controller = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ControllerId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          controller.ControllerId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          controller.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          controller.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(controller);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Controller
        /// </summary>
        /// <returns></returns>
        public int Update(Controller controller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Controller] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ControllerId = @ControllerId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(controller.ControllerId, null)) cmd.Parameters.AddWithValue("@ControllerId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ControllerId", controller.ControllerId);
                 //TEXT
                
                if (ReferenceEquals(controller.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", controller.Name);
                 //TEXT
                
                if (ReferenceEquals(controller.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", controller.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Controller
        /// </summary>
        /// <returns></returns>
        public int Delete(Controller controller)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Controller] 
                                    WHERE ControllerId = @ControllerId", this.Schema);
                                    
                
                if (ReferenceEquals(controller.ControllerId, null)) cmd.Parameters.AddWithValue("@ControllerId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ControllerId", controller.ControllerId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Aid aid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Aid] (AidId, Name, Description)
                                    VALUES (@AidId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(aid.AidId, null)) cmd.Parameters.AddWithValue("@AidId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AidId", aid.AidId);
                
                  
                if (ReferenceEquals(aid.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aid.Name);
                
                  
                if (ReferenceEquals(aid.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aid.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Aid aid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = aid.AidId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Aid WHERE AidId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(aid);
                else return this.Insert(aid);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAids<T>()
            where T : Aid, new()
        {
            return this.GetAllAids<T>(String.Empty);
        }

        
        public List<T> GetAllAids<T>(String whereClause)
            where T : Aid, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Aid]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T aid = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AidId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          aid.AidId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aid.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          aid.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(aid);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Aid
        /// </summary>
        /// <returns></returns>
        public int Update(Aid aid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Aid] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AidId = @AidId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(aid.AidId, null)) cmd.Parameters.AddWithValue("@AidId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AidId", aid.AidId);
                 //TEXT
                
                if (ReferenceEquals(aid.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", aid.Name);
                 //TEXT
                
                if (ReferenceEquals(aid.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", aid.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Aid
        /// </summary>
        /// <returns></returns>
        public int Delete(Aid aid)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Aid] 
                                    WHERE AidId = @AidId", this.Schema);
                                    
                
                if (ReferenceEquals(aid.AidId, null)) cmd.Parameters.AddWithValue("@AidId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AidId", aid.AidId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Vor vor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Vor] (VorId, Name, Description)
                                    VALUES (@VorId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(vor.VorId, null)) cmd.Parameters.AddWithValue("@VorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VorId", vor.VorId);
                
                  
                if (ReferenceEquals(vor.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", vor.Name);
                
                  
                if (ReferenceEquals(vor.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", vor.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Vor vor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = vor.VorId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Vor WHERE VorId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(vor);
                else return this.Insert(vor);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllVors<T>()
            where T : Vor, new()
        {
            return this.GetAllVors<T>(String.Empty);
        }

        
        public List<T> GetAllVors<T>(String whereClause)
            where T : Vor, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Vor]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T vor = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("VorId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          vor.VorId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          vor.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          vor.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(vor);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Vor
        /// </summary>
        /// <returns></returns>
        public int Update(Vor vor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Vor] SET 
                                    Name = @Name,Description = @Description
                                    WHERE VorId = @VorId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(vor.VorId, null)) cmd.Parameters.AddWithValue("@VorId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VorId", vor.VorId);
                 //TEXT
                
                if (ReferenceEquals(vor.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", vor.Name);
                 //TEXT
                
                if (ReferenceEquals(vor.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", vor.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Vor
        /// </summary>
        /// <returns></returns>
        public int Delete(Vor vor)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Vor] 
                                    WHERE VorId = @VorId", this.Schema);
                                    
                
                if (ReferenceEquals(vor.VorId, null)) cmd.Parameters.AddWithValue("@VorId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@VorId", vor.VorId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Ndb ndb)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Ndb] (NdbId, Name, Description)
                                    VALUES (@NdbId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(ndb.NdbId, null)) cmd.Parameters.AddWithValue("@NdbId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NdbId", ndb.NdbId);
                
                  
                if (ReferenceEquals(ndb.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", ndb.Name);
                
                  
                if (ReferenceEquals(ndb.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", ndb.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Ndb ndb)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = ndb.NdbId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Ndb WHERE NdbId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(ndb);
                else return this.Insert(ndb);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNdbs<T>()
            where T : Ndb, new()
        {
            return this.GetAllNdbs<T>(String.Empty);
        }

        
        public List<T> GetAllNdbs<T>(String whereClause)
            where T : Ndb, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Ndb]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T ndb = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NdbId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          ndb.NdbId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          ndb.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          ndb.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(ndb);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Ndb
        /// </summary>
        /// <returns></returns>
        public int Update(Ndb ndb)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Ndb] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NdbId = @NdbId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(ndb.NdbId, null)) cmd.Parameters.AddWithValue("@NdbId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NdbId", ndb.NdbId);
                 //TEXT
                
                if (ReferenceEquals(ndb.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", ndb.Name);
                 //TEXT
                
                if (ReferenceEquals(ndb.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", ndb.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Ndb
        /// </summary>
        /// <returns></returns>
        public int Delete(Ndb ndb)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Ndb] 
                                    WHERE NdbId = @NdbId", this.Schema);
                                    
                
                if (ReferenceEquals(ndb.NdbId, null)) cmd.Parameters.AddWithValue("@NdbId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NdbId", ndb.NdbId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Condition condition)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Condition] (ConditionId, Name, Description)
                                    VALUES (@ConditionId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(condition.ConditionId, null)) cmd.Parameters.AddWithValue("@ConditionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ConditionId", condition.ConditionId);
                
                  
                if (ReferenceEquals(condition.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", condition.Name);
                
                  
                if (ReferenceEquals(condition.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", condition.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Condition condition)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = condition.ConditionId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Condition WHERE ConditionId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(condition);
                else return this.Insert(condition);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllConditions<T>()
            where T : Condition, new()
        {
            return this.GetAllConditions<T>(String.Empty);
        }

        
        public List<T> GetAllConditions<T>(String whereClause)
            where T : Condition, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Condition]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T condition = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ConditionId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          condition.ConditionId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          condition.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          condition.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(condition);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Condition
        /// </summary>
        /// <returns></returns>
        public int Update(Condition condition)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Condition] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ConditionId = @ConditionId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(condition.ConditionId, null)) cmd.Parameters.AddWithValue("@ConditionId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ConditionId", condition.ConditionId);
                 //TEXT
                
                if (ReferenceEquals(condition.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", condition.Name);
                 //TEXT
                
                if (ReferenceEquals(condition.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", condition.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Condition
        /// </summary>
        /// <returns></returns>
        public int Delete(Condition condition)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Condition] 
                                    WHERE ConditionId = @ConditionId", this.Schema);
                                    
                
                if (ReferenceEquals(condition.ConditionId, null)) cmd.Parameters.AddWithValue("@ConditionId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ConditionId", condition.ConditionId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Human human)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Human] (HumanId, Name, Description)
                                    VALUES (@HumanId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(human.HumanId, null)) cmd.Parameters.AddWithValue("@HumanId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HumanId", human.HumanId);
                
                  
                if (ReferenceEquals(human.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", human.Name);
                
                  
                if (ReferenceEquals(human.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", human.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Human human)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = human.HumanId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Human WHERE HumanId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(human);
                else return this.Insert(human);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllHumans<T>()
            where T : Human, new()
        {
            return this.GetAllHumans<T>(String.Empty);
        }

        
        public List<T> GetAllHumans<T>(String whereClause)
            where T : Human, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Human]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T human = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("HumanId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          human.HumanId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          human.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          human.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(human);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Human
        /// </summary>
        /// <returns></returns>
        public int Update(Human human)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Human] SET 
                                    Name = @Name,Description = @Description
                                    WHERE HumanId = @HumanId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(human.HumanId, null)) cmd.Parameters.AddWithValue("@HumanId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@HumanId", human.HumanId);
                 //TEXT
                
                if (ReferenceEquals(human.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", human.Name);
                 //TEXT
                
                if (ReferenceEquals(human.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", human.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Human
        /// </summary>
        /// <returns></returns>
        public int Delete(Human human)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Human] 
                                    WHERE HumanId = @HumanId", this.Schema);
                                    
                
                if (ReferenceEquals(human.HumanId, null)) cmd.Parameters.AddWithValue("@HumanId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@HumanId", human.HumanId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Datum datum)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Datum] (DatumId, Name, Description)
                                    VALUES (@DatumId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(datum.DatumId, null)) cmd.Parameters.AddWithValue("@DatumId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DatumId", datum.DatumId);
                
                  
                if (ReferenceEquals(datum.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", datum.Name);
                
                  
                if (ReferenceEquals(datum.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", datum.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Datum datum)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = datum.DatumId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Datum WHERE DatumId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(datum);
                else return this.Insert(datum);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllDatums<T>()
            where T : Datum, new()
        {
            return this.GetAllDatums<T>(String.Empty);
        }

        
        public List<T> GetAllDatums<T>(String whereClause)
            where T : Datum, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Datum]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T datum = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("DatumId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          datum.DatumId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          datum.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          datum.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(datum);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Datum
        /// </summary>
        /// <returns></returns>
        public int Update(Datum datum)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Datum] SET 
                                    Name = @Name,Description = @Description
                                    WHERE DatumId = @DatumId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(datum.DatumId, null)) cmd.Parameters.AddWithValue("@DatumId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@DatumId", datum.DatumId);
                 //TEXT
                
                if (ReferenceEquals(datum.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", datum.Name);
                 //TEXT
                
                if (ReferenceEquals(datum.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", datum.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Datum
        /// </summary>
        /// <returns></returns>
        public int Delete(Datum datum)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Datum] 
                                    WHERE DatumId = @DatumId", this.Schema);
                                    
                
                if (ReferenceEquals(datum.DatumId, null)) cmd.Parameters.AddWithValue("@DatumId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@DatumId", datum.DatumId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Channel channel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Channel] (ChannelId, Name, Description)
                                    VALUES (@ChannelId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(channel.ChannelId, null)) cmd.Parameters.AddWithValue("@ChannelId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ChannelId", channel.ChannelId);
                
                  
                if (ReferenceEquals(channel.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", channel.Name);
                
                  
                if (ReferenceEquals(channel.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", channel.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Channel channel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = channel.ChannelId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Channel WHERE ChannelId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(channel);
                else return this.Insert(channel);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllChannels<T>()
            where T : Channel, new()
        {
            return this.GetAllChannels<T>(String.Empty);
        }

        
        public List<T> GetAllChannels<T>(String whereClause)
            where T : Channel, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Channel]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T channel = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ChannelId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          channel.ChannelId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          channel.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          channel.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(channel);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Channel
        /// </summary>
        /// <returns></returns>
        public int Update(Channel channel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Channel] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ChannelId = @ChannelId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(channel.ChannelId, null)) cmd.Parameters.AddWithValue("@ChannelId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ChannelId", channel.ChannelId);
                 //TEXT
                
                if (ReferenceEquals(channel.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", channel.Name);
                 //TEXT
                
                if (ReferenceEquals(channel.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", channel.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Channel
        /// </summary>
        /// <returns></returns>
        public int Delete(Channel channel)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Channel] 
                                    WHERE ChannelId = @ChannelId", this.Schema);
                                    
                
                if (ReferenceEquals(channel.ChannelId, null)) cmd.Parameters.AddWithValue("@ChannelId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ChannelId", channel.ChannelId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Repeater repeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Repeater] (RepeaterId, Name, Description)
                                    VALUES (@RepeaterId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(repeater.RepeaterId, null)) cmd.Parameters.AddWithValue("@RepeaterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RepeaterId", repeater.RepeaterId);
                
                  
                if (ReferenceEquals(repeater.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", repeater.Name);
                
                  
                if (ReferenceEquals(repeater.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", repeater.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Repeater repeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = repeater.RepeaterId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Repeater WHERE RepeaterId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(repeater);
                else return this.Insert(repeater);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllRepeaters<T>()
            where T : Repeater, new()
        {
            return this.GetAllRepeaters<T>(String.Empty);
        }

        
        public List<T> GetAllRepeaters<T>(String whereClause)
            where T : Repeater, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Repeater]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T repeater = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("RepeaterId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          repeater.RepeaterId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          repeater.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          repeater.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(repeater);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Repeater
        /// </summary>
        /// <returns></returns>
        public int Update(Repeater repeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Repeater] SET 
                                    Name = @Name,Description = @Description
                                    WHERE RepeaterId = @RepeaterId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(repeater.RepeaterId, null)) cmd.Parameters.AddWithValue("@RepeaterId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@RepeaterId", repeater.RepeaterId);
                 //TEXT
                
                if (ReferenceEquals(repeater.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", repeater.Name);
                 //TEXT
                
                if (ReferenceEquals(repeater.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", repeater.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Repeater
        /// </summary>
        /// <returns></returns>
        public int Delete(Repeater repeater)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Repeater] 
                                    WHERE RepeaterId = @RepeaterId", this.Schema);
                                    
                
                if (ReferenceEquals(repeater.RepeaterId, null)) cmd.Parameters.AddWithValue("@RepeaterId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@RepeaterId", repeater.RepeaterId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Content content)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Content] (ContentId, Name, Description)
                                    VALUES (@ContentId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(content.ContentId, null)) cmd.Parameters.AddWithValue("@ContentId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ContentId", content.ContentId);
                
                  
                if (ReferenceEquals(content.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", content.Name);
                
                  
                if (ReferenceEquals(content.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", content.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Content content)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = content.ContentId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Content WHERE ContentId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(content);
                else return this.Insert(content);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllContents<T>()
            where T : Content, new()
        {
            return this.GetAllContents<T>(String.Empty);
        }

        
        public List<T> GetAllContents<T>(String whereClause)
            where T : Content, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Content]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T content = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ContentId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          content.ContentId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          content.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          content.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(content);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Content
        /// </summary>
        /// <returns></returns>
        public int Update(Content content)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Content] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ContentId = @ContentId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(content.ContentId, null)) cmd.Parameters.AddWithValue("@ContentId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ContentId", content.ContentId);
                 //TEXT
                
                if (ReferenceEquals(content.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", content.Name);
                 //TEXT
                
                if (ReferenceEquals(content.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", content.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Content
        /// </summary>
        /// <returns></returns>
        public int Delete(Content content)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Content] 
                                    WHERE ContentId = @ContentId", this.Schema);
                                    
                
                if (ReferenceEquals(content.ContentId, null)) cmd.Parameters.AddWithValue("@ContentId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ContentId", content.ContentId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Us us)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Us] (UsId, Name, Description)
                                    VALUES (@UsId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(us.UsId, null)) cmd.Parameters.AddWithValue("@UsId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UsId", us.UsId);
                
                  
                if (ReferenceEquals(us.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", us.Name);
                
                  
                if (ReferenceEquals(us.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", us.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Us us)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = us.UsId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Us WHERE UsId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(us);
                else return this.Insert(us);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUses<T>()
            where T : Us, new()
        {
            return this.GetAllUses<T>(String.Empty);
        }

        
        public List<T> GetAllUses<T>(String whereClause)
            where T : Us, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Us]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T us = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UsId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          us.UsId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          us.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          us.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(us);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Us
        /// </summary>
        /// <returns></returns>
        public int Update(Us us)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Us] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UsId = @UsId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(us.UsId, null)) cmd.Parameters.AddWithValue("@UsId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UsId", us.UsId);
                 //TEXT
                
                if (ReferenceEquals(us.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", us.Name);
                 //TEXT
                
                if (ReferenceEquals(us.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", us.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Us
        /// </summary>
        /// <returns></returns>
        public int Delete(Us us)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Us] 
                                    WHERE UsId = @UsId", this.Schema);
                                    
                
                if (ReferenceEquals(us.UsId, null)) cmd.Parameters.AddWithValue("@UsId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UsId", us.UsId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Otheru otheru)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Otheru] (OtheruId, Name, Description)
                                    VALUES (@OtheruId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(otheru.OtheruId, null)) cmd.Parameters.AddWithValue("@OtheruId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@OtheruId", otheru.OtheruId);
                
                  
                if (ReferenceEquals(otheru.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", otheru.Name);
                
                  
                if (ReferenceEquals(otheru.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", otheru.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Otheru otheru)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = otheru.OtheruId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Otheru WHERE OtheruId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(otheru);
                else return this.Insert(otheru);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllOtherus<T>()
            where T : Otheru, new()
        {
            return this.GetAllOtherus<T>(String.Empty);
        }

        
        public List<T> GetAllOtherus<T>(String whereClause)
            where T : Otheru, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Otheru]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T otheru = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("OtheruId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          otheru.OtheruId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          otheru.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          otheru.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(otheru);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Otheru
        /// </summary>
        /// <returns></returns>
        public int Update(Otheru otheru)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Otheru] SET 
                                    Name = @Name,Description = @Description
                                    WHERE OtheruId = @OtheruId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(otheru.OtheruId, null)) cmd.Parameters.AddWithValue("@OtheruId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@OtheruId", otheru.OtheruId);
                 //TEXT
                
                if (ReferenceEquals(otheru.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", otheru.Name);
                 //TEXT
                
                if (ReferenceEquals(otheru.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", otheru.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Otheru
        /// </summary>
        /// <returns></returns>
        public int Delete(Otheru otheru)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Otheru] 
                                    WHERE OtheruId = @OtheruId", this.Schema);
                                    
                
                if (ReferenceEquals(otheru.OtheruId, null)) cmd.Parameters.AddWithValue("@OtheruId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@OtheruId", otheru.OtheruId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Application application)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Application] (ApplicationId, Name, Description)
                                    VALUES (@ApplicationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(application.ApplicationId, null)) cmd.Parameters.AddWithValue("@ApplicationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ApplicationId", application.ApplicationId);
                
                  
                if (ReferenceEquals(application.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", application.Name);
                
                  
                if (ReferenceEquals(application.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", application.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Application application)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = application.ApplicationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Application WHERE ApplicationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(application);
                else return this.Insert(application);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllApplications<T>()
            where T : Application, new()
        {
            return this.GetAllApplications<T>(String.Empty);
        }

        
        public List<T> GetAllApplications<T>(String whereClause)
            where T : Application, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Application]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T application = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ApplicationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          application.ApplicationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          application.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          application.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(application);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Application
        /// </summary>
        /// <returns></returns>
        public int Update(Application application)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Application] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ApplicationId = @ApplicationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(application.ApplicationId, null)) cmd.Parameters.AddWithValue("@ApplicationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ApplicationId", application.ApplicationId);
                 //TEXT
                
                if (ReferenceEquals(application.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", application.Name);
                 //TEXT
                
                if (ReferenceEquals(application.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", application.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Application
        /// </summary>
        /// <returns></returns>
        public int Delete(Application application)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Application] 
                                    WHERE ApplicationId = @ApplicationId", this.Schema);
                                    
                
                if (ReferenceEquals(application.ApplicationId, null)) cmd.Parameters.AddWithValue("@ApplicationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ApplicationId", application.ApplicationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Andspeed andspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Andspeed] (AndspeedId, Name, Description)
                                    VALUES (@AndspeedId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(andspeed.AndspeedId, null)) cmd.Parameters.AddWithValue("@AndspeedId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AndspeedId", andspeed.AndspeedId);
                
                  
                if (ReferenceEquals(andspeed.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", andspeed.Name);
                
                  
                if (ReferenceEquals(andspeed.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", andspeed.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Andspeed andspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = andspeed.AndspeedId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Andspeed WHERE AndspeedId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(andspeed);
                else return this.Insert(andspeed);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllAndspeeds<T>()
            where T : Andspeed, new()
        {
            return this.GetAllAndspeeds<T>(String.Empty);
        }

        
        public List<T> GetAllAndspeeds<T>(String whereClause)
            where T : Andspeed, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Andspeed]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T andspeed = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("AndspeedId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          andspeed.AndspeedId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          andspeed.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          andspeed.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(andspeed);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Andspeed
        /// </summary>
        /// <returns></returns>
        public int Update(Andspeed andspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Andspeed] SET 
                                    Name = @Name,Description = @Description
                                    WHERE AndspeedId = @AndspeedId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(andspeed.AndspeedId, null)) cmd.Parameters.AddWithValue("@AndspeedId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@AndspeedId", andspeed.AndspeedId);
                 //TEXT
                
                if (ReferenceEquals(andspeed.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", andspeed.Name);
                 //TEXT
                
                if (ReferenceEquals(andspeed.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", andspeed.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Andspeed
        /// </summary>
        /// <returns></returns>
        public int Delete(Andspeed andspeed)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Andspeed] 
                                    WHERE AndspeedId = @AndspeedId", this.Schema);
                                    
                
                if (ReferenceEquals(andspeed.AndspeedId, null)) cmd.Parameters.AddWithValue("@AndspeedId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@AndspeedId", andspeed.AndspeedId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Issue issue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Issue] (IssueId, Name, Description)
                                    VALUES (@IssueId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(issue.IssueId, null)) cmd.Parameters.AddWithValue("@IssueId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IssueId", issue.IssueId);
                
                  
                if (ReferenceEquals(issue.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", issue.Name);
                
                  
                if (ReferenceEquals(issue.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", issue.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Issue issue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = issue.IssueId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Issue WHERE IssueId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(issue);
                else return this.Insert(issue);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllIssues<T>()
            where T : Issue, new()
        {
            return this.GetAllIssues<T>(String.Empty);
        }

        
        public List<T> GetAllIssues<T>(String whereClause)
            where T : Issue, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Issue]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T issue = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("IssueId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          issue.IssueId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          issue.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          issue.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(issue);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Issue
        /// </summary>
        /// <returns></returns>
        public int Update(Issue issue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Issue] SET 
                                    Name = @Name,Description = @Description
                                    WHERE IssueId = @IssueId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(issue.IssueId, null)) cmd.Parameters.AddWithValue("@IssueId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@IssueId", issue.IssueId);
                 //TEXT
                
                if (ReferenceEquals(issue.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", issue.Name);
                 //TEXT
                
                if (ReferenceEquals(issue.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", issue.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Issue
        /// </summary>
        /// <returns></returns>
        public int Delete(Issue issue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Issue] 
                                    WHERE IssueId = @IssueId", this.Schema);
                                    
                
                if (ReferenceEquals(issue.IssueId, null)) cmd.Parameters.AddWithValue("@IssueId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@IssueId", issue.IssueId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Linkbudgetissue linkbudgetissue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Linkbudgetissue] (LinkbudgetissueId, Name, Description)
                                    VALUES (@LinkbudgetissueId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(linkbudgetissue.LinkbudgetissueId, null)) cmd.Parameters.AddWithValue("@LinkbudgetissueId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LinkbudgetissueId", linkbudgetissue.LinkbudgetissueId);
                
                  
                if (ReferenceEquals(linkbudgetissue.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", linkbudgetissue.Name);
                
                  
                if (ReferenceEquals(linkbudgetissue.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", linkbudgetissue.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Linkbudgetissue linkbudgetissue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = linkbudgetissue.LinkbudgetissueId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Linkbudgetissue WHERE LinkbudgetissueId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(linkbudgetissue);
                else return this.Insert(linkbudgetissue);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLinkbudgetissues<T>()
            where T : Linkbudgetissue, new()
        {
            return this.GetAllLinkbudgetissues<T>(String.Empty);
        }

        
        public List<T> GetAllLinkbudgetissues<T>(String whereClause)
            where T : Linkbudgetissue, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Linkbudgetissue]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T linkbudgetissue = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LinkbudgetissueId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          linkbudgetissue.LinkbudgetissueId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          linkbudgetissue.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          linkbudgetissue.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(linkbudgetissue);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Linkbudgetissue
        /// </summary>
        /// <returns></returns>
        public int Update(Linkbudgetissue linkbudgetissue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Linkbudgetissue] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LinkbudgetissueId = @LinkbudgetissueId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(linkbudgetissue.LinkbudgetissueId, null)) cmd.Parameters.AddWithValue("@LinkbudgetissueId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LinkbudgetissueId", linkbudgetissue.LinkbudgetissueId);
                 //TEXT
                
                if (ReferenceEquals(linkbudgetissue.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", linkbudgetissue.Name);
                 //TEXT
                
                if (ReferenceEquals(linkbudgetissue.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", linkbudgetissue.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Linkbudgetissue
        /// </summary>
        /// <returns></returns>
        public int Delete(Linkbudgetissue linkbudgetissue)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Linkbudgetissue] 
                                    WHERE LinkbudgetissueId = @LinkbudgetissueId", this.Schema);
                                    
                
                if (ReferenceEquals(linkbudgetissue.LinkbudgetissueId, null)) cmd.Parameters.AddWithValue("@LinkbudgetissueId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LinkbudgetissueId", linkbudgetissue.LinkbudgetissueId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Learningmethod learningmethod)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Learningmethod] (LearningmethodId, Name, Description)
                                    VALUES (@LearningmethodId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(learningmethod.LearningmethodId, null)) cmd.Parameters.AddWithValue("@LearningmethodId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LearningmethodId", learningmethod.LearningmethodId);
                
                  
                if (ReferenceEquals(learningmethod.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", learningmethod.Name);
                
                  
                if (ReferenceEquals(learningmethod.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", learningmethod.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Learningmethod learningmethod)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = learningmethod.LearningmethodId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Learningmethod WHERE LearningmethodId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(learningmethod);
                else return this.Insert(learningmethod);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllLearningmethods<T>()
            where T : Learningmethod, new()
        {
            return this.GetAllLearningmethods<T>(String.Empty);
        }

        
        public List<T> GetAllLearningmethods<T>(String whereClause)
            where T : Learningmethod, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Learningmethod]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T learningmethod = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("LearningmethodId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          learningmethod.LearningmethodId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          learningmethod.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          learningmethod.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(learningmethod);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Learningmethod
        /// </summary>
        /// <returns></returns>
        public int Update(Learningmethod learningmethod)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Learningmethod] SET 
                                    Name = @Name,Description = @Description
                                    WHERE LearningmethodId = @LearningmethodId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(learningmethod.LearningmethodId, null)) cmd.Parameters.AddWithValue("@LearningmethodId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@LearningmethodId", learningmethod.LearningmethodId);
                 //TEXT
                
                if (ReferenceEquals(learningmethod.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", learningmethod.Name);
                 //TEXT
                
                if (ReferenceEquals(learningmethod.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", learningmethod.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Learningmethod
        /// </summary>
        /// <returns></returns>
        public int Delete(Learningmethod learningmethod)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Learningmethod] 
                                    WHERE LearningmethodId = @LearningmethodId", this.Schema);
                                    
                
                if (ReferenceEquals(learningmethod.LearningmethodId, null)) cmd.Parameters.AddWithValue("@LearningmethodId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@LearningmethodId", learningmethod.LearningmethodId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Number number)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Number] (NumberId, Name, Description)
                                    VALUES (@NumberId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(number.NumberId, null)) cmd.Parameters.AddWithValue("@NumberId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NumberId", number.NumberId);
                
                  
                if (ReferenceEquals(number.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", number.Name);
                
                  
                if (ReferenceEquals(number.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", number.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Number number)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = number.NumberId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Number WHERE NumberId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(number);
                else return this.Insert(number);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllNumbers<T>()
            where T : Number, new()
        {
            return this.GetAllNumbers<T>(String.Empty);
        }

        
        public List<T> GetAllNumbers<T>(String whereClause)
            where T : Number, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Number]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T number = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("NumberId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          number.NumberId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          number.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          number.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(number);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Number
        /// </summary>
        /// <returns></returns>
        public int Update(Number number)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Number] SET 
                                    Name = @Name,Description = @Description
                                    WHERE NumberId = @NumberId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(number.NumberId, null)) cmd.Parameters.AddWithValue("@NumberId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@NumberId", number.NumberId);
                 //TEXT
                
                if (ReferenceEquals(number.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", number.Name);
                 //TEXT
                
                if (ReferenceEquals(number.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", number.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Number
        /// </summary>
        /// <returns></returns>
        public int Delete(Number number)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Number] 
                                    WHERE NumberId = @NumberId", this.Schema);
                                    
                
                if (ReferenceEquals(number.NumberId, null)) cmd.Parameters.AddWithValue("@NumberId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@NumberId", number.NumberId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Variant variant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Variant] (VariantId, Name, Description)
                                    VALUES (@VariantId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(variant.VariantId, null)) cmd.Parameters.AddWithValue("@VariantId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VariantId", variant.VariantId);
                
                  
                if (ReferenceEquals(variant.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", variant.Name);
                
                  
                if (ReferenceEquals(variant.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", variant.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Variant variant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = variant.VariantId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Variant WHERE VariantId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(variant);
                else return this.Insert(variant);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllVariants<T>()
            where T : Variant, new()
        {
            return this.GetAllVariants<T>(String.Empty);
        }

        
        public List<T> GetAllVariants<T>(String whereClause)
            where T : Variant, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Variant]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T variant = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("VariantId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          variant.VariantId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          variant.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          variant.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(variant);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Variant
        /// </summary>
        /// <returns></returns>
        public int Update(Variant variant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Variant] SET 
                                    Name = @Name,Description = @Description
                                    WHERE VariantId = @VariantId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(variant.VariantId, null)) cmd.Parameters.AddWithValue("@VariantId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@VariantId", variant.VariantId);
                 //TEXT
                
                if (ReferenceEquals(variant.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", variant.Name);
                 //TEXT
                
                if (ReferenceEquals(variant.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", variant.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Variant
        /// </summary>
        /// <returns></returns>
        public int Delete(Variant variant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Variant] 
                                    WHERE VariantId = @VariantId", this.Schema);
                                    
                
                if (ReferenceEquals(variant.VariantId, null)) cmd.Parameters.AddWithValue("@VariantId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@VariantId", variant.VariantId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Prosignsformorsecodeandnonenglishvariant prosignsformorsecodeandnonenglishvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Prosignsformorsecodeandnonenglishvariant] (ProsignsformorsecodeandnonenglishvariantId, Name, Description)
                                    VALUES (@ProsignsformorsecodeandnonenglishvariantId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId, null)) cmd.Parameters.AddWithValue("@ProsignsformorsecodeandnonenglishvariantId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProsignsformorsecodeandnonenglishvariantId", prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId);
                
                  
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", prosignsformorsecodeandnonenglishvariant.Name);
                
                  
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", prosignsformorsecodeandnonenglishvariant.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Prosignsformorsecodeandnonenglishvariant prosignsformorsecodeandnonenglishvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Prosignsformorsecodeandnonenglishvariant WHERE ProsignsformorsecodeandnonenglishvariantId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(prosignsformorsecodeandnonenglishvariant);
                else return this.Insert(prosignsformorsecodeandnonenglishvariant);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllProsignsformorsecodeandnonenglishvariants<T>()
            where T : Prosignsformorsecodeandnonenglishvariant, new()
        {
            return this.GetAllProsignsformorsecodeandnonenglishvariants<T>(String.Empty);
        }

        
        public List<T> GetAllProsignsformorsecodeandnonenglishvariants<T>(String whereClause)
            where T : Prosignsformorsecodeandnonenglishvariant, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Prosignsformorsecodeandnonenglishvariant]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T prosignsformorsecodeandnonenglishvariant = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ProsignsformorsecodeandnonenglishvariantId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          prosignsformorsecodeandnonenglishvariant.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          prosignsformorsecodeandnonenglishvariant.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(prosignsformorsecodeandnonenglishvariant);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Prosignsformorsecodeandnonenglishvariant
        /// </summary>
        /// <returns></returns>
        public int Update(Prosignsformorsecodeandnonenglishvariant prosignsformorsecodeandnonenglishvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Prosignsformorsecodeandnonenglishvariant] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ProsignsformorsecodeandnonenglishvariantId = @ProsignsformorsecodeandnonenglishvariantId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId, null)) cmd.Parameters.AddWithValue("@ProsignsformorsecodeandnonenglishvariantId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ProsignsformorsecodeandnonenglishvariantId", prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId);
                 //TEXT
                
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", prosignsformorsecodeandnonenglishvariant.Name);
                 //TEXT
                
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", prosignsformorsecodeandnonenglishvariant.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Prosignsformorsecodeandnonenglishvariant
        /// </summary>
        /// <returns></returns>
        public int Delete(Prosignsformorsecodeandnonenglishvariant prosignsformorsecodeandnonenglishvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Prosignsformorsecodeandnonenglishvariant] 
                                    WHERE ProsignsformorsecodeandnonenglishvariantId = @ProsignsformorsecodeandnonenglishvariantId", this.Schema);
                                    
                
                if (ReferenceEquals(prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId, null)) cmd.Parameters.AddWithValue("@ProsignsformorsecodeandnonenglishvariantId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ProsignsformorsecodeandnonenglishvariantId", prosignsformorsecodeandnonenglishvariant.ProsignsformorsecodeandnonenglishvariantId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Symbolrepresentation symbolrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Symbolrepresentation] (SymbolrepresentationId, Name, Description)
                                    VALUES (@SymbolrepresentationId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(symbolrepresentation.SymbolrepresentationId, null)) cmd.Parameters.AddWithValue("@SymbolrepresentationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SymbolrepresentationId", symbolrepresentation.SymbolrepresentationId);
                
                  
                if (ReferenceEquals(symbolrepresentation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", symbolrepresentation.Name);
                
                  
                if (ReferenceEquals(symbolrepresentation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", symbolrepresentation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Symbolrepresentation symbolrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = symbolrepresentation.SymbolrepresentationId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Symbolrepresentation WHERE SymbolrepresentationId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(symbolrepresentation);
                else return this.Insert(symbolrepresentation);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllSymbolrepresentations<T>()
            where T : Symbolrepresentation, new()
        {
            return this.GetAllSymbolrepresentations<T>(String.Empty);
        }

        
        public List<T> GetAllSymbolrepresentations<T>(String whereClause)
            where T : Symbolrepresentation, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Symbolrepresentation]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T symbolrepresentation = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("SymbolrepresentationId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          symbolrepresentation.SymbolrepresentationId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          symbolrepresentation.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          symbolrepresentation.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(symbolrepresentation);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Symbolrepresentation
        /// </summary>
        /// <returns></returns>
        public int Update(Symbolrepresentation symbolrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Symbolrepresentation] SET 
                                    Name = @Name,Description = @Description
                                    WHERE SymbolrepresentationId = @SymbolrepresentationId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(symbolrepresentation.SymbolrepresentationId, null)) cmd.Parameters.AddWithValue("@SymbolrepresentationId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@SymbolrepresentationId", symbolrepresentation.SymbolrepresentationId);
                 //TEXT
                
                if (ReferenceEquals(symbolrepresentation.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", symbolrepresentation.Name);
                 //TEXT
                
                if (ReferenceEquals(symbolrepresentation.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", symbolrepresentation.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Symbolrepresentation
        /// </summary>
        /// <returns></returns>
        public int Delete(Symbolrepresentation symbolrepresentation)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Symbolrepresentation] 
                                    WHERE SymbolrepresentationId = @SymbolrepresentationId", this.Schema);
                                    
                
                if (ReferenceEquals(symbolrepresentation.SymbolrepresentationId, null)) cmd.Parameters.AddWithValue("@SymbolrepresentationId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@SymbolrepresentationId", symbolrepresentation.SymbolrepresentationId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Unusualvariant unusualvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Unusualvariant] (UnusualvariantId, Name, Description)
                                    VALUES (@UnusualvariantId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(unusualvariant.UnusualvariantId, null)) cmd.Parameters.AddWithValue("@UnusualvariantId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UnusualvariantId", unusualvariant.UnusualvariantId);
                
                  
                if (ReferenceEquals(unusualvariant.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", unusualvariant.Name);
                
                  
                if (ReferenceEquals(unusualvariant.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", unusualvariant.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Unusualvariant unusualvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = unusualvariant.UnusualvariantId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Unusualvariant WHERE UnusualvariantId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(unusualvariant);
                else return this.Insert(unusualvariant);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllUnusualvariants<T>()
            where T : Unusualvariant, new()
        {
            return this.GetAllUnusualvariants<T>(String.Empty);
        }

        
        public List<T> GetAllUnusualvariants<T>(String whereClause)
            where T : Unusualvariant, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Unusualvariant]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T unusualvariant = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("UnusualvariantId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          unusualvariant.UnusualvariantId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          unusualvariant.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          unusualvariant.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(unusualvariant);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Unusualvariant
        /// </summary>
        /// <returns></returns>
        public int Update(Unusualvariant unusualvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Unusualvariant] SET 
                                    Name = @Name,Description = @Description
                                    WHERE UnusualvariantId = @UnusualvariantId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(unusualvariant.UnusualvariantId, null)) cmd.Parameters.AddWithValue("@UnusualvariantId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@UnusualvariantId", unusualvariant.UnusualvariantId);
                 //TEXT
                
                if (ReferenceEquals(unusualvariant.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", unusualvariant.Name);
                 //TEXT
                
                if (ReferenceEquals(unusualvariant.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", unusualvariant.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Unusualvariant
        /// </summary>
        /// <returns></returns>
        public int Delete(Unusualvariant unusualvariant)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Unusualvariant] 
                                    WHERE UnusualvariantId = @UnusualvariantId", this.Schema);
                                    
                
                if (ReferenceEquals(unusualvariant.UnusualvariantId, null)) cmd.Parameters.AddWithValue("@UnusualvariantId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@UnusualvariantId", unusualvariant.UnusualvariantId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Reference reference)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Reference] (ReferenceId, Name, Description)
                                    VALUES (@ReferenceId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(reference.ReferenceId, null)) cmd.Parameters.AddWithValue("@ReferenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ReferenceId", reference.ReferenceId);
                
                  
                if (ReferenceEquals(reference.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", reference.Name);
                
                  
                if (ReferenceEquals(reference.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", reference.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Reference reference)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = reference.ReferenceId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Reference WHERE ReferenceId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(reference);
                else return this.Insert(reference);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllReferences<T>()
            where T : Reference, new()
        {
            return this.GetAllReferences<T>(String.Empty);
        }

        
        public List<T> GetAllReferences<T>(String whereClause)
            where T : Reference, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Reference]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T reference = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ReferenceId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          reference.ReferenceId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          reference.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          reference.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(reference);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Reference
        /// </summary>
        /// <returns></returns>
        public int Update(Reference reference)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Reference] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ReferenceId = @ReferenceId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(reference.ReferenceId, null)) cmd.Parameters.AddWithValue("@ReferenceId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ReferenceId", reference.ReferenceId);
                 //TEXT
                
                if (ReferenceEquals(reference.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", reference.Name);
                 //TEXT
                
                if (ReferenceEquals(reference.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", reference.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Reference
        /// </summary>
        /// <returns></returns>
        public int Delete(Reference reference)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Reference] 
                                    WHERE ReferenceId = @ReferenceId", this.Schema);
                                    
                
                if (ReferenceEquals(reference.ReferenceId, null)) cmd.Parameters.AddWithValue("@ReferenceId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ReferenceId", reference.ReferenceId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

          
  
        /// <summary>
        /// Returns a count of the numbers of rows affected by the insert
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
  
  
  
        public int Insert(Externallink externallink)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"INSERT INTO [{0}].[Externallink] (ExternallinkId, Name, Description)
                                    VALUES (@ExternallinkId, @Name, @Description)", this.Schema);

                
                  
                if (ReferenceEquals(externallink.ExternallinkId, null)) cmd.Parameters.AddWithValue("@ExternallinkId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ExternallinkId", externallink.ExternallinkId);
                
                  
                if (ReferenceEquals(externallink.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", externallink.Name);
                
                  
                if (ReferenceEquals(externallink.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", externallink.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
          /// <summary>
        /// Returns a count of the numbers of rows affected by the Upsert.
        /// </summary>
        /// <param name="person"></param>
        /// <param name="dataSource"></param>
        /// <param name="dbName"></param>
        /// <returns></returns>
        public int Upsert(Externallink externallink)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                
                // Check if this method exists, and call insert or udpate as appropriate
                
                
                var id = externallink.ExternallinkId;
                cmd.CommandText = String.Format(@"SELECT CASE WHEN EXISTS (SELECT * FROM Externallink WHERE ExternallinkId = '{0}') THEN 1 else 0 END", id);
                
                var rowExists = cmd.ExecuteScalar();

                if (rowExists.SafeToString() == "1") return this.Update(externallink);
                else return this.Insert(externallink);
            }
            finally
            {
                conn.Close();
            }
        }
        
        public List<T> GetAllExternallinks<T>()
            where T : Externallink, new()
        {
            return this.GetAllExternallinks<T>(String.Empty);
        }

        
        public List<T> GetAllExternallinks<T>(String whereClause)
            where T : Externallink, new()
        {
            List<T> results = new List<T>();
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"SELECT * FROM [{0}].[Externallink]", this.Schema);
                if (!String.IsNullOrEmpty(whereClause)) 
                {
                    cmd.CommandText = String.Format("{0} WHERE {1}", cmd.CommandText, whereClause);
                }

                SqlDataReader reader = cmd.ExecuteReader();
                
                int propertyIndex = -1;
                while (reader.Read())
                {
                    T externallink = new T();
                    
                    
                      propertyIndex = reader.GetOrdinal("ExternallinkId");
                      if (!reader.IsDBNull(propertyIndex)) //GUID
                      {
                          
                          externallink.ExternallinkId = reader.GetGuid(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Name");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          externallink.Name = reader.GetString(propertyIndex);
                      }
                   
                      propertyIndex = reader.GetOrdinal("Description");
                      if (!reader.IsDBNull(propertyIndex)) //TEXT
                      {
                          
                          externallink.Description = reader.GetString(propertyIndex);
                      }
                   
                    results.Add(externallink);
                }

                return results;
            }
            finally
            {
                conn.Close();
            }
        }
        
        /// <summary>
        /// Updates the specified Externallink
        /// </summary>
        /// <returns></returns>
        public int Update(Externallink externallink)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"UPDATE [{0}].[Externallink] SET 
                                    Name = @Name,Description = @Description
                                    WHERE ExternallinkId = @ExternallinkId", this.Schema);

                 //GUID
                
                if (ReferenceEquals(externallink.ExternallinkId, null)) cmd.Parameters.AddWithValue("@ExternallinkId", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@ExternallinkId", externallink.ExternallinkId);
                 //TEXT
                
                if (ReferenceEquals(externallink.Name, null)) cmd.Parameters.AddWithValue("@Name", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Name", externallink.Name);
                 //TEXT
                
                if (ReferenceEquals(externallink.Description, null)) cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    
                else cmd.Parameters.AddWithValue("@Description", externallink.Description);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }
        
                
        /// <summary>
        /// Deletes the specified Externallink
        /// </summary>
        /// <returns></returns>
        public int Delete(Externallink externallink)
        {
            SqlConnection conn = this.CreateSqlConnection();
            try
            {
                this.InitializeConnection(conn);
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = String.Format(@"DELETE FROM [{0}].[Externallink] 
                                    WHERE ExternallinkId = @ExternallinkId", this.Schema);
                                    
                
                if (ReferenceEquals(externallink.ExternallinkId, null)) cmd.Parameters.AddWithValue("@ExternallinkId", DBNull.Value);
                else cmd.Parameters.AddWithValue("@ExternallinkId", externallink.ExternallinkId);
                

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected;
            }
            finally
            {
                conn.Close();
            }
        }

                  
            
            

        public object LastIdentity { get; set; }
        public string ExecuteAsUser { get; set; }
        
        private SqlConnection CreateSqlConnection() 
        {
            if (String.IsNullOrEmpty(this.ConnectionString))
            {
                SqlConnectionStringBuilder scsb = new SqlConnectionStringBuilder();
                scsb.DataSource = this.DataSourceName;
                scsb.InitialCatalog = this.DBName;
                scsb.IntegratedSecurity = true;
                this.ConnectionString = scsb.ConnectionString;
            }
            
            SqlDataManager.LastConnectionString = this.ConnectionString;
            
            return new SqlConnection(this.ConnectionString);
        }
        
        
        private void InitializeConnection(SqlConnection conn)
        {
            conn.Open();
            if (!String.IsNullOrEmpty(this.ExecuteAsUser))
            {
                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = String.Format("EXECUTE AS USER='{0}'", this.ExecuteAsUser);
                    cmd.ExecuteNonQuery();
                }
            }
        }
    }
}

      